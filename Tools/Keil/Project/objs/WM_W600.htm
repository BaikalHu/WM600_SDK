<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objs\WM_W600.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objs\WM_W600.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jun 10 10:39:43 2019
<BR><P>
<H3>Maximum Stack Usage =       4776 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__connect &rArr; los_net_connect &rArr; los_net_tls_connect &rArr; dtls_shakehand &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c8]">LOS_StartToRun</a>
 <LI><a href="#[634]">LOS_IntLock</a>
 <LI><a href="#[1060]">LOS_IntUnLock</a>
 <LI><a href="#[635]">LOS_IntRestore</a>
 <LI><a href="#[1061]">portGET_IPSR</a>
 <LI><a href="#[640]">osTaskSchedule</a>
 <LI><a href="#[a7]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a0]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">NMI_Handler</a><BR>
 <LI><a href="#[a1]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1]">HardFault_Handler</a><BR>
 <LI><a href="#[a2]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">MemManage_Handler</a><BR>
 <LI><a href="#[a3]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">BusFault_Handler</a><BR>
 <LI><a href="#[a4]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">UsageFault_Handler</a><BR>
 <LI><a href="#[a5]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">SVC_Handler</a><BR>
 <LI><a href="#[a6]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">DebugMon_Handler</a><BR>
 <LI><a href="#[ba]">DMA_BRUST_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">DMA_BRUST_IRQHandler</a><BR>
 <LI><a href="#[7b2]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b1]">lwip_sendto</a><BR>
 <LI><a href="#[749]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[749]">netconn_drain</a><BR>
 <LI><a href="#[9a9]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a9]">cJSON_Delete</a><BR>
 <LI><a href="#[cf6]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf5]">print_value</a><BR>
 <LI><a href="#[cf4]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf5]">print_value</a><BR>
 <LI><a href="#[ff1]">sm_WPA_PTK_DISCONNECT_Enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe5]">wpa_sta_disconnect</a><BR>
 <LI><a href="#[fe4]">sm_WPA_PTK_PTKINITDONE_Enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe5]">wpa_sta_disconnect</a><BR>
 <LI><a href="#[cf2]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf1]">parse_value</a><BR>
 <LI><a href="#[cef]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf1]">parse_value</a><BR>
 <LI><a href="#[ad0]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[adc]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[cca]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cca]">x509_crt_verify_child</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[bc]">ADC_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a3]">BusFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[cf]">CRYPTION_IRQHandler</a> from wm_common.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[4b8]">DHCPS_RecvCb</a> from dhcp_server.o(.text) referenced from dhcp_server.o(.text)
 <LI><a href="#[ba]">DMA_BRUST_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b5]">DMA_Channel0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b6]">DMA_Channel1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b7]">DMA_Channel2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b8]">DMA_Channel3_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b9]">DMA_Channel4_7_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[4c9]">DNSS_RecvCb</a> from dns_server.o(.text) referenced from dns_server.o(.text)
 <LI><a href="#[a6]">DebugMon_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ca]">FLASH_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c1]">GPIOA_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[d0]">GPIOB_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a1]">HardFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[bb]">I2C_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[cc]">I2S_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9d7]">MQTTRun</a> from mqttclient.o(.text) referenced from mqttclient.o(.text)
 <LI><a href="#[a2]">MemManage_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a0]">NMI_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b3]">PMU_GPIO_WAKE_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c9]">PMU_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[cd]">PMU_RTC_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b4]">PMU_SDIO_WAKE_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b2]">PMU_TIMER0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b1]">PMU_TIMER1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[cb]">PWM_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a7]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ce]">RSA_IRQHandler</a> from wm_common.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[e2]">ResetTimerProc</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[9f]">Reset_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ab]">SDIO_RX_CMD_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a9]">SDIO_RX_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ac]">SDIO_TX_CMD_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[aa]">SDIO_TX_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[be]">SPI_HS_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[bd]">SPI_LS_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a5]">SVC_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a8]">SysTick_Handler</a> from wm_rtos.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[253]">TEST1</a> from wm_main.o(.text) referenced from wm_main.o(.text)
 <LI><a href="#[255]">TEST2</a> from wm_main.o(.text) referenced from wm_main.o(.text)
 <LI><a href="#[256]">TEST3</a> from wm_main.o(.text) referenced from wm_main.o(.text)
 <LI><a href="#[c2]">TIM0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c3]">TIM1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c4]">TIM2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c5]">TIM3_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c6]">TIM4_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c7]">TIM5_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[bf]">UART0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c0]">UART1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[d1]">UART2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[d4]">Uart0Init</a> from wm_driver.o(.text) referenced from startup_venus.o(.text)
 <LI><a href="#[a4]">UsageFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c8]">WDG_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[dd]">_DhcpTickHandle</a> from dhcp_server.o(.text) referenced 2 times from dhcp_server.o(.text)
 <LI><a href="#[1a1]">__check_status</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[19c]">__connect</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[19b]">__deinit</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[19d]">__disconnect</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[19a]">__init</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[d5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_venus.o(.text)
 <LI><a href="#[19e]">__publish</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[19f]">__subscribe</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[1a0]">__unsubscribe</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.constdata)
 <LI><a href="#[189]">_sbackspace</a> from _sgetc.o(.text) referenced 3 times from sscanf.o(.text)
 <LI><a href="#[18a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[188]">_sgetc</a> from _sgetc.o(.text) referenced 3 times from sscanf.o(.text)
 <LI><a href="#[18d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[18d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[18e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[10a]">accept_function</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[da]">adc_dma_isr_callbk</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[150]">add_one_and_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[14e]">add_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[152]">add_zeros_and_len_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[154]">add_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[1a3]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a4]">aes_crypt_cfb128_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a5]">aes_crypt_ctr_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a2]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a8]">aes_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a9]">aes_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a7]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1a6]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12c]">alg_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[11f]">alg_napt_table_check</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[2d]">aolm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f00]">ap_handle_timer</a> from hostapd_sta_info.o(.text) referenced 7 times from hostapd_sta_info.o(.text)
 <LI><a href="#[17e]">ap_sta_disassoc_cb_timeout</a> from hostapd_sta_info.o(.text) referenced from hostapd_sta_info.o(.text)
 <LI><a href="#[d3a]">app_data_report</a> from agent_tiny_demo.o(.text) referenced from agent_tiny_demo.o(.text)
 <LI><a href="#[1cf]">arc4_crypt_stream_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1d1]">arc4_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1d2]">arc4_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1d0]">arc4_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[144]">atiny_calloc</a> from dtls_interface.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[143]">atiny_free</a> from atiny_osdep.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[146]">atiny_printf</a> from atiny_osdep.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[145]">atiny_snprintf</a> from atiny_osdep.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[22f]">atiny_task_entry</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[30]">atlt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2b]">atm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[35]">atpt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2c]">atrm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1c9]">blowfish_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1ca]">blowfish_crypt_cfb64_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1cb]">blowfish_crypt_ctr_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1c8]">blowfish_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1cd]">blowfish_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1ce]">blowfish_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1cc]">blowfish_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[20]">brdssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[181]">bss_release</a> from tls_wl_bss.o(.text) referenced from tls_wl_bss.o(.text)
 <LI><a href="#[1f]">bssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[9fa]">bufchar</a> from mqttpacket.o(.text) referenced from mqttpacket.o(.text)
 <LI><a href="#[89]">calloc</a> from malloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[1b1]">camellia_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b2]">camellia_crypt_cfb128_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b3]">camellia_crypt_ctr_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b0]">camellia_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b6]">camellia_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b7]">camellia_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b5]">camellia_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1b4]">camellia_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1ad]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1b9]">ccm_camellia_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1ae]">ccm_ctx_alloc</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1af]">ccm_ctx_free</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[22]">chl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[23]">chll_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3b]">cmdm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[21]">cntparam_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[d3]">con_net_status_changed_event</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[139]">conn_err</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[78]">csAesDecrypt</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[77]">csAesEncrypt</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[76]">csAesInit</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7d]">csArc4Decrypt</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7c]">csArc4Encrypt</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7b]">csArc4Init</a> from wm_matrixssl_compile.o(.text) referenced 4 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7e]">csMd5GenerateMac</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7f]">csMd5VerifyMac</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[82]">csNullDecrypt</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[81]">csNullEncrypt</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[83]">csNullGenerateMac</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[80]">csNullInit</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[84]">csNullVerifyMac</a> from wm_matrixssl_compile.o(.text) referenced 2 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[79]">csShaGenerateMac</a> from wm_matrixssl_compile.o(.text) referenced 6 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[7a]">csShaVerifyMac</a> from wm_matrixssl_compile.o(.text) referenced 6 times from wm_matrixssl_compile.o(.data)
 <LI><a href="#[157]">ctr_drbg_self_test_entropy</a> from ctr_drbg.o(.text) referenced from ctr_drbg.o(.text)
 <LI><a href="#[6e]">custdata_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11b]">cyclic_timer</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[36]">dbg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[32]">ddns_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[75]">debug_lwip</a> from wm_rtos.o(.text) referenced 2 times from wm_rtos.o(.data)
 <LI><a href="#[173]">demo_cmd_ioctl</a> from agent_tiny_demo.o(.text) referenced from agent_tiny_demo.o(.text)
 <LI><a href="#[1c1]">des3_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1c0]">des3_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1c4]">des3_ctx_alloc</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1c5]">des3_ctx_free</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1c3]">des3_set2key_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1c2]">des3_set2key_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1c7]">des3_set3key_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1c6]">des3_set3key_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1bb]">des_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1ba]">des_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1be]">des_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1bf]">des_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1bd]">des_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1bc]">des_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[196]">dhcp_coarse_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[197]">dhcp_fine_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[120]">dhcp_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[86b]">dhcp_start</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[86a]">dhcp_stop</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[34]">dname_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[31]">dns_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[10e]">dns_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[199]">dns_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[86]">do_cgi_advance</a> from web.o(.text) referenced 2 times from web.o(.data)
 <LI><a href="#[85]">do_cgi_config</a> from web.o(.text) referenced 2 times from web.o(.data)
 <LI><a href="#[87]">do_cgi_firmware</a> from web.o(.text) referenced 2 times from web.o(.data)
 <LI><a href="#[88]">do_cgi_webindex</a> from web.o(.text) referenced 2 times from web.o(.data)
 <LI><a href="#[118]">do_close_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[117]">do_create_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[8]">e_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[215]">ecdsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[212]">ecdsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[216]">ecdsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[214]">ecdsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[213]">ecdsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20e]">eckey_alloc_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[20a]">eckey_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20d]">eckey_check_pair</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[210]">eckey_debug</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[20f]">eckey_free_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[209]">eckey_get_bitlen</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[20c]">eckey_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20b]">eckey_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[211]">eckeydh_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[159]">ecp_mod_p192</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15e]">ecp_mod_p192k1</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15a]">ecp_mod_p224</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15f]">ecp_mod_p224k1</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[161]">ecp_mod_p255</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15b]">ecp_mod_p256</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[160]">ecp_mod_p256k1</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15c]">ecp_mod_p384</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[15d]">ecp_mod_p521</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[178]">eloop_timeout</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[1e]">encry_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11]">entm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[163]">entropy_dummy_source</a> from entropy.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[9]">ents_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[104]">err_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[37]">espc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[38]">espt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[872]">etharp_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[195]">etharp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[809]">ethernet_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[122]">ethernetif_igmp_mac_filter</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[87b]">ethernetif_init</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[12b]">ethernetif_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10d]">event_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[4b]">flsr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4c]">flsw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[18c]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[8a]">free</a> from malloc.o(.text) referenced 4 times from platform.o(.data)
 <LI><a href="#[8a]">free</a> from malloc.o(.text) referenced from cjson.o(.text)
 <LI><a href="#[41]">fwup_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3e8]">fwup_request_complete</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[db]">fwup_scheduler</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[1aa]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1b8]">gcm_camellia_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1ab]">gcm_ctx_alloc</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1ac]">gcm_ctx_free</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[142]">general_dealer</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.text)
 <LI><a href="#[156]">get_no_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[151]">get_one_and_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[14f]">get_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[153]">get_zeros_and_len_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[155]">get_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[164]">hmac_drbg_self_test_entropy</a> from hmac_drbg.o(.text) referenced from hmac_drbg.o(.text)
 <LI><a href="#[e5]">hostif_default_socket_err</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e3]">hostif_default_socket_setup</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e6]">hostif_default_socket_state_changed</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e4]">hostif_socket_recv</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e7]">hostif_socket_rpt</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e8]">hostif_socket_state_changed_ATCMD</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e9]">hostif_socket_state_changed_RICMD</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[53a]">hostif_wscan_cmplt</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[ed]">hspi_rx_cmd</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[ee]">hspi_rx_data</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f3]">hspi_send_tx_msg</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[ef]">hspi_tx</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[13b]">http_accept</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[132]">http_client_rx</a> from wm_http_compile.o(.text) referenced from wm_http_compile.o(.text)
 <LI><a href="#[13a]">http_poll</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[138]">http_recv</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[136]">http_sent</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[40]">httpc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[51]">hwv_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f48]">ieee80211_bss_timeout</a> from tls_wl_bss.o(.text) referenced from tls_wl_bss.o(.text)
 <LI><a href="#[f89]">ieee80211_sta_timer</a> from tls_wl_mlme.o(.text) referenced from tls_wl_mlme.o(.text)
 <LI><a href="#[17f]">ieee80211_tkip_countermeasures_stop</a> from tkip_countermeasures.o(.text) referenced from tkip_countermeasures.o(.text)
 <LI><a href="#[198]">igmp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[c]">ioc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3a]">iom_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11c]">ip4_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[194]">ip_reass_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[ff]">ipfrag_free_pbuf_custom</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[18b]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[1d]">key_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[10]">lkstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[13f]">los_read</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.text)
 <LI><a href="#[140]">los_write</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.text)
 <LI><a href="#[121]">low_level_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[53]">lpchl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[60]">lpchlr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5d]">lpchrs_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5b]">lppstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5a]">lppstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[62]">lpragc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5c]">lprfps_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[63]">lprsr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[58]">lprstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[57]">lprstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[59]">lprstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[61]">lpstpr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5f]">lpstpt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5e]">lptbd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[55]">lptstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[54]">lptstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[56]">lptstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[108]">lwip_getsockopt_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[754]">lwip_netconn_do_accepted</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[763]">lwip_netconn_do_bind</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[768]">lwip_netconn_do_close</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[77c]">lwip_netconn_do_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[106]">lwip_netconn_do_connected</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[74b]">lwip_netconn_do_delconn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[77f]">lwip_netconn_do_disconnect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10f]">lwip_netconn_do_dns_found</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[751]">lwip_netconn_do_getaddr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[7d7]">lwip_netconn_do_gethostbyname</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[775]">lwip_netconn_do_join_leave_group</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[797]">lwip_netconn_do_listen</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[7ba]">lwip_netconn_do_newconn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[79b]">lwip_netconn_do_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[7ae]">lwip_netconn_do_send</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[7a3]">lwip_netconn_do_write</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[107]">lwip_setsockopt_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[50]">mac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[d2]">main</a> from wm_main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8d]">malloc</a> from malloc.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[8d]">malloc</a> from malloc.o(.text) referenced from cjson.o(.text)
 <LI><a href="#[148]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[147]">mbedtls_entropy_func</a> from entropy.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[162]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[158]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(.text) referenced from ecdsa.o(.text)
 <LI><a href="#[1d6]">mbedtls_md5</a> from md5.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14c]">mbedtls_net_recv</a> from net_sockets_alt.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[14b]">mbedtls_net_recv_timeout</a> from net_sockets_alt.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[14d]">mbedtls_net_send</a> from net_sockets_alt.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[1de]">mbedtls_ripemd160</a> from ripemd160.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e6]">mbedtls_sha1</a> from sha1.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[149]">mbedtls_timing_get_delay</a> from timing_alt.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[14a]">mbedtls_timing_set_delay</a> from timing_alt.o(.text) referenced from dtls_interface.o(.text)
 <LI><a href="#[1d9]">md5_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d7]">md5_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d8]">md5_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d5]">md5_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1da]">md5_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d3]">md5_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1d4]">md5_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[131]">mem_free</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[191]">memcmp</a> from memcmp.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[190]">memcpy</a> from memmove.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[18f]">memset</a> from memseta.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[e96]">mp_reduce</a> from libtommath.o(.text) referenced from libtommath.o(.text)
 <LI><a href="#[e92]">mp_reduce_2k_l</a> from libtommath.o(.text) referenced from libtommath.o(.text)
 <LI><a href="#[13e]">mqtt_cmd_ioctl</a> from mqtt_client.o(.text) referenced from mqtt_client.o(.text)
 <LI><a href="#[141]">mqtt_loop_entry</a> from mqtt_port.o(.text) referenced from mqtt_port.o(.text)
 <LI><a href="#[13c]">mqtt_recv_cmd_topic</a> from mqtt_client.o(.text) referenced from mqtt_client.o(.text)
 <LI><a href="#[13d]">mqtt_recv_secret_topic</a> from mqtt_client.o(.text) referenced from mqtt_client.o(.text)
 <LI><a href="#[165]">myrand</a> from rsa.o(.text) referenced from rsa.o(.text)
 <LI><a href="#[119]">net_do_send</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[11a]">net_do_write</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[115]">net_tcp_accept_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[114]">net_tcp_connect_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[111]">net_tcp_err_cb</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[110]">net_tcp_poll_cb</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[113]">net_tcp_recv_cb</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[116]">net_udp_recv_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[11d]">netif_loop_output_ipv4</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[11e]">netif_loopif_init</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[734]">netif_poll</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[128]">netif_set_default</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[12f]">netif_set_down</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[12e]">netif_set_up</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[129]">netif_status_changed</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[127]">netif_status_changed2</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[124]">netifapi_do_netif_add</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[123]">netifapi_do_netif_common</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[12d]">netifapi_do_netif_set_addr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[2a]">nip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[192]">oneshot_airkiss_printf</a> from wm_oneshot_airkiss.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[3d]">oneshot_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4e9]">oneshot_special_fn</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[3e]">oneshotmode_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[fd]">osIdleTask</a> from wm_rtos.o(.text) referenced 2 times from wm_rtos.o(.text)
 <LI><a href="#[674]">osSwTmrTask</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[652]">osTaskEntry</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[654]">osTaskExit</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[68d]">osTaskSwitchCheck</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[3c]">pass_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[130]">pbuf_free_int</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fe]">pbuf_free_ooseq_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[6d]">ping_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[135]">ping_test_abort_timeout</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[134]">ping_test_stop_timeout</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[133]">ping_test_task</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[b]">pmtf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[103]">poll_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[2e]">portm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[8c]">printf</a> from printfa.o(i.__0printf) referenced 2 times from platform.o(.data)
 <LI><a href="#[43]">qmac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[44]">qver_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[112]">raw_sk_free_pbuf_custom_fn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[8e]">realloc</a> from malloc.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[8e]">realloc</a> from malloc.o(.text) referenced from cjson.o(.text)
 <LI><a href="#[10b]">recv_raw</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[105]">recv_tcp</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10c]">recv_udp</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[47]">regr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[48]">regw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[137]">restart_tmr_handler</a> from httpd.o(.text) referenced from httpd.o(.text)
 <LI><a href="#[49]">rfr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4a]">rfw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1e1]">ripemd160_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1df]">ripemd160_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e0]">ripemd160_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1dd]">ripemd160_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e2]">ripemd160_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1db]">ripemd160_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1dc]">ripemd160_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[206]">rsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21c]">rsa_alt_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[218]">rsa_alt_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21b]">rsa_alt_check_pair</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21a]">rsa_alt_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21d]">rsa_alt_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[217]">rsa_alt_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[219]">rsa_alt_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[200]">rsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[205]">rsa_check_pair_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[208]">rsa_debug</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[203]">rsa_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[204]">rsa_encrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[207]">rsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[1ff]">rsa_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[202]">rsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[201]">rsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a]">rstf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[97d]">scan_result_cb</a> from web.o(.text) referenced from web.o(.text)
 <LI><a href="#[102]">sent_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[1e9]">sha1_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e7]">sha1_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e8]">sha1_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e5]">sha1_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ea]">sha1_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e3]">sha1_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e4]">sha1_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f1]">sha224_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1ef]">sha224_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f0]">sha224_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1ed]">sha224_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f2]">sha224_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1eb]">sha224_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ec]">sha224_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1ee]">sha224_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f3]">sha256_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f4]">sha256_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1fb]">sha384_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f9]">sha384_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1fa]">sha384_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f7]">sha384_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1fc]">sha384_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f5]">sha384_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f6]">sha384_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f8]">sha384_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1fd]">sha512_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1fe]">sha512_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14]">skcls_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[12]">skct_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1a]">skghbn_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[17]">skrcv_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[18]">skrptm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[15]">sksdf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[16]">sksnd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[19]">sksrcip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[13]">skstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[64]">slist_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[8b]">snprintf</a> from printfa.o(i.__0snprintf) referenced 2 times from platform.o(.data)
 <LI><a href="#[4d4]">socket_recive_cb</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[6a]">softap_chl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[68]">softap_encry_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[69]">softap_key_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[65]">softap_lkstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[6c]">softap_nip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[67]">softap_qmac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[66]">softap_ssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[6b]">softap_wbgr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[d8]">spi_complete</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[d9]">spi_scheduler</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[52]">spif_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1c]">ssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[168]">ssl_calc_finished_tls</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[16e]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[16b]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[167]">ssl_calc_verify_tls</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[16d]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[16a]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[16f]">ssl_update_checksum_md5sha1</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[171]">ssl_update_checksum_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[170]">ssl_update_checksum_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[172]">ssl_update_checksum_start</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[182]">sta_info_release</a> from tls_wl_sta_info.o(.text) referenced from tls_wl_sta_info.o(.text)
 <LI><a href="#[de1]">standby_timeout</a> from tls_wl_core.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[8f]">supplicant_event_assoc</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[96]">supplicant_event_beacon_done</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[90]">supplicant_event_disassoc</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[95]">supplicant_event_mac_wdg</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[92]">supplicant_event_mic_err</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[9b]">supplicant_event_net_down</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[9c]">supplicant_event_net_fail</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[9d]">supplicant_event_net_up</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[93]">supplicant_event_rx_eapol</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[9a]">supplicant_event_rx_from_unknown</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[94]">supplicant_event_rx_mgmt</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[97]">supplicant_event_rx_ps</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[98]">supplicant_event_rx_pspoll</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[91]">supplicant_event_scan_completed</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[99]">supplicant_event_sta_active</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[9e]">supplicant_event_update_stat</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[174]">supplicant_ps_pkt_timer_expire</a> from wpa_supplicant.o(.text) referenced from ap.o(.text)
 <LI><a href="#[d6]">sys_net_status_changed</a> from tls_sys.o(.text) referenced from tls_sys.o(.text)
 <LI><a href="#[258]">task_start</a> from wm_main.o(.text) referenced from wm_main.o(.text)
 <LI><a href="#[dc]">task_thread</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[109]">tcp_accept_null</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[101]">tcp_recv_null</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[193]">tcp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[126]">tcpip_input</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[87a]">tcpip_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[100]">tcpip_tcp_timer</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[125]">tcpip_thread</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[42]">tem_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[166]">tls1_prf</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[73]">tls_freq_error_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[ec]">tls_hostif_http_client_err_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[eb]">tls_hostif_http_client_recv_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[ea]">tls_hostif_net_status_changed</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[5c9]">tls_hostif_tx_timeout</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f0]">tls_hspi_rx_cmd_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f1]">tls_hspi_rx_data_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f2]">tls_hspi_tx_data_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[38c]">tls_i2s_tx_dma_callback</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.text)
 <LI><a href="#[e0]">tls_oneshot_handshake_timeout</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[e1]">tls_oneshot_recv_timeout</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[501]">tls_oneshot_scan_result_cb</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[4f9]">tls_oneshot_special_task_handle</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[df]">tls_oneshot_switch_channel_tim_start</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[502]">tls_oneshot_task_handle</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[16c]">tls_prf_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[169]">tls_prf_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[74]">tls_rf_vcg_ctrl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[70]">tls_rx_wave</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4]">tls_spifls_drv_chip_erase</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[3]">tls_spifls_drv_erase</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[1]">tls_spifls_drv_fast_read</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[2]">tls_spifls_drv_page_write</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[5]">tls_spifls_drv_probe</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[0]">tls_spifls_drv_read</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6]">tls_spifls_drv_remove</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[dcf]">tls_supplicant_task</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[dc7]">tls_supplicant_timer_task</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[292]">tls_sys_task</a> from tls_sys.o(.text) referenced from tls_sys.o(.text)
 <LI><a href="#[72]">tls_tx_iq_mismatch_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[71]">tls_tx_lo_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[6f]">tls_tx_sin</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f7]">tls_uart0_task_rx_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[61b]">tls_uart1_task_rx_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f5]">tls_uart_free_tx_sent_data</a> from wm_driver.o(.text) referenced 2 times from wm_cmd.o(.text)
 <LI><a href="#[4f5]">tls_wifi_dataframe_recv</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[17c]">tls_wl_bss_mgmt_task</a> from tls_wl_bss.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[b0]">tls_wl_data_tx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ad]">tls_wl_mac_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[af]">tls_wl_mgmt_tx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[17a]">tls_wl_mlme_task</a> from tls_wl_mlme.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[dd9]">tls_wl_power_save_awake</a> from tls_wl_core.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[ae]">tls_wl_rx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[17b]">tls_wl_rx_task</a> from tls_wl_rx.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[179]">tls_wl_scan_task</a> from tls_wl_scan.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[4d]">txg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4f]">txg_rate_get_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4e]">txg_rate_set_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[fa]">uart_get_uart1_port</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[2f]">uart_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f6]">uart_rx</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.text)
 <LI><a href="#[60c]">uart_rx_timeout_handler</a> from wm_cmd.o(.text) referenced 10 times from wm_cmd.o(.text)
 <LI><a href="#[f9]">uart_send_tx_msg</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[f8]">uart_set_uart0_mode</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[fb]">uart_set_uart1_mode</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[fc]">uart_set_uart1_sock_param</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[60a]">uart_tx</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.text)
 <LI><a href="#[d7]">uart_tx_finish_callback</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[60b]">uart_tx_sent_callback</a> from wm_cmd.o(.text) referenced 3 times from wm_cmd.o(.text)
 <LI><a href="#[f4]">uart_tx_socket_finish_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[46]">updd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[45]">updm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3f]">updp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[33]">upnp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[28]">warc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[29]">warm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[26]">watc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[25]">wbgr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[39]">webs_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[12a]">wifi_status_changed</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[d]">wjoin_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[e]">wleav_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[de]">wm_oneshot_netif_status_event</a> from wm_wifi_oneshot.o(.text) referenced 6 times from wm_wifi_oneshot.o(.text)
 <LI><a href="#[17d]">wm_rf_set_channel</a> from tls_wl_rf.o(.text) referenced from tls_wl_hw.o(.text)
 <LI><a href="#[186]">wpa_group_update_sta</a> from wpa_auth.o(.text) referenced from wpa_auth.o(.text)
 <LI><a href="#[183]">wpa_rekey_gmk</a> from wpa_auth.o(.text) referenced 2 times from wpa_auth.o(.text)
 <LI><a href="#[187]">wpa_rekey_gtk</a> from wpa_auth.o(.text) referenced 2 times from wpa_auth.o(.text)
 <LI><a href="#[185]">wpa_rekey_ptk</a> from wpa_auth.o(.text) referenced 3 times from wpa_auth.o(.text)
 <LI><a href="#[184]">wpa_send_eapol_timeout</a> from wpa_auth.o(.text) referenced 4 times from wpa_auth.o(.text)
 <LI><a href="#[180]">wpa_sm_rekey_ptk</a> from wpa.o(.text) referenced from wpa.o(.text)
 <LI><a href="#[176]">wpa_supplicant_auth_timer</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[177]">wpa_supplicant_connect_timer</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[175]">wpa_supplicant_scan_timer</a> from scan.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[1b]">wprt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[27]">wpsm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[24]">wreg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f]">wscan_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[7]">z_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(.text)
</UL>
<P><STRONG><a name="[1034]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1029]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1035]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1036]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1037]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1038]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1039]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[224]"></a>agent_connect_net</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = agent_connect_net &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[231]"></a>flash_adaptor_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[22f]"></a>atiny_task_entry</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = atiny_task_entry &rArr; agent_tiny_entry &rArr; atiny_mqtt_bind &rArr; connect_server &rArr; mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_demo_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[235]"></a>creat_agenttiny_task</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = creat_agenttiny_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[238]"></a>UserMain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = UserMain &rArr; agent_connect_net &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[9f]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>DMA_BRUST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_BRUST_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_BRUST_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[103a]"></a>PMU_6IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[103b]"></a>RSV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>SDIO_RX_CMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[103c]"></a>__user_libspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>sendchar</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[18c]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[103d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>Int2Str</STRONG> (Thumb, 316 bytes, Stack size 28 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
</UL>

<P><STRONG><a name="[23c]"></a>wm_vprintf</STRONG> (Thumb, 892 bytes, Stack size 96 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = wm_vprintf &rArr; IP2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac2Str
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2Str
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_printf
</UL>

<P><STRONG><a name="[240]"></a>wm_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = wm_printf &rArr; wm_vprintf &rArr; IP2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_perror
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[241]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[103e]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
</UL>

<P><STRONG><a name="[243]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>

<P><STRONG><a name="[242]"></a>NVIC_Configration</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[103f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[1040]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>tls_os_timer_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_os_timer_init &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[247]"></a>vApplicationIdleHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_clr
</UL>

<P><STRONG><a name="[270]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>wm_gpio_config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm_gpio_config &rArr; wm_uart1_tx_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_tx_config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_tx_config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_do_config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_di_config
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_cs_config
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_ck_config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_af_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[253]"></a>TEST1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TEST1 &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_main.o(.text)
</UL>
<P><STRONG><a name="[255]"></a>TEST2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TEST2 &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_main.o(.text)
</UL>
<P><STRONG><a name="[256]"></a>TEST3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TEST3 &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_main.o(.text)
</UL>
<P><STRONG><a name="[257]"></a>LOS_BoadExampleEntry</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wm_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[258]"></a>task_start</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = task_start &rArr; wpa_supplicant_init &rArr; wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_mem_cfg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_auto_mode_run
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_gain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_layout_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_task_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_main.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = main &rArr; tls_os_init &rArr; LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_clk_select
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_start_scheduler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1041]"></a>disp_version_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_main.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>tls_auto_reconnect</STRONG> (Thumb, 168 bytes, Stack size 128 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tls_auto_reconnect &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
</UL>

<P><STRONG><a name="[292]"></a>tls_sys_task</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tls_sys_task &rArr; sys_net_down &rArr; tls_auto_reconnect &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_down
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_sys.o(.text)
</UL>
<P><STRONG><a name="[294]"></a>tls_sys_send_msg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_connect_failed
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net_down
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_fail
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_down
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_up
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net_up
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_auto_mode_run
</UL>

<P><STRONG><a name="[26d]"></a>tls_sys_auto_mode_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_auto_mode_run &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[268]"></a>tls_sys_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_sys_init &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[245]"></a>tls_sys_clk_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRegInit
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
</UL>

<P><STRONG><a name="[d4]"></a>Uart0Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart0Init &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(.text)
</UL>
<P><STRONG><a name="[2a1]"></a>UartRegInit</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UartRegInit &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
</UL>

<P><STRONG><a name="[2a3]"></a>tls_uart_check_baudrate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
</UL>

<P><STRONG><a name="[1042]"></a>tls_uart_get_baud_rate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>tls_uart_set_baud_rate_inside</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tls_uart_set_baud_rate_inside &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_check_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[2ad]"></a>tls_uart_set_parity_inside</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[1043]"></a>tls_uart_get_parity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>tls_uart_set_data_bits</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[1044]"></a>tls_uart_get_data_bits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>tls_uart_set_stop_bits_inside</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[1045]"></a>tls_uart_get_stop_bits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>tls_uart_set_flow_ctrl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_uart_set_flow_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>

<P><STRONG><a name="[2a9]"></a>tls_uart_set_fc_status</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_enable
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_flow_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_uart0_mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_uart1_mode
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
</UL>

<P><STRONG><a name="[5df]"></a>tls_uart_rx_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
</UL>

<P><STRONG><a name="[5e0]"></a>tls_uart_rx_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
</UL>

<P><STRONG><a name="[2ac]"></a>tls_uart_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_uart_config &rArr; tls_uart_set_baud_rate_inside &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_flow_ctrl
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits_inside
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_data_bits
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity_inside
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
</UL>

<P><STRONG><a name="[1046]"></a>tls_uart_poll_put_char</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1047]"></a>tls_uart_poll_get_char</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>tls_uart_tx_remain_len</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tls_uart_tx_remain_len &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
</UL>

<P><STRONG><a name="[2b5]"></a>tls_uart_fill_buf</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_uart_fill_buf &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>

<P><STRONG><a name="[f5]"></a>tls_uart_free_tx_sent_data</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = tls_uart_free_tx_sent_data &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm_driver.o(.text)
<LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[2b7]"></a>tls_uart_tx_chars_start</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>

<P><STRONG><a name="[2b8]"></a>tls_set_uart_rx_status</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tls_set_uart_rx_status &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[bf]"></a>UART0_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART0_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>UART1_IRQHandler</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART1_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>UART2_IRQHandler</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART2_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[2b9]"></a>tls_irq_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_standby_start
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_sdio_isr_register
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_gpio_isr_register
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer0_isr_register
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer1_isr_register
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_enable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_isr_register
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_isr_register
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[2bd]"></a>tls_uart_tx_callback_register</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
</UL>

<P><STRONG><a name="[2ba]"></a>tls_irq_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_irq_disable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_disable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_stop
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[2bb]"></a>tls_uart_port_init</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_uart_port_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_callback_register
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRegInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[61d]"></a>tls_uart_rx_callback_register</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
</UL>

<P><STRONG><a name="[2be]"></a>tls_uart_read</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2c2]"></a>tls_dma_start</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[2bf]"></a>tls_dma_irq_register</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tls_dma_irq_register &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[2c0]"></a>tls_dma_request</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_dma_request &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[2c1]"></a>tls_uart_dma_write</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[2c3]"></a>tls_uart_write_async</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
</UL>

<P><STRONG><a name="[1048]"></a>tls_uart_tx_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>tls_uart_write</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
</UL>

<P><STRONG><a name="[2c7]"></a>tls_uart_set_parity</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity_inside
</UL>

<P><STRONG><a name="[2c8]"></a>tls_uart_set_baud_rate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
</UL>

<P><STRONG><a name="[2c9]"></a>tls_uart_set_stop_bits</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits_inside
</UL>

<P><STRONG><a name="[1049]"></a>tls_uart_dma_off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>TIM0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM0_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>TIM1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM2_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TIM5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM5_IRQHandler &rArr; timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[2cc]"></a>tls_timer_create</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_timer_create &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_start
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
</UL>

<P><STRONG><a name="[2cd]"></a>tls_timer_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_change
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_start
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
</UL>

<P><STRONG><a name="[2ce]"></a>tls_timer_stop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_destroy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_change
</UL>

<P><STRONG><a name="[2cf]"></a>tls_timer_change</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[2d0]"></a>tls_timer_destroy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_timer_destroy &rArr; tls_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_stop
</UL>

<P><STRONG><a name="[2d1]"></a>tls_delay_via_timer</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_usleep
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_msleep
<LI><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_usleep
</UL>

<P><STRONG><a name="[2d8]"></a>tls_dma_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
</UL>

<P><STRONG><a name="[2dd]"></a>spiWaitIdle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
</UL>

<P><STRONG><a name="[2da]"></a>tls_dma_stop</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
</UL>

<P><STRONG><a name="[2d9]"></a>tls_dma_free</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_dma_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_callback
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
</UL>

<P><STRONG><a name="[2db]"></a>tls_dma_wait_complt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
</UL>

<P><STRONG><a name="[2df]"></a>tls_spi_trans_type</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tls_spi_trans_type &rArr; SpiMasterInit &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
</UL>

<P><STRONG><a name="[bd]"></a>SPI_LS_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SPI_LS_IRQHandler &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[2e9]"></a>tls_spi_setup</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls_spi_setup &rArr; SpiMasterInit &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
</UL>

<P><STRONG><a name="[2ea]"></a>tls_spi_async</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
</UL>

<P><STRONG><a name="[2eb]"></a>tls_spi_sync</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[2ec]"></a>tls_spi_read_with_cmd</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read_id
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_read
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
</UL>

<P><STRONG><a name="[2ed]"></a>tls_spi_read</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2ee]"></a>tls_spi_write</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_spi_write &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>

<P><STRONG><a name="[2ef]"></a>tls_spi_write_with_cmd</STRONG> (Thumb, 174 bytes, Stack size 104 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_spi_write_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[25a]"></a>tls_spi_init</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_spi_init &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[104a]"></a>tls_spi_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>tls_gpio_write</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_slave_sel
</UL>

<P><STRONG><a name="[2f8]"></a>tls_io_cfg_set</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option2
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option3
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option4
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option5
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option6
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_tx_config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_tx_config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_do_config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_di_config
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_cs_config
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_ck_config
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_adc_config
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_swd_config
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwmbrk_config
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm5_config
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm4_config
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm3_config
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm2_config
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm1_config
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_sda_config
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_scl_config
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_extclk_config
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_mclk_config
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_di_config
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_ws_config
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_ck_config
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_do_config
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_ws_config
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_ck_config
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_cts_config
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rts_scclk_config
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rx_config
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_tx_scio_config
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_cts_config
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rts_config
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_cts_config
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rts_config
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sdio_cmd_config
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sdio_config
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_hspi_gpio_config
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>

<P><STRONG><a name="[2f9]"></a>tls_gpio_cfg</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_slave_sel
</UL>

<P><STRONG><a name="[2fa]"></a>tls_spi_slave_sel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>

<P><STRONG><a name="[2fb]"></a>tls_set_rtc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[2fc]"></a>tls_get_rtc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>

<P><STRONG><a name="[cd]"></a>PMU_RTC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[2fd]"></a>tls_rtc_isr_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[2fe]"></a>tls_rtc_timer_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[2ff]"></a>tls_rtc_timer_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[cb]"></a>PWM_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[300]"></a>tls_pwm_isr_register</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[301]"></a>tls_pwm_duty_config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[302]"></a>tls_pwm_freq_config</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[303]"></a>tls_pwm_out_mode_config</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[304]"></a>tls_pwm_cnt_type_config</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[305]"></a>tls_pwm_loop_mode_config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[306]"></a>tls_pwm_out_inverse_cmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[307]"></a>tls_pwm_stoptime_by_period_config</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[308]"></a>tls_pwm_output_en_cmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[309]"></a>tls_pwm_deadzone_config</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[30a]"></a>tls_pwm_capture_inverse_cmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[30b]"></a>tls_pwm_brake_mode_config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[30c]"></a>tls_pwm_capture_mode_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[30d]"></a>tls_pwm_stoptime_irq_cmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[30e]"></a>tls_pwm_capture_irq_type_config</STRONG> (Thumb, 604 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[30f]"></a>tls_pwm_out_init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_irq_cmd
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_deadzone_config
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_by_period_config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_inverse_cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_mode_config
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_init
</UL>

<P><STRONG><a name="[310]"></a>tls_pwm_cap_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_irq_type_config
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_mode_config
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_inverse_cmd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
</UL>

<P><STRONG><a name="[311]"></a>tls_pwm_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
</UL>

<P><STRONG><a name="[312]"></a>tls_pwm_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
</UL>

<P><STRONG><a name="[313]"></a>tls_pwm_freq_set</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_start
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
</UL>

<P><STRONG><a name="[314]"></a>tls_pwm_duty_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
</UL>

<P><STRONG><a name="[315]"></a>tls_pwm_init</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[104b]"></a>tls_irq_handler_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>tls_irq_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[317]"></a>tls_irq_register_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>

<P><STRONG><a name="[318]"></a>OS_CPU_IRQ_ISR_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[319]"></a>tls_i2c_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[31a]"></a>tls_i2c_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
</UL>

<P><STRONG><a name="[31b]"></a>tls_i2c_wait_ack</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[31c]"></a>tls_i2c_write_byte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[31d]"></a>tls_i2c_read_byte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[104c]"></a>wm_i2c_start_write_it</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[104d]"></a>wm_i2c_start_read_it</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[104e]"></a>wm_i2c_transfer_done_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>I2C_IRQHandler</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[324]"></a>hspi_rx_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hspi_rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
</UL>

<P><STRONG><a name="[325]"></a>hspi_tx_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hspi_tx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
</UL>

<P><STRONG><a name="[31e]"></a>hspi_free_rxdesc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hspi_free_rxdesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_spi_rx_data
</UL>

<P><STRONG><a name="[a9]"></a>SDIO_RX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_RX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SDIO_TX_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_TX_IRQHandler &rArr; slave_spi_rx_data &rArr; hspi_free_rxdesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_spi_rx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>SDIO_TX_CMD_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_TX_CMD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>SPI_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_HS_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[320]"></a>hspi_regs_cfg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hspi_regs_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
</UL>

<P><STRONG><a name="[321]"></a>sdio_init_cis</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_init_cis
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
</UL>

<P><STRONG><a name="[322]"></a>hsdio_regs_cfg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hsdio_regs_cfg &rArr; sdio_init_cis
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_cis
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
</UL>

<P><STRONG><a name="[323]"></a>tls_slave_spi_init</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_slave_spi_init &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[326]"></a>tls_set_high_speed_interface_type</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_set_high_speed_interface_type &rArr; hsdio_regs_cfg &rArr; sdio_init_cis
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_regs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[104f]"></a>tls_set_hspi_user_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[604]"></a>tls_hspi_rx_cmd_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[605]"></a>tls_hspi_rx_data_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[606]"></a>tls_hspi_tx_data_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[327]"></a>tls_hspi_tx_data</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c1]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[328]"></a>tls_gpio_read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[329]"></a>tls_gpio_irq_enable</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[32a]"></a>tls_gpio_irq_disable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[32b]"></a>tls_get_gpio_irq_status</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>

<P><STRONG><a name="[32c]"></a>tls_clr_gpio_irq_status</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[1050]"></a>tls_gpio_isr_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>readSR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readSR
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
</UL>

<P><STRONG><a name="[331]"></a>readRID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
</UL>

<P><STRONG><a name="[330]"></a>flashSRRW</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flashSRRW &rArr; programSR
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRID
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSR
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSR
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programSR
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[335]"></a>writeESMTBpBit</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeESMTBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[334]"></a>writeGDBpBit</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeGDBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[333]"></a>flashlock</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flashlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeGDBpBit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeESMTBpBit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRID
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
</UL>

<P><STRONG><a name="[336]"></a>tls_flash_lock</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_flash_lock &rArr; flashlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[338]"></a>tls_spifls_page_write</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_spifls_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
</UL>

<P><STRONG><a name="[337]"></a>tls_spifls_write</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_page_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[33c]"></a>readByCMD</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readByCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
</UL>

<P><STRONG><a name="[33b]"></a>flashRead</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByCMD
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
</UL>

<P><STRONG><a name="[33d]"></a>tls_fls_write</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsw_proc
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[33e]"></a>flashunlock</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flashunlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeGDBpBit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeESMTBpBit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRID
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
</UL>

<P><STRONG><a name="[33f]"></a>tls_flash_unlock</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_flash_unlock &rArr; flashunlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[340]"></a>tls_spifls_read</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_spifls_read &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
</UL>

<P><STRONG><a name="[341]"></a>tls_fls_read</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_layout_init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_flash_verify
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_chipid
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[25e]"></a>tls_ft_param_init</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_ft_param_init &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[346]"></a>tls_ft_param_get</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_gain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_rx_iq_phase
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_rx_iq_gain
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
</UL>

<P><STRONG><a name="[347]"></a>tls_ft_param_set</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_gain
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rx_iq_phase
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rx_iq_gain
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_mac_addr
</UL>

<P><STRONG><a name="[263]"></a>tls_get_mac_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_get_mac_addr &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_start
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
</UL>

<P><STRONG><a name="[348]"></a>tls_set_mac_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_set_mac_addr &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
</UL>

<P><STRONG><a name="[349]"></a>tls_get_tx_lo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_get_tx_lo &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_lo_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[34a]"></a>tls_set_tx_lo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_lo_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[34b]"></a>tls_get_tx_iq_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_get_tx_iq_gain &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
</UL>

<P><STRONG><a name="[34c]"></a>tls_set_tx_iq_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_set_tx_iq_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[34d]"></a>tls_get_rx_iq_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>

<P><STRONG><a name="[34e]"></a>tls_set_rx_iq_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[34f]"></a>tls_get_tx_iq_phase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_get_tx_iq_phase &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
</UL>

<P><STRONG><a name="[350]"></a>tls_set_tx_iq_phase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[351]"></a>tls_get_rx_iq_phase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>

<P><STRONG><a name="[352]"></a>tls_set_rx_iq_phase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[353]"></a>tls_freq_err_op</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_freq_err_op &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_error_proc
</UL>

<P><STRONG><a name="[354]"></a>tls_rf_vcg_ctrl_op</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_rf_vcg_ctrl_op &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_proc
</UL>

<P><STRONG><a name="[261]"></a>tls_get_tx_gain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_get_tx_gain &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[355]"></a>tls_set_tx_gain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_set_tx_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_rate_set_proc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
</UL>

<P><STRONG><a name="[356]"></a>tls_get_chipid</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[357]"></a>tls_msleep</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sleep
</UL>

<P><STRONG><a name="[358]"></a>tls_sleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_msleep
</UL>

<P><STRONG><a name="[359]"></a>tls_usleep</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
</UL>

<P><STRONG><a name="[35a]"></a>tls_dma_irq_clr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_clear_irq
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>

<P><STRONG><a name="[b5]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Channel0_IRQHandler &rArr; dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Channel1_IRQHandler &rArr; dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Channel2_IRQHandler &rArr; dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Channel3_IRQHandler &rArr; dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>DMA_Channel4_7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Channel4_7_IRQHandler &rArr; dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[1051]"></a>tls_dma_start_by_wrap</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>tls_sys_clk_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_sys_clk_set
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[35c]"></a>tls_adc_clear_irq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_adc_clear_irq &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_clr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[35d]"></a>tls_read_adc_result</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_read_adc_result
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>ADC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_IRQHandler &rArr; tls_adc_clear_irq &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_clear_irq
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[35e]"></a>tls_adc_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls_adc_init &rArr; tls_dma_irq_register &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>

<P><STRONG><a name="[1052]"></a>tls_adc_irq_register</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>tls_adc_start_with_cpu</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
</UL>

<P><STRONG><a name="[360]"></a>tls_adc_enable_calibration_buffer_offset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_adc_enable_calibration_buffer_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>

<P><STRONG><a name="[361]"></a>tls_adc_temp_offset_with_cpu</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_adc_temp_offset_with_cpu
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
</UL>

<P><STRONG><a name="[362]"></a>tls_adc_voltage_start_with_cpu</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
</UL>

<P><STRONG><a name="[363]"></a>tls_adc_start_with_dma</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[364]"></a>tls_adc_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_adc_stop &rArr; tls_dma_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>

<P><STRONG><a name="[365]"></a>tls_adc_config_cmp_reg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_cmp_start
</UL>

<P><STRONG><a name="[366]"></a>tls_adc_cmp_start</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_config_cmp_reg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[367]"></a>tls_adc_reference_sel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_adc_reference_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>

<P><STRONG><a name="[368]"></a>tls_adc_set_clk</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[36c]"></a>signedToUnsignedData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
</UL>

<P><STRONG><a name="[369]"></a>adc_get_offset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc_get_offset &rArr; tls_adc_init &rArr; tls_dma_irq_register &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_enable_calibration_buffer_offset
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForAdcDone
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_temp
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
</UL>

<P><STRONG><a name="[36b]"></a>adc_get_interTemp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_get_interTemp &rArr; tls_adc_init &rArr; tls_dma_irq_register &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signedToUnsignedData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_temp_offset_with_cpu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForAdcDone
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_temp
</UL>

<P><STRONG><a name="[36d]"></a>adc_get_inputVolt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signedToUnsignedData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_cpu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForAdcDone
</UL>

<P><STRONG><a name="[36e]"></a>adc_get_interVolt</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signedToUnsignedData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_voltage_start_with_cpu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForAdcDone
</UL>

<P><STRONG><a name="[377]"></a>adc_temp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_temp &rArr; adc_get_interTemp &rArr; tls_adc_init &rArr; tls_dma_irq_register &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
</UL>

<P><STRONG><a name="[378]"></a>tls_io_cfg_get</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>

<P><STRONG><a name="[379]"></a>tls_i2s_set_freq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
</UL>

<P><STRONG><a name="[37b]"></a>tls_i2s_config</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_freq
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
</UL>

<P><STRONG><a name="[37d]"></a>tls_i2s_port_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
</UL>

<P><STRONG><a name="[37e]"></a>wm_i2s_set_freq_exclk</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>

<P><STRONG><a name="[cc]"></a>I2S_IRQHandler</STRONG> (Thumb, 474 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = I2S_IRQHandler &rArr; tls_i2s_fill_txfifo &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_fill_txfifo
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[387]"></a>tls_i2s_rx_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
</UL>

<P><STRONG><a name="[384]"></a>tls_i2s_tx_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
</UL>

<P><STRONG><a name="[381]"></a>tls_i2s_tx_block</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>

<P><STRONG><a name="[383]"></a>tls_i2s_tx_nonblock</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>

<P><STRONG><a name="[385]"></a>tls_i2s_rx_nonblock</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_rxth
</UL>

<P><STRONG><a name="[388]"></a>tls_i2s_tx_dma_config</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
</UL>

<P><STRONG><a name="[389]"></a>tls_i2s_tx_dma</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
</UL>

<P><STRONG><a name="[38a]"></a>tls_i2s_rx_dma_config</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_rxth
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
</UL>

<P><STRONG><a name="[38b]"></a>tls_i2s_rx_dma</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[38c]"></a>tls_i2s_tx_dma_callback</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_i2s_tx_dma_callback &rArr; tls_bitband_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[38d]"></a>tls_i2s_rx_dma_callback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[38e]"></a>tls_i2s_rx_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[38f]"></a>tls_i2s_test</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
</UL>

<P><STRONG><a name="[390]"></a>tls_lcd_fresh_ratio</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_init
</UL>

<P><STRONG><a name="[391]"></a>tls_lcd_seg_set</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[392]"></a>tls_lcd_io_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[1053]"></a>tls_lcd_vlcd_sel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1054]"></a>tls_lcd_duty_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1055]"></a>tls_lcd_bias_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>tls_lcd_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_fresh_ratio
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[b1]"></a>PMU_TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>PMU_TIMER0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>PMU_GPIO_WAKE_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_GPIO_WAKE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PMU_SDIO_WAKE_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_SDIO_WAKE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[394]"></a>tls_pmu_timer1_isr_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[395]"></a>tls_pmu_timer0_isr_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[396]"></a>tls_pmu_gpio_isr_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[397]"></a>tls_pmu_sdio_isr_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[272]"></a>tls_pmu_clk_select</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_pmu_clk_select
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[398]"></a>tls_pmu_timer0_start</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[399]"></a>tls_pmu_timer0_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39a]"></a>tls_pmu_timer1_start</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39b]"></a>tls_pmu_timer1_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39c]"></a>tls_pmu_standby_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39d]"></a>tls_close_peripheral_clock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39e]"></a>tls_open_peripheral_clock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[39f]"></a>wm_sc_io_clk_config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[3a0]"></a>wm_sc_set_bgt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[3a1]"></a>wm_sc_tx_retry_times</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[3a2]"></a>wm_sc_rx_retry_times</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[3a3]"></a>wm_sc_set_etu</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[3a4]"></a>wm_sc_set_frequency</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[3a5]"></a>wm_sc_powerInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[3a6]"></a>wm_sc_poweron</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[3a7]"></a>wm_sc_poweroff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[3a8]"></a>wm_sc_rst_low</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[3a9]"></a>wm_sc_rst_high</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[3aa]"></a>wm_sc_hotreset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
</UL>

<P><STRONG><a name="[3ab]"></a>wm_sc_colreset</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[3ac]"></a>wm_sc_deactive</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[3ad]"></a>tls_fls_sem_lock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[3ae]"></a>tls_fls_sem_unlock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[3af]"></a>tls_spifls_erase</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tls_spifls_erase &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
</UL>

<P><STRONG><a name="[3b0]"></a>tls_fls_erase</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_fls_erase &rArr; tls_spifls_erase &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_erase
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
</UL>

<P><STRONG><a name="[3b2]"></a>tls_fls_fast_write_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>

<P><STRONG><a name="[3b3]"></a>tls_fls_fast_write_destroy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[3b4]"></a>tls_fls_fast_write</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3b6]"></a>tls_spifls_chip_erase</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
</UL>

<P><STRONG><a name="[3b5]"></a>tls_fls_chip_erase</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_chip_erase
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>

<P><STRONG><a name="[3b7]"></a>tls_fls_get_param</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[3b8]"></a>tls_spifls_read_id</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tls_spifls_read_id &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
</UL>

<P><STRONG><a name="[25c]"></a>tls_fls_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_fls_init &rArr; tls_spifls_read_id &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read_id
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[1056]"></a>tls_fls_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1057]"></a>tls_spifls_fast_read</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>tls_spifls_get_param</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[3bb]"></a>tls_spifls_drv_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_register &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
</UL>

<P><STRONG><a name="[1058]"></a>tls_spifls_drv_unregister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>tls_spifls_probe</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_spifls_probe &rArr; tls_spifls_read_id &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read_id
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
</UL>

<P><STRONG><a name="[3bd]"></a>tls_spifls_drv_install</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_install &rArr; tls_spifls_probe &rArr; tls_spifls_read_id &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
</UL>

<P><STRONG><a name="[25b]"></a>tls_spifls_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tls_spifls_init &rArr; tls_spifls_drv_install &rArr; tls_spifls_probe &rArr; tls_spifls_read_id &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[1059]"></a>tls_spifls_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>WDG_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDG_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>tls_watchdog_clr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_watchdog_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[3c2]"></a>tls_watchdog_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>

<P><STRONG><a name="[3c3]"></a>tls_sys_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_sys_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTimerProc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_tmr_handler
<LI><a href="#[cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reboot
</UL>

<P><STRONG><a name="[3c4]"></a>wm_hspi_gpio_config</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[250]"></a>wm_spi_ck_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_spi_ck_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[24f]"></a>wm_spi_cs_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_spi_cs_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[251]"></a>wm_spi_di_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_spi_di_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[252]"></a>wm_spi_do_config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_spi_do_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[3c5]"></a>wm_sdio_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3c6]"></a>wm_sdio_cmd_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[24b]"></a>wm_uart0_tx_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_uart0_tx_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[24c]"></a>wm_uart0_rx_config</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_uart0_rx_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[3c7]"></a>wm_uart0_rts_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3c8]"></a>wm_uart0_cts_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[24e]"></a>wm_uart1_tx_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_uart1_tx_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[24d]"></a>wm_uart1_rx_config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm_uart1_rx_config &rArr; tls_io_cfg_set &rArr; io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[3c9]"></a>wm_uart1_rts_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3ca]"></a>wm_uart1_cts_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3cb]"></a>wm_uart2_tx_scio_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3cc]"></a>wm_uart2_rx_config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[3cd]"></a>wm_uart2_rts_scclk_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3ce]"></a>wm_uart2_cts_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3cf]"></a>wm_i2s_m_ck_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d0]"></a>wm_i2s_m_ws_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d1]"></a>wm_i2s_m_do_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d2]"></a>wm_i2s_s_ck_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d3]"></a>wm_i2s_s_ws_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d4]"></a>wm_i2s_s_di_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d5]"></a>wm_i2s_mclk_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d6]"></a>wm_i2s_extclk_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d7]"></a>wm_i2c_scl_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d8]"></a>wm_i2c_sda_config</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3d9]"></a>wm_pwm1_config</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3da]"></a>wm_pwm2_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3db]"></a>wm_pwm3_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3dc]"></a>wm_pwm4_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3dd]"></a>wm_pwm5_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3de]"></a>wm_pwmbrk_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3df]"></a>wm_swd_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[3e0]"></a>wm_adc_config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[24a]"></a>wm_gpio_af_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wm_gpio_af_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[344]"></a>tls_crypto_crc_final</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[3e4]"></a>Reflect</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
</UL>

<P><STRONG><a name="[343]"></a>tls_crypto_crc_update</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_crypto_crc_update &rArr; Reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[342]"></a>tls_crypto_crc_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_crypto_crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[3e5]"></a>tls_fwup_img_header_check</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tls_fwup_img_header_check &rArr; tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
</UL>

<P><STRONG><a name="[3e8]"></a>fwup_request_complete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = fwup_request_complete &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>mem_alloc_debug</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_flash_verify
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_register_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privRsaEncryptSignedElement
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeout_p
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkup
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tcp_server_socket
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_litepoint_start
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_alloc
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnResizeBuffer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewHelloExtension
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSessionId
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslCreateSNIext
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadSessionTicketKeys
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewKeys
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[d51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[dfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_mem_init
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_mem_init
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mac_wdg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_failed_softap
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bit_rates
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[ef7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[ef6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[22b]"></a>mem_free_debug</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_finish_callback
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_flash_verify
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privRsaEncryptSignedElement
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509FreeExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_untimeout_p
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_event_finish_callback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkup
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tcp_server_socket
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnResizeBuffer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteHelloExtension
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSessionId
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSessionTicketKey
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPkaAfter
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlightList
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[d83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[d55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[e1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_mem_init
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_mem_init
<LI><a href="#[df3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_cleanup
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[db7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_destroy_multi_bss
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_multi_bss
<LI><a href="#[db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bss_release
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_results_free
<LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[ffa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[fd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_release
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
</UL>

<P><STRONG><a name="[3eb]"></a>tls_fwup_init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_fwup_init &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
</UL>

<P><STRONG><a name="[3ec]"></a>tls_fwup_enter</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tls_fwup_enter &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[226]"></a>tls_param_get</STRONG> (Thumb, 878 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_hw_mode
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_webs
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_warc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_pass
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sha1
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_cmdm
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_iom
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atpt
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart_params
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hostif_mode
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_work_mode
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ip_info
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_roaming_mode
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wl_ps_mode
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_adhoc_create_mode
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hw_mode
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_region
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channellist
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channel
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hide_ssid
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_key
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_ssid
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_encrypt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_tem_offset
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_wl_select_max_rate
</UL>

<P><STRONG><a name="[3f1]"></a>tls_fwup_exit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
</UL>

<P><STRONG><a name="[5ec]"></a>tls_fwup_get_current_session_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updd_proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
</UL>

<P><STRONG><a name="[615]"></a>tls_fwup_set_update_numer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[59a]"></a>tls_fwup_get_current_update_numer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[105a]"></a>tls_fwup_get_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[105b]"></a>tls_fwup_set_crc_error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>tls_fwup_request_sync</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_fwup_request_sync &rArr; tls_fwup_request_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_to_sys
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[5ed]"></a>tls_fwup_current_state</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updd_proc
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
</UL>

<P><STRONG><a name="[3f4]"></a>tls_fwup_reset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[3f5]"></a>tls_fwup_clear_error</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[25d]"></a>tls_fls_layout_init</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_fls_layout_init &rArr; tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[3f6]"></a>tls_mbox_new</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_mbox_new &rArr; tls_os_queue_create &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
</UL>

<P><STRONG><a name="[400]"></a>tls_mbox_valid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>

<P><STRONG><a name="[3f7]"></a>tls_mbox_post</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>

<P><STRONG><a name="[3f8]"></a>tls_mbox_trypost</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>

<P><STRONG><a name="[3f9]"></a>tls_arch_mbox_fetch</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
</UL>

<P><STRONG><a name="[3fb]"></a>tls_untimeout_p</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tls_untimeout_p &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[3fc]"></a>tls_timeout_p</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_timeout_p &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[3fd]"></a>tls_timeouts_mbox_fetch_p</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_timeouts_mbox_fetch_p &rArr; tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[3fe]"></a>tls_wl_task_run</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_wl_task_run &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_task_init
</UL>

<P><STRONG><a name="[3ff]"></a>tls_wl_task_callback_static</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_data_cb
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_cmd_cb
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_sent_callback
</UL>

<P><STRONG><a name="[401]"></a>tls_wl_task_callback</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
</UL>

<P><STRONG><a name="[402]"></a>tls_wl_task_add_timeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wl_task_add_timeout &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[403]"></a>tls_wl_task_untimeout</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wl_task_untimeout &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[404]"></a>tls_wl_task_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[405]"></a>tls_wl_timer_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[105c]"></a>chk_crc8</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[e75]"></a>get_crc8</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
</UL>

<P><STRONG><a name="[105d]"></a>calculate_crc8</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>get_crc32</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cal_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[105e]"></a>checksum</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>atodec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
</UL>

<P><STRONG><a name="[408]"></a>strtodec</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strtodec
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atodec
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoip
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
</UL>

<P><STRONG><a name="[40b]"></a>atohex</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohexarray
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohex
</UL>

<P><STRONG><a name="[40a]"></a>strtohex</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strtohex
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[40c]"></a>strtohexarray</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strtohexarray
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HtmlConvertURLStr
</UL>

<P><STRONG><a name="[40d]"></a>strtoip</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
</UL>

<P><STRONG><a name="[40e]"></a>iptostr</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[410]"></a>mactostr</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[412]"></a>hex_to_digit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
</UL>

<P><STRONG><a name="[105f]"></a>digit_to_hex</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>hexstr_to_unit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hexstr_to_unit
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[413]"></a>string_to_uint</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = string_to_uint &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[415]"></a>string_to_ipaddr</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
</UL>

<P><STRONG><a name="[417]"></a>strdup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[418]"></a>strndup</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[419]"></a>gettimeofday</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>

<P><STRONG><a name="[ce]"></a>RSA_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>CRYPTION_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRYPTION_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[41d]"></a>tls_crypto_random_stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_crypto_random_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_init
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
</UL>

<P><STRONG><a name="[41e]"></a>tls_crypto_random_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_random_init &rArr; tls_crypto_random_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
</UL>

<P><STRONG><a name="[41f]"></a>tls_crypto_random_bytes</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_random_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_random
</UL>

<P><STRONG><a name="[420]"></a>tls_crypto_rc4_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[421]"></a>tls_crypto_rc4</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_clear_32reg
</UL>

<P><STRONG><a name="[422]"></a>tls_crypto_aes_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_crypto_aes_init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[fd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>

<P><STRONG><a name="[423]"></a>tls_crypto_aes_encrypt_decrypt</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_clear_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[fd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
</UL>

<P><STRONG><a name="[424]"></a>tls_crypto_3des_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
</UL>

<P><STRONG><a name="[425]"></a>tls_crypto_3des_encrypt_decrypt</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_clear_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
</UL>

<P><STRONG><a name="[426]"></a>tls_crypto_des_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[427]"></a>tls_crypto_des_encrypt_decrypt</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_clear_32reg
</UL>

<P><STRONG><a name="[451]"></a>tls_crypto_sha1_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[429]"></a>tls_crypto_sha1_update</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_crypto_sha1_update &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[42a]"></a>tls_crypto_sha1_final</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[44c]"></a>tls_crypto_md5_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[100b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[42c]"></a>tls_crypto_md5_update</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[100b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[42d]"></a>tls_crypto_md5_final</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[100b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[43a]"></a>tls_crypto_exptmod</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaCalMc
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulBD
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulAB
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulDD
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulAA
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteMc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulSetLen
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_get_bit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_sem_unlock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_sem_lock
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[259]"></a>tls_crypto_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_crypto_init &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[44a]"></a>psHmacMd5Final</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psHmacMd5Final &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
</UL>

<P><STRONG><a name="[44d]"></a>psHmacMd5Update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psHmacMd5Update &rArr; tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
</UL>

<P><STRONG><a name="[44e]"></a>psHmacMd5Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = psHmacMd5Init &rArr; tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
</UL>

<P><STRONG><a name="[44f]"></a>psHmacMd5</STRONG> (Thumb, 106 bytes, Stack size 320 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
</UL>

<P><STRONG><a name="[450]"></a>psHmacSha1Final</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psHmacSha1Final &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[452]"></a>psHmacSha1Update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psHmacSha1Update &rArr; tls_crypto_sha1_update &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[453]"></a>psHmacSha1Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = psHmacSha1Init &rArr; tls_crypto_sha1_update &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[454]"></a>psHmacSha1</STRONG> (Thumb, 106 bytes, Stack size 320 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[455]"></a>psHmacSha2Final</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = psHmacSha2Final &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha2
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
</UL>

<P><STRONG><a name="[459]"></a>psHmacSha2Update</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = psHmacSha2Update &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha2
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
</UL>

<P><STRONG><a name="[45a]"></a>psHmacSha2Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = psHmacSha2Init &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha2
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
</UL>

<P><STRONG><a name="[45b]"></a>psHmacSha2</STRONG> (Thumb, 122 bytes, Stack size 328 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
</UL>

<P><STRONG><a name="[45d]"></a>getAsnLength</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>

<P><STRONG><a name="[45c]"></a>getAsnBig</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
</UL>

<P><STRONG><a name="[45f]"></a>getAsnSequence</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
</UL>

<P><STRONG><a name="[460]"></a>getAsnSet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
</UL>

<P><STRONG><a name="[461]"></a>getAsnInteger</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[462]"></a>getAsnOID</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
</UL>

<P><STRONG><a name="[463]"></a>getAsnAlgorithmIdentifier</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[464]"></a>getAsnConstructedOctetString</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[465]"></a>getAsnRsaPubKey</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[467]"></a>psX509GetSignature</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[468]"></a>getSerialNum</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[469]"></a>psX509GetDNAttributes</STRONG> (Thumb, 1202 bytes, Stack size 184 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[46b]"></a>getExplicitExtensions</STRONG> (Thumb, 1874 bytes, Stack size 216 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupExt
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[470]"></a>psX509ParseCert</STRONG> (Thumb, 1224 bytes, Stack size 208 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateDateRange
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[472]"></a>x509FreeExtensions</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[473]"></a>psX509FreeDNStruct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[474]"></a>psX509FreeCert</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509FreeExtensions
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[8ea]"></a>psX509ValidateGeneralName</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
</UL>

<P><STRONG><a name="[47a]"></a>pkcs1Unpad</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
</UL>

<P><STRONG><a name="[476]"></a>psRsaCrypt</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
</UL>

<P><STRONG><a name="[479]"></a>psRsaDecryptPub</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
</UL>

<P><STRONG><a name="[47b]"></a>psX509AuthenticateCert</STRONG> (Thumb, 554 bytes, Stack size 112 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
</UL>

<P><STRONG><a name="[47e]"></a>pstm_mul_comba</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
</UL>

<P><STRONG><a name="[47f]"></a>psGetEntropy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
</UL>

<P><STRONG><a name="[483]"></a>psInitPrng</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
</UL>

<P><STRONG><a name="[482]"></a>psGetPrng</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
</UL>

<P><STRONG><a name="[484]"></a>pkcs1Pad</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
</UL>

<P><STRONG><a name="[485]"></a>psRsaFreeKey</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
</UL>

<P><STRONG><a name="[486]"></a>psFreePubKey</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[487]"></a>psNewPubKey</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
</UL>

<P><STRONG><a name="[488]"></a>pkcs1ParsePrivBin</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[489]"></a>pkcs5pbkdf2</STRONG> (Thumb, 268 bytes, Stack size 256 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
</UL>

<P><STRONG><a name="[48a]"></a>pkcs8ParsePrivBin</STRONG> (Thumb, 1036 bytes, Stack size 904 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[48b]"></a>pkcs5pbkdf1</STRONG> (Thumb, 166 bytes, Stack size 152 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[48c]"></a>psRsaEncryptPriv</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privRsaEncryptSignedElement
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPriv
</UL>

<P><STRONG><a name="[48d]"></a>psRsaEncryptPub</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
</UL>

<P><STRONG><a name="[48e]"></a>psRsaDecryptPriv</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
</UL>

<P><STRONG><a name="[48f]"></a>pubRsaDecryptSignedElement</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[490]"></a>privRsaEncryptSignedElement</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nowDoSkePka
</UL>

<P><STRONG><a name="[493]"></a>psDes3InitKey</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[494]"></a>psDes3EncryptBlock</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[496]"></a>psDes3DecryptBlock</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[497]"></a>psDesInitKey</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[498]"></a>psDesEncryptBlock</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[499]"></a>psDesDecryptBlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[49a]"></a>mem_realloc_debug</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
</UL>

<P><STRONG><a name="[49c]"></a>mem_calloc_debug</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[265]"></a>tls_mem_get_avail_heapsize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tls_mem_get_avail_heapsize &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[25f]"></a>tls_param_load_factory_default</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_param_load_factory_default
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
</UL>

<P><STRONG><a name="[260]"></a>tls_param_init</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tls_param_init &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[4a0]"></a>tls_param_load_user</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_param_load_user &rArr; tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
</UL>

<P><STRONG><a name="[228]"></a>tls_param_set</STRONG> (Thumb, 792 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ip_info
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_hw_mode
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_channel
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_webs
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_warc
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_pass
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_sha1
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_cmdm
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_iom
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atpt
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_dnsname
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atlt
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hostif_mode
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_work_mode
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_roaming_mode
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wl_ps_mode
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_adhoc_create_mode
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hw_mode
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_region
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channellist
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channel
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hide_ssid
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_bssid
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_tem_offset
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wireless_mode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_bssid
<LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_dnsname
<LI><a href="#[e5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info2
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
</UL>

<P><STRONG><a name="[4a1]"></a>tls_param_to_flash</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_param_to_flash &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_pmtf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[4a2]"></a>tls_param_to_default</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_param_to_default &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_flash
</UL>

<P><STRONG><a name="[4a3]"></a>tls_param_save_user_default</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_param_save_user_default &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
</UL>

<P><STRONG><a name="[4a4]"></a>tls_param_save_user</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[568]"></a>tls_param_get_updp_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
</UL>

<P><STRONG><a name="[5e7]"></a>tls_param_set_updp_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
</UL>

<P><STRONG><a name="[6c8]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[634]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Reboot
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventClear
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventDestory
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskStatusGet
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriGet
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetSystickCycle
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetCpuCycle
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SysTickCurrCycleGet
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[1060]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[635]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventClear
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventDestory
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskStatusGet
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriGet
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetSystickCycle
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetCpuCycle
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SysTickCurrCycleGet
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[1061]"></a>portGET_IPSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[640]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
</UL>

<P><STRONG><a name="[a7]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[4b7]"></a>DHCPS_GetIpByMac</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPS_GetIpByMac
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getip
</UL>

<P><STRONG><a name="[846]"></a>DHCPS_GetMacByIp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DHCPS_GetMacByIp
</UL>
<BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getmac
</UL>

<P><STRONG><a name="[888]"></a>DHCPS_SetDns</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp_server.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_setdns
</UL>

<P><STRONG><a name="[4b8]"></a>DHCPS_RecvCb</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = DHCPS_RecvCb &rArr; _DhcpClientSMEHandle &rArr; _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientTableLookup
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ParseDhcpOptions
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_server.o(.text)
</UL>
<P><STRONG><a name="[4bd]"></a>DHCPS_ClientDelete</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dhcp_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[4be]"></a>DHCPS_Start</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = DHCPS_Start &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind_multicast_netif
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_start
</UL>

<P><STRONG><a name="[4c3]"></a>DHCPS_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = DHCPS_Stop &rArr; sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout_p
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_stop
</UL>

<P><STRONG><a name="[4c9]"></a>DNSS_RecvCb</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = DNSS_RecvCb &rArr; _DNSAnswerGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DnsCompareName
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_server.o(.text)
</UL>
<P><STRONG><a name="[4ca]"></a>DNSS_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dns_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4cb]"></a>DNSS_Start</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DNSS_Start &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_start
</UL>

<P><STRONG><a name="[4cc]"></a>DNSS_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = DNSS_Stop &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_stop
</UL>

<P><STRONG><a name="[1062]"></a>tls_wifi_oneshot_result_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>tls_wifi_get_oneshot_ssidpwd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[4ce]"></a>tls_wifi_get_oneshot_customdata</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wifi_get_oneshot_customdata
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
</UL>

<P><STRONG><a name="[4cf]"></a>tls_oneshot_data_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_data_clear &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[4d0]"></a>soft_ap_create</STRONG> (Thumb, 174 bytes, Stack size 208 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[de]"></a>wm_oneshot_netif_status_event</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wm_oneshot_netif_status_event &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm_wifi_oneshot.o(.text)
<LI> wm_oneshot_airkiss.o(.text)
</UL>
<P><STRONG><a name="[4d1]"></a>tls_oneshot_scan_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_scan_start &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[e1]"></a>tls_oneshot_recv_timeout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_recv_timeout &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>tls_oneshot_handshake_timeout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_handshake_timeout &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>tls_oneshot_switch_channel_tim_start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_switch_channel_tim_start &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[4d2]"></a>free_socket</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[4d4]"></a>socket_recive_cb</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = socket_recive_cb &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[4d6]"></a>create_tcp_server_socket</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = create_tcp_server_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4d8]"></a>tls_wifi_oneshot_connect</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tls_wifi_oneshot_connect &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4d9]"></a>tls_wifi_oneshot_connect_by_bssid</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tls_wifi_oneshot_connect_by_bssid &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4db]"></a>tls_wifi_send_oneshotinfo</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_wifi_send_oneshotinfo &rArr; tls_wifi_send_oneshotdata &rArr; ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotdata
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[3ee]"></a>tls_wifi_get_oneshot_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_polling_check
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_oneshot
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_status_changed
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[4dd]"></a>wm_oneshot_send_mac</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = wm_oneshot_send_mac &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4df]"></a>tls_oneshot_special_timer_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_oneshot_special_timer_stop &rArr; tls_timer_destroy &rArr; tls_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[4e2]"></a>tls_wifi_clear_oneshot_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[4e0]"></a>tls_oneshot_stop_clear_data</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_stop_clear_data &rArr; free_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_data_recv_cb_register
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_stop
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_stop
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4e9]"></a>oneshot_special_fn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = oneshot_special_fn &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[4ea]"></a>tls_oneshot_is_ssid_bssid_match</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_oneshot_is_ssid_bssid_match &rArr; tls_find_ssid_nonascII_pos_and_count
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_find_ssid_nonascII_pos_and_count
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
</UL>

<P><STRONG><a name="[4ed]"></a>tls_oneshot_find_ch_by_bssid</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_oneshot_find_ch_by_bssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
</UL>

<P><STRONG><a name="[4ee]"></a>tls_oneshot_switch_channel_tim_stop</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_switch_channel_tim_stop &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_change_chanel
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_find_ch_by_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[4f0]"></a>tls_oneshot_switch_channel_tim_temp_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_switch_channel_tim_temp_stop &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[4f1]"></a>tls_oneshot_recv_err</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_recv_err &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[4f2]"></a>tls_wifi_lsd_oneshot_special</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = tls_wifi_lsd_oneshot_special &rArr; oneshot_lsd_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_customdata
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_recv_err
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[4f5]"></a>tls_wifi_dataframe_recv</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tls_wifi_dataframe_recv &rArr; tls_airkiss_recv &rArr; oneshot_airkiss_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_special_mode
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_polling_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[4f8]"></a>oneshot_polling_check</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = oneshot_polling_check &rArr; tls_wifi_dataframe_recv &rArr; tls_airkiss_recv &rArr; oneshot_airkiss_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_special_mode
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_handle
</UL>

<P><STRONG><a name="[4f9]"></a>tls_oneshot_special_task_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_special_task_handle &rArr; oneshot_polling_check &rArr; tls_wifi_dataframe_recv &rArr; tls_airkiss_recv &rArr; oneshot_airkiss_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_polling_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[4fa]"></a>tls_oneshot_special_task_create</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_special_task_create &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_start
</UL>

<P><STRONG><a name="[4fb]"></a>tls_oneshot_special_timer_start</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_special_timer_start &rArr; tls_oneshot_special_task_create &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4fc]"></a>tls_oneshot_callback_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_callback_start &rArr; tls_airkiss_start &rArr; airkiss_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_start
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4ff]"></a>tls_oneshot_scan_result_deal</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_scan_result_deal &rArr; tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[501]"></a>tls_oneshot_scan_result_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_scan_result_cb &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[502]"></a>tls_oneshot_task_handle</STRONG> (Thumb, 1124 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_task_handle &rArr; wm_oneshot_send_mac &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_special_mode
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_data_recv_cb_register
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_webserver_init
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_airkiss_change_channel
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_deinit
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_cb
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_callback_start
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_timer_stop
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tcp_server_socket
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_change_chanel
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[50c]"></a>tls_oneshot_task_create</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_task_create &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[50d]"></a>tls_oneshot_init_data</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_oneshot_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[50e]"></a>tls_wifi_start_oneshot</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_start
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[229]"></a>tls_wifi_set_oneshot_flag</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_customdata
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_oneshot
</UL>

<P><STRONG><a name="[4f4]"></a>tls_wifi_set_oneshot_customdata</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tls_wifi_set_oneshot_customdata &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[510]"></a>tls_wifi_wait_disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
</UL>

<P><STRONG><a name="[511]"></a>tls_wifi_oneshot_connect_by_ssid_bssid</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[512]"></a>tls_wifi_decrypt_data</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[513]"></a>tls_oneshot_find_chlist</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[514]"></a>tls_oneshot_send_web_connect_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_oneshot_send_web_connect_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[515]"></a>tls_wifi_set_oneshot_config_mode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_wifi_set_oneshot_config_mode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshotmode_proc
</UL>

<P><STRONG><a name="[5e6]"></a>tls_wifi_get_oneshot_config_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshotmode_proc
</UL>

<P><STRONG><a name="[508]"></a>oneshot_airkiss_send_reply</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = oneshot_airkiss_send_reply &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[505]"></a>tls_oneshot_airkiss_change_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_oneshot_airkiss_change_channel &rArr; airkiss_change_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_change_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4f7]"></a>tls_airkiss_recv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tls_airkiss_recv &rArr; oneshot_airkiss_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_recv
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[4fd]"></a>tls_airkiss_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_airkiss_start &rArr; airkiss_init
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_callback_start
</UL>

<P><STRONG><a name="[4e5]"></a>tls_airkiss_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[51f]"></a>lsd_crc8_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_calc
</UL>

<P><STRONG><a name="[520]"></a>lsd_crc8_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_calc
</UL>

<P><STRONG><a name="[521]"></a>lsd_crc8_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_calc
</UL>

<P><STRONG><a name="[51e]"></a>lsd_crc8_calc</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lsd_crc8_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_get
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_update
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_init
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_ssid_bssid_crc_match
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
</UL>

<P><STRONG><a name="[4f3]"></a>tls_lsd_recv</STRONG> (Thumb, 2570 bytes, Stack size 104 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = tls_lsd_recv &rArr; lsd_ssid_bssid_crc_match &rArr; lsd_crc8_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_calc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_retry
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_tods
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_ssid_bssid_crc_match
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[4fe]"></a>tls_lsd_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_lsd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_callback_start
</UL>

<P><STRONG><a name="[526]"></a>tls_get_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ver
</UL>

<P><STRONG><a name="[525]"></a>tls_cmd_get_ver</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tls_cmd_get_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_fwup_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwv_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qver_proc
</UL>

<P><STRONG><a name="[1063]"></a>tls_cmd_get_hw_ver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[1064]"></a>tls_cmd_set_hw_ver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[5eb]"></a>tls_set_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
</UL>

<P><STRONG><a name="[527]"></a>tls_cmd_get_auto_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_auto_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_err
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[5d5]"></a>tls_cmd_get_socket_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
</UL>

<P><STRONG><a name="[5dd]"></a>tls_cmd_set_net_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[5dc]"></a>tls_cmd_get_net_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
</UL>

<P><STRONG><a name="[528]"></a>tls_cmd_init_socket_cfg</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tls_cmd_init_socket_cfg &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[529]"></a>tls_cmd_reset_sys</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tls_cmd_reset_sys &rArr; tls_os_timer_create &rArr; LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_fwup_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_proc
</UL>

<P><STRONG><a name="[52b]"></a>tls_cmd_pmtf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_cmd_pmtf &rArr; tls_param_to_flash &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmtf_proc
</UL>

<P><STRONG><a name="[52c]"></a>tls_cmd_reset_flash</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_cmd_reset_flash &rArr; tls_param_to_default &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstf_proc
</UL>

<P><STRONG><a name="[52d]"></a>tls_cmd_ps</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_ps &rArr; tls_cmd_get_auto_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ents_proc
</UL>

<P><STRONG><a name="[531]"></a>tls_hostif_get_tx_msg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_event_msg
</UL>

<P><STRONG><a name="[532]"></a>tls_hostif_get_tx_event_msg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_loopback
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
</UL>

<P><STRONG><a name="[534]"></a>tls_get_hostif</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_failed
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_success
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skrptm_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_loopback
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atpt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atpt
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atlt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atlt
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
</UL>

<P><STRONG><a name="[533]"></a>tls_hostif_process_cmdrsp</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_event_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
</UL>

<P><STRONG><a name="[538]"></a>tls_hostif_fill_event_hdr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_hostif_fill_event_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[535]"></a>tls_hostif_fill_hdr</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_hostif_fill_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[537]"></a>tls_hostif_send_event</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_event_hdr
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_event_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkup
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
</UL>

<P><STRONG><a name="[539]"></a>tls_hostif_send_event_scan_cmplt</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_scan_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
</UL>

<P><STRONG><a name="[53a]"></a>hostif_wscan_cmplt</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hostif_wscan_cmplt &rArr; tls_hostif_send_event_scan_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[53b]"></a>tls_cmd_scan</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_scan &rArr; tls_wifi_scan &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
</UL>

<P><STRONG><a name="[53c]"></a>tls_cmd_get_key</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_key &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[53d]"></a>tls_cmd_get_ssid</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_ssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[53e]"></a>tls_cmd_get_bssid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_bssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssid_proc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[53f]"></a>tls_cmd_join_net</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tls_cmd_join_net &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[540]"></a>tls_cmd_get_dnsname</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_dnsname &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[541]"></a>tls_cmd_get_softap_ip_info</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_ip_info &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_nip_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[542]"></a>tls_cmd_get_softap_key</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_key &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[543]"></a>tls_cmd_get_softap_channel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_channel &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_chl_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[544]"></a>tls_cmd_get_softap_encrypt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_encrypt &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_encry_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[545]"></a>tls_cmd_get_softap_ssid</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_ssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[546]"></a>tls_cmd_create_net</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = tls_cmd_create_net &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[549]"></a>tls_cmd_create_ibss_net</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[547]"></a>tls_cmd_get_wireless_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_wireless_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wprt_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[548]"></a>tls_cmd_join</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tls_cmd_join &rArr; tls_cmd_join_net &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_ibss_net
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
</UL>

<P><STRONG><a name="[54a]"></a>tls_cmd_disconnect_network</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wleav_proc
</UL>

<P><STRONG><a name="[54b]"></a>tls_cmd_get_link_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_cmd_get_link_status &rArr; tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lkstt_proc
</UL>

<P><STRONG><a name="[1065]"></a>tls_cmd_wps_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[54c]"></a>tls_cmd_set_wireless_mode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_wireless_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wprt_proc
</UL>

<P><STRONG><a name="[54d]"></a>tls_cmd_set_ssid</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
</UL>

<P><STRONG><a name="[54e]"></a>tls_cmd_set_tem_offset</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_tem_offset &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
</UL>

<P><STRONG><a name="[54f]"></a>tls_cmd_get_tem_offset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_tem_offset &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
</UL>

<P><STRONG><a name="[550]"></a>tls_cmd_set_key</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
</UL>

<P><STRONG><a name="[551]"></a>tls_cmd_set_encrypt</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encry_proc
</UL>

<P><STRONG><a name="[552]"></a>tls_cmd_get_encrypt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_encrypt &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encry_proc
</UL>

<P><STRONG><a name="[553]"></a>tls_cmd_set_bssid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssid_proc
</UL>

<P><STRONG><a name="[554]"></a>tls_cmd_get_original_ssid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_original_ssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
</UL>

<P><STRONG><a name="[555]"></a>tls_cmd_get_original_key</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_original_key &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
</UL>

<P><STRONG><a name="[556]"></a>tls_cmd_set_hide_ssid</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_hide_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdssid_proc
</UL>

<P><STRONG><a name="[557]"></a>tls_cmd_get_hide_ssid</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_hide_ssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdssid_proc
</UL>

<P><STRONG><a name="[558]"></a>tls_cmd_set_channel</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chl_proc
</UL>

<P><STRONG><a name="[559]"></a>tls_cmd_get_channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_channel &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chl_proc
</UL>

<P><STRONG><a name="[55a]"></a>tls_cmd_set_channellist</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_channellist &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chll_proc
</UL>

<P><STRONG><a name="[55b]"></a>tls_cmd_get_channellist</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_channellist &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chll_proc
</UL>

<P><STRONG><a name="[55c]"></a>tls_cmd_set_region</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_region &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wreg_proc
</UL>

<P><STRONG><a name="[55d]"></a>tls_cmd_get_region</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_region &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wreg_proc
</UL>

<P><STRONG><a name="[55e]"></a>tls_cmd_set_hw_mode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbgr_proc
</UL>

<P><STRONG><a name="[55f]"></a>tls_cmd_get_hw_mode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_hw_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbgr_proc
</UL>

<P><STRONG><a name="[560]"></a>tls_cmd_set_adhoc_create_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_adhoc_create_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watc_proc
</UL>

<P><STRONG><a name="[561]"></a>tls_cmd_get_adhoc_create_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_adhoc_create_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watc_proc
</UL>

<P><STRONG><a name="[562]"></a>tls_cmd_set_wl_ps_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_wl_ps_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpsm_proc
</UL>

<P><STRONG><a name="[563]"></a>tls_cmd_get_wl_ps_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_wl_ps_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpsm_proc
</UL>

<P><STRONG><a name="[564]"></a>tls_cmd_set_roaming_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_roaming_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_proc
</UL>

<P><STRONG><a name="[565]"></a>tls_cmd_get_roaming_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_roaming_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_proc
</UL>

<P><STRONG><a name="[1066]"></a>tls_cmd_set_wps_params</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[1067]"></a>tls_cmd_get_wps_params</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>tls_cmd_get_ip_info</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_ip_info &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nip_proc
</UL>

<P><STRONG><a name="[567]"></a>tls_cmd_set_ip_info</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_ip_info &rArr; tls_netif_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nip_proc
</UL>

<P><STRONG><a name="[569]"></a>tls_cmd_set_work_mode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_work_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm_proc
</UL>

<P><STRONG><a name="[56a]"></a>tls_cmd_get_work_mode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_work_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm_proc
</UL>

<P><STRONG><a name="[56b]"></a>tls_cmd_get_hostif_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_hostif_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portm_proc
</UL>

<P><STRONG><a name="[56c]"></a>tls_cmd_set_hostif_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_hostif_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portm_proc
</UL>

<P><STRONG><a name="[56d]"></a>tls_cmd_set_default_socket_params</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_default_socket_params &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atrm_proc
</UL>

<P><STRONG><a name="[56e]"></a>tls_cmd_get_default_socket_params</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_cmd_get_default_socket_params
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atrm_proc
</UL>

<P><STRONG><a name="[56f]"></a>tls_cmd_get_uart_params</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_uart_params &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
</UL>

<P><STRONG><a name="[571]"></a>tls_cmd_get_uart1_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
</UL>

<P><STRONG><a name="[570]"></a>tls_cmd_set_uart_params</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_uart_params &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_check_baudrate
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart1_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
</UL>

<P><STRONG><a name="[572]"></a>tls_cmd_get_atlt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tls_cmd_get_atlt
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atlt_proc
</UL>

<P><STRONG><a name="[573]"></a>tls_cmd_set_atlt</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_atlt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atlt_proc
</UL>

<P><STRONG><a name="[574]"></a>tls_cmd_get_atpt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_atpt &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpt_proc
</UL>

<P><STRONG><a name="[575]"></a>tls_cmd_set_dnsname</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
</UL>

<P><STRONG><a name="[576]"></a>tls_cmd_set_atpt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_atpt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpt_proc
</UL>

<P><STRONG><a name="[577]"></a>tls_cmd_get_espc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_espc &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espc_proc
</UL>

<P><STRONG><a name="[578]"></a>tls_cmd_set_espc</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_espc &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espc_proc
</UL>

<P><STRONG><a name="[579]"></a>tls_cmd_get_espt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_espt &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espt_proc
</UL>

<P><STRONG><a name="[57a]"></a>tls_cmd_set_espt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_espt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espt_proc
</UL>

<P><STRONG><a name="[57b]"></a>tls_cmd_get_iom</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_iom &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_proc
</UL>

<P><STRONG><a name="[57c]"></a>tls_cmd_set_iom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_iom &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_proc
</UL>

<P><STRONG><a name="[57d]"></a>tls_cmd_get_cmdm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_cmdm &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdm_proc
</UL>

<P><STRONG><a name="[57e]"></a>tls_cmd_set_cmdm</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_cmdm &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdm_proc
</UL>

<P><STRONG><a name="[57f]"></a>tls_cmd_set_oneshot</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_oneshot &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_proc
</UL>

<P><STRONG><a name="[580]"></a>tls_cmd_get_oneshot</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_cmd_get_oneshot
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_proc
</UL>

<P><STRONG><a name="[581]"></a>tls_cmd_set_sha1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>

<P><STRONG><a name="[582]"></a>tls_cmd_get_sha1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>

<P><STRONG><a name="[583]"></a>tls_cmd_get_pass</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_pass &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_proc
</UL>

<P><STRONG><a name="[584]"></a>tls_cmd_set_pass</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_pass &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_proc
</UL>

<P><STRONG><a name="[585]"></a>tls_cmd_get_warc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_warc &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warc_proc
</UL>

<P><STRONG><a name="[586]"></a>tls_cmd_set_warc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_warc &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warc_proc
</UL>

<P><STRONG><a name="[587]"></a>tls_cmd_set_webs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_webs &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webs_proc
</UL>

<P><STRONG><a name="[588]"></a>tls_cmd_get_webs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_webs &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webs_proc
</UL>

<P><STRONG><a name="[5e5]"></a>tls_cmd_set_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_proc
</UL>

<P><STRONG><a name="[589]"></a>tls_cmd_wr_flash</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[61f]"></a>tls_cmd_register_get_uart1_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[620]"></a>tls_cmd_register_set_uart1_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[5a3]"></a>tls_cmd_get_set_uart1_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[621]"></a>tls_cmd_register_set_uart1_sock_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[5e2]"></a>tls_cmd_get_set_uart1_sock_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
</UL>

<P><STRONG><a name="[61e]"></a>tls_cmd_register_set_uart0_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[5a4]"></a>tls_cmd_get_set_uart0_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[58a]"></a>tls_cmd_set_softap_ssid</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
</UL>

<P><STRONG><a name="[58b]"></a>tls_cmd_set_softap_key</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
</UL>

<P><STRONG><a name="[58c]"></a>tls_cmd_set_softap_encrypt</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_encry_proc
</UL>

<P><STRONG><a name="[58d]"></a>tls_cmd_set_softap_channel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_chl_proc
</UL>

<P><STRONG><a name="[58e]"></a>tls_cmd_set_softap_hw_mode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_wbgr_proc
</UL>

<P><STRONG><a name="[58f]"></a>tls_cmd_get_softap_hw_mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_softap_hw_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_wbgr_proc
</UL>

<P><STRONG><a name="[590]"></a>tls_cmd_set_softap_ip_info</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tls_cmd_set_softap_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_nip_proc
</UL>

<P><STRONG><a name="[591]"></a>tls_cmd_get_softap_link_status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_cmd_get_softap_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_lkstt_proc
</UL>

<P><STRONG><a name="[592]"></a>tls_cmd_get_sta_detail</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_sta_detail &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getip
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
</UL>

<P><STRONG><a name="[599]"></a>tls_hostif_get_recvmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[5ad]"></a>tls_hostif_fill_cmdrsp_hdr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_hostif_fill_cmdrsp_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ricmd_default_proc
</UL>

<P><STRONG><a name="[594]"></a>free_tx_msg_buffer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = free_tx_msg_buffer &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
</UL>

<P><STRONG><a name="[595]"></a>tls_hostif_atcmd_loopback</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_hostif_atcmd_loopback &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_event_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[596]"></a>atcmd_ok_resp</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atcmd_ok_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_nop_proc
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[597]"></a>at_format_func</STRONG> (Thumb, 6446 bytes, Stack size 360 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = at_format_func &rArr; atcmd_ok_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_update_numer
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_get_totalsnd
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_result
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_pwr_result
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[5a0]"></a>atcmd_filter_quotation</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atcmd_filter_quotation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[5a1]"></a>at_parse_func</STRONG> (Thumb, 7170 bytes, Stack size 96 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohexarray
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohex
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_set_uart0_mode
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_set_uart1_mode
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_fwup_mode
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[5a5]"></a>atcmd_err_resp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atcmd_err_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_nop_proc
</UL>

<P><STRONG><a name="[5a7]"></a>tls_hostif_atcmd_exec</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_nop_proc
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_check_atcmd_opt
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[5a9]"></a>get_first_comma</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_first_comma
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
</UL>

<P><STRONG><a name="[5ab]"></a>tls_atcmd_parse</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tls_atcmd_parse &rArr; get_first_comma
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_comma
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[5ac]"></a>ricmd_default_proc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ricmd_default_proc &rArr; tls_hostif_fill_cmdrsp_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_cmdrsp_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[5ae]"></a>ri_format_func</STRONG> (Thumb, 1134 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ri_format_func &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le32
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le16
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_32
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_unaligned_be16
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_unaligned_le16
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[5b4]"></a>ri_parse_func</STRONG> (Thumb, 1124 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ri_parse_func &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be32
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be16
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le32
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[5b7]"></a>tls_hostif_ricmd_exec</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tls_hostif_ricmd_exec &rArr; ri_parse_func &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ricmd_default_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[5b8]"></a>tls_hostif_cmd_handler</STRONG> (Thumb, 560 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_loopback
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_loop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_cmd
</UL>

<P><STRONG><a name="[603]"></a>tls_hostif_hdr_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_cmd
</UL>

<P><STRONG><a name="[5ba]"></a>tls_hostif_send_event_port_check</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tls_hostif_send_event_port_check
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkup
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
</UL>

<P><STRONG><a name="[5bb]"></a>tls_hostif_send_event_init_cmplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_init_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[5bd]"></a>tls_hostif_send_event_wjoin_success</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_wjoin_success &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_success
</UL>

<P><STRONG><a name="[5bf]"></a>tls_hostif_send_event_wjoin_failed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_wjoin_failed &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_failed
</UL>

<P><STRONG><a name="[5c0]"></a>tls_hostif_send_event_linkdown</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_linkdown &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[5c1]"></a>tls_hostif_send_event_sta_join</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[5c2]"></a>tls_hostif_send_event_sta_leave</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[5c3]"></a>tls_hostif_send_event_crc_err</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[5c4]"></a>tls_hostif_send_event_tx_fail</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[5c5]"></a>tls_hostif_send_event_tcp_conn</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_tcp_conn &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
</UL>

<P><STRONG><a name="[5c6]"></a>tls_hostif_send_event_tcp_join</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_tcp_join &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
</UL>

<P><STRONG><a name="[5c7]"></a>tls_hostif_send_event_tcp_dis</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_tcp_dis &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
</UL>

<P><STRONG><a name="[5c9]"></a>tls_hostif_tx_timeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_hostif_tx_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[5c8]"></a>tls_hostif_task_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_hostif_task_init &rArr; tls_wl_task_run &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
</UL>

<P><STRONG><a name="[269]"></a>tls_hostif_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_hostif_init &rArr; tls_hostif_task_init &rArr; tls_wl_task_run &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_task_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[5d3]"></a>tls_hostif_recv_data</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_hostif_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
</UL>

<P><STRONG><a name="[5cd]"></a>tls_hostif_send_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_net_send
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[5d0]"></a>tls_cmd_get_socket_status</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tls_cmd_get_socket_status &rArr; tls_socket_get_status &rArr; get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
</UL>

<P><STRONG><a name="[5d2]"></a>tls_cmd_get_socket_state</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skrcv_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
</UL>

<P><STRONG><a name="[5d4]"></a>tls_hostif_create_default_socket</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tls_hostif_create_default_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_cfg
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_setup
</UL>

<P><STRONG><a name="[5d6]"></a>tls_cmd_close_socket</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skcls_proc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
</UL>

<P><STRONG><a name="[5d7]"></a>tls_hostif_close_default_socket</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tls_hostif_close_default_socket &rArr; tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_setup
</UL>

<P><STRONG><a name="[5d9]"></a>tls_cmd_create_socket</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tls_cmd_create_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
</UL>

<P><STRONG><a name="[60e]"></a>tls_cmd_get_default_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[5e1]"></a>tls_cmd_set_default_socket</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksdf_proc
</UL>

<P><STRONG><a name="[5de]"></a>tls_hostif_set_net_status_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_hostif_set_net_status_callback &rArr; tls_netif_add_status_event &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[eb]"></a>tls_hostif_http_client_recv_callback</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tls_hostif_http_client_recv_callback &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>tls_hostif_http_client_err_callback</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_hostif_http_client_err_callback &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>z_proc</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = z_proc &rArr; tls_cmd_reset_sys &rArr; tls_os_timer_create &rArr; LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>e_proc</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = e_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ents_proc</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ents_proc &rArr; tls_cmd_ps &rArr; tls_cmd_get_auto_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>rstf_proc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = rstf_proc &rArr; tls_cmd_reset_flash &rArr; tls_param_to_default &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>pmtf_proc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = pmtf_proc &rArr; tls_cmd_pmtf &rArr; tls_param_to_flash &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_pmtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ioc_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioc_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>wjoin_proc</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = wjoin_proc &rArr; tls_cmd_join &rArr; tls_cmd_join_net &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_net_up
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>wleav_proc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = wleav_proc &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>wscan_proc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = wscan_proc &rArr; tls_cmd_scan &rArr; tls_wifi_scan &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>lkstt_proc</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lkstt_proc &rArr; tls_cmd_get_link_status &rArr; tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_link_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>entm_proc</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = entm_proc &rArr; tls_irq_disable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_enable
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_disable
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_set_uart1_mode
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart1_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>skct_proc</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = skct_proc &rArr; tls_cmd_create_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>skstt_proc</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = skstt_proc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>skcls_proc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = skcls_proc &rArr; tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>sksdf_proc</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sksdf_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>sksnd_proc</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sksnd_proc &rArr; tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_set_uart1_sock_param
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_set_uart1_mode
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>skrcv_proc</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = skrcv_proc &rArr; tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>skrptm_proc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skrptm_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>sksrcip_proc</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sksrcip_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_set_sourceip
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_sourceip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>skghbn_proc</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = skghbn_proc &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>wprt_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = wprt_proc &rArr; tls_cmd_set_wireless_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wireless_mode
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ssid_proc</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ssid_proc &rArr; tls_cmd_set_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>key_proc</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = key_proc &rArr; tls_cmd_set_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>encry_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = encry_proc &rArr; tls_cmd_set_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_encrypt
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>bssid_proc</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = bssid_proc &rArr; tls_cmd_set_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_bssid
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>brdssid_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = brdssid_proc &rArr; tls_cmd_set_hide_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hide_ssid
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hide_ssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>cntparam_proc</STRONG> (Thumb, 140 bytes, Stack size 136 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = cntparam_proc &rArr; tls_cmd_get_bssid &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_key
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_ssid
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>chl_proc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = chl_proc &rArr; tls_cmd_set_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channel
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>chll_proc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = chll_proc &rArr; tls_cmd_set_channellist &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channellist
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channellist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>wreg_proc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = wreg_proc &rArr; tls_cmd_set_region &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_region
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_region
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>wbgr_proc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wbgr_proc &rArr; tls_cmd_set_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hw_mode
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hw_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>watc_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = watc_proc &rArr; tls_cmd_set_adhoc_create_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_adhoc_create_mode
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_adhoc_create_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>wpsm_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = wpsm_proc &rArr; tls_cmd_set_wl_ps_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wl_ps_mode
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wl_ps_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>warc_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = warc_proc &rArr; tls_cmd_set_warc &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_warc
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_warc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>warm_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = warm_proc &rArr; tls_cmd_set_roaming_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_roaming_mode
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_roaming_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>nip_proc</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = nip_proc &rArr; tls_cmd_set_ip_info &rArr; tls_netif_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ip_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>atm_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = atm_proc &rArr; tls_cmd_set_work_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_work_mode
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>atrm_proc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = atrm_proc &rArr; tls_cmd_set_default_socket_params &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_default_socket_params
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>aolm_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aolm_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>portm_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = portm_proc &rArr; tls_cmd_set_hostif_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hostif_mode
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hostif_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>uart_proc</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = uart_proc &rArr; tls_cmd_set_uart_params &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart_params
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>atlt_proc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = atlt_proc &rArr; tls_cmd_set_atlt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atlt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>dns_proc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = dns_proc &rArr; tls_cmd_set_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_dnsname
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>ddns_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddns_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>upnp_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = upnp_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>dname_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dname_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>atpt_proc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = atpt_proc &rArr; tls_cmd_set_atpt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atpt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>dbg_proc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dbg_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_dbg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>espc_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = espc_proc &rArr; tls_cmd_set_espc &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>espt_proc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = espt_proc &rArr; tls_cmd_set_espt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espt
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>webs_proc</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = webs_proc &rArr; tls_cmd_set_webs &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_webs
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_webs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>iom_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = iom_proc &rArr; tls_cmd_set_iom &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_iom
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_iom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>cmdm_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = cmdm_proc &rArr; tls_cmd_set_cmdm &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_cmdm
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_cmdm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>pass_proc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = pass_proc &rArr; tls_cmd_set_pass &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_pass
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>oneshot_proc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = oneshot_proc &rArr; tls_cmd_set_oneshot &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_oneshot
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_oneshot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>oneshotmode_proc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oneshotmode_proc &rArr; tls_wifi_set_oneshot_config_mode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_config_mode
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_config_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>updp_proc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = updp_proc &rArr; tls_param_save_user_default &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set_updp_mode
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>httpc_proc</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = httpc_proc &rArr; http_client_post &rArr; HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>fwup_proc</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = fwup_proc &rArr; t_http_fwup &rArr; http_fwup &rArr; socket_fwup_recv &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>tem_proc</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tem_proc &rArr; tls_cmd_set_tem_offset &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_temp
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_tem_offset
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_tem_offset
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>qmac_proc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = qmac_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>slist_proc</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = slist_proc &rArr; tls_cmd_get_sta_detail &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>softap_lkstt_proc</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softap_lkstt_proc &rArr; tls_cmd_get_softap_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_link_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>softap_ssid_proc</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = softap_ssid_proc &rArr; tls_cmd_set_softap_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>softap_qmac_proc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softap_qmac_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>softap_encry_proc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = softap_encry_proc &rArr; tls_cmd_set_softap_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>softap_key_proc</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = softap_key_proc &rArr; tls_cmd_set_softap_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>softap_chl_proc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = softap_chl_proc &rArr; tls_cmd_set_softap_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_channel
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>softap_wbgr_proc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = softap_wbgr_proc &rArr; tls_cmd_set_softap_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_hw_mode
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_hw_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>softap_nip_proc</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = softap_nip_proc &rArr; tls_cmd_set_softap_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ip_info
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>qver_proc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qver_proc &rArr; tls_cmd_get_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>updm_proc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = updm_proc &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_fwup_mode
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_fwup_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5ee]"></a>tls_set_hspi_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updd_proc
</UL>

<P><STRONG><a name="[46]"></a>updd_proc</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updd_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_hspi_fwup_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>regr_proc</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = regr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>regw_proc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = regw_proc &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>rfr_proc</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfr_proc &rArr; rf_spi_read &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>rfw_proc</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rfw_proc &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>flsr_proc</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = flsr_proc &rArr; tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>flsw_proc</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = flsw_proc &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>txg_proc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = txg_proc &rArr; tls_set_tx_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_gain
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>txg_rate_set_proc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = txg_rate_set_proc &rArr; tls_set_tx_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_gain
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>txg_rate_get_proc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = txg_rate_get_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>mac_proc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mac_proc &rArr; tls_set_mac_addr &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_mac_addr
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>hwv_proc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hwv_proc &rArr; tls_cmd_get_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>spif_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spif_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>lpchl_proc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lpchl_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchrs_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>lptstr_proc</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = lptstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptbd_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>lptstp_proc</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = lptstp_proc &rArr; tls_txrx_litepoint_test_stop &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpstpt_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>lptstt_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lptstt_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>lprstr_proc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lprstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_start
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchlr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>lprstp_proc</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = lprstp_proc &rArr; tls_txrx_litepoint_test_stop &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpstpr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>lprstt_proc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lprstt_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>lppstr_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lppstr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>lppstp_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lppstp_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>lprfps_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lprfps_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>lpchrs_proc</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lpchrs_proc &rArr; lpchl_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>lptbd_proc</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lptbd_proc &rArr; lptstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>lpstpt_proc</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = lpstpt_proc &rArr; lptstp_proc &rArr; tls_txrx_litepoint_test_stop &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstp_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>lpchlr_proc</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lpchlr_proc &rArr; lprstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>lpstpr_proc</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = lpstpr_proc &rArr; lprstp_proc &rArr; tls_txrx_litepoint_test_stop &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstp_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>lpragc_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpragc_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>lprsr_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lprsr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>tls_tx_sin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tls_tx_sin &rArr; tls_tx_wave_start &rArr; tls_tx_wave_stop &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>tls_rx_wave</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tls_rx_wave &rArr; tls_rx_data_from_adc &rArr; wm_printf &rArr; wm_vprintf &rArr; IP2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>tls_tx_lo_proc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_tx_lo_proc &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>tls_tx_iq_mismatch_proc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_tx_iq_mismatch_proc &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>tls_freq_error_proc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_freq_error_proc &rArr; tls_freq_err_op &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>tls_rf_vcg_ctrl_proc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tls_rf_vcg_ctrl_proc &rArr; tls_rf_vcg_ctrl_op &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>custdata_proc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = custdata_proc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_customdata
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[26a]"></a>tls_hspi_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tls_hspi_init &rArr; tls_hostif_send_event_init_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data_callback_register
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_data_callback_register
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_cmd_callback_register
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_ram_info_dump
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_net_status_callback
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[60a]"></a>uart_tx</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = uart_tx &rArr; cache_tcp_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_socket_finish_callback
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_event_finish_callback
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[60b]"></a>uart_tx_sent_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uart_tx_sent_callback &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[60c]"></a>uart_rx_timeout_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = uart_rx_timeout_handler &rArr; uart_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[60d]"></a>uart_net_send</STRONG> (Thumb, 406 bytes, Stack size 560 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = uart_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_default_socket
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_timeout_handler
</UL>

<P><STRONG><a name="[610]"></a>parse_ricmd_line</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = parse_ricmd_line &rArr; cmd_loop &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ricmd_handle_sync
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_loop
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[614]"></a>uart_fwup_send</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = uart_fwup_send &rArr; tls_fwup_request_sync &rArr; tls_fwup_request_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_set_update_numer
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[f6]"></a>uart_rx</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = uart_rx &rArr; uart_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[61b]"></a>tls_uart1_task_rx_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_uart1_task_rx_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[61c]"></a>tls_uart_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_uart_open
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_callback_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[26b]"></a>tls_uart_init</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tls_uart_init &rArr; tls_cmd_init_socket_cfg &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_callback_register
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_net_status_callback
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_register_set_uart0_mode
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_register_set_uart1_sock_param
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_register_set_uart1_mode
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_register_get_uart1_port
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[1068]"></a>tls_uart_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>tls_os_task_create</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_task_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_create
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[1069]"></a>tls_os_task_del</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_osal_liteos.o(.text), UNUSED)

<P><STRONG><a name="[622]"></a>tls_os_task_suspend</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
</UL>

<P><STRONG><a name="[624]"></a>tls_os_task_resume</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
</UL>

<P><STRONG><a name="[626]"></a>tls_os_mutex_create</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[628]"></a>tls_os_mutex_delete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
</UL>

<P><STRONG><a name="[62a]"></a>tls_os_mutex_acquire</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[62c]"></a>tls_os_mutex_release</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
</UL>

<P><STRONG><a name="[274]"></a>tls_os_sem_create</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_create
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[ddd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_init
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
</UL>

<P><STRONG><a name="[2c6]"></a>tls_os_sem_delete</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tls_os_sem_delete &rArr; LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[2c5]"></a>tls_os_sem_acquire</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_get_param
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_get_param
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_erase
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_sem_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_handle
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_lock
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_try_lock
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bss_mgmt_task
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>

<P><STRONG><a name="[2a6]"></a>tls_os_sem_release</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_complete
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_isr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_get_param
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_get_param
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_erase
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_sem_unlock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_fill_txfifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_request_complete
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_failed
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_success
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_special_fn
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_timer
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_timeout
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[fb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>

<P><STRONG><a name="[29e]"></a>tls_os_queue_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_os_queue_create &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_new
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[2f0]"></a>tls_os_queue_delete</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tls_os_queue_delete &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[295]"></a>tls_os_queue_send</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_send_web_connect_msg
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_cb
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_recv_err
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_handshake_timeout
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_recv_timeout
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_netif_status_event
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_data_clear
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_beacon_done
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ps_pkt_timer_expire
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan_timer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_auth_timer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout
</UL>

<P><STRONG><a name="[293]"></a>tls_os_queue_receive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_task
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
</UL>

<P><STRONG><a name="[747]"></a>tls_os_queue_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[3fa]"></a>tls_os_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperInitRandomeNumber
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[d87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon_proc_dtim
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[fd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[2b3]"></a>tls_os_set_critical</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_clear_error
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_reset
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regw_proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[e3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel1
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
</UL>

<P><STRONG><a name="[2b4]"></a>tls_os_release_critical</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tls_os_release_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_clear_error
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_reset
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regw_proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[e3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel1
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
</UL>

<P><STRONG><a name="[50f]"></a>tls_os_timer_create</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tls_os_timer_create &rArr; LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resethandler
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[ddb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_init
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
</UL>

<P><STRONG><a name="[52a]"></a>tls_os_timer_start</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tls_os_timer_start &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resethandler
<LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_start
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[504]"></a>tls_os_timer_change</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_err
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resethandler
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
<LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_notify
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[4e1]"></a>tls_os_timer_stop</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[d5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_stop
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
<LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_connect_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[639]"></a>tls_os_timer_delete</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[26f]"></a>tls_os_time_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tls_os_time_delay &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
</UL>

<P><STRONG><a name="[63b]"></a>tls_os_disp_task_stat_info</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoMonitor
</UL>

<P><STRONG><a name="[273]"></a>tls_os_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tls_os_init &rArr; LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[277]"></a>tls_os_start_scheduler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tls_os_start_scheduler &rArr; LOS_Start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e78]"></a>tls_os_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_osal_liteos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>

<P><STRONG><a name="[106a]"></a>tls_os_time_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_osal_liteos.o(.text), UNUSED)

<P><STRONG><a name="[63f]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[642]"></a>osPriqueueTop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[641]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[654]"></a>osTaskExit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[644]"></a>osHeapPrvGetNext</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>

<P><STRONG><a name="[643]"></a>osHeapFree</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osHeapFree &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorDestroy
</UL>

<P><STRONG><a name="[648]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[647]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetIndex
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetNth
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetUsedItemCnt
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[645]"></a>osSlabAllocatorFree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[64a]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[649]"></a>osSlabMemFree</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[3ea]"></a>LOS_MemFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>

<P><STRONG><a name="[64b]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[64d]"></a>osPriqueueDequeue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[64f]"></a>LOS_TaskDelete</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[652]"></a>osTaskEntry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[653]"></a>osTskStackInit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[106b]"></a>osEnterSleep</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[6c7]"></a>osTickStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[655]"></a>LOS_SysTickCurrCycleGet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[656]"></a>LOS_GetCpuCycle</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[657]"></a>LOS_GetSystickCycle</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[65f]"></a>osIntNumGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[cd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
<LI><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
<LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[663]"></a>osSwTmrStart</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>

<P><STRONG><a name="[658]"></a>osPriqueueEnqueue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>

<P><STRONG><a name="[659]"></a>osTaskWake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[65b]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[65c]"></a>osTaskWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[65d]"></a>osQueueOperate</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[660]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[664]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[665]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[666]"></a>osTickHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[668]"></a>osHeapStatisticsGet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemStatisticsGet
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[667]"></a>osAlarmHeapInfo</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemPoolList
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[669]"></a>osHeapAlloc</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>

<P><STRONG><a name="[66d]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[66b]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[66a]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[66c]"></a>osSlabMemAlloc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osSlabMemAlloc &rArr; osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[3e9]"></a>LOS_MemAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[66e]"></a>osPriqueueInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[671]"></a>osPriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTotalSize
</UL>

<P><STRONG><a name="[670]"></a>osPriqueueTotalSize</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
</UL>

<P><STRONG><a name="[279]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Callback
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[673]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[674]"></a>osSwTmrTask</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[676]"></a>osHeapAllocAlign</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[677]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[d36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalign
</UL>

<P><STRONG><a name="[679]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[fd]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[678]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[237]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BoadExampleEntry
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_report_task
</UL>

<P><STRONG><a name="[67a]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[630]"></a>LOS_QueueCreate</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[67b]"></a>osSwTmrInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[67e]"></a>osSwtmrStop</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[67d]"></a>osSwtimerInsert</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrAdjust
</UL>

<P><STRONG><a name="[67c]"></a>osSwTmrAdjust</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtimerInsert
</UL>

<P><STRONG><a name="[680]"></a>osSwtmrTimeGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
</UL>

<P><STRONG><a name="[636]"></a>LOS_SwtmrCreate</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>

<P><STRONG><a name="[637]"></a>LOS_SwtmrStart</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>

<P><STRONG><a name="[638]"></a>LOS_SwtmrStop</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>

<P><STRONG><a name="[67f]"></a>LOS_SwtmrTimeGet</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrTimeGet
</UL>

<P><STRONG><a name="[63a]"></a>LOS_SwtmrDelete</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_delete
</UL>

<P><STRONG><a name="[106c]"></a>LOS_CyclePerTickGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[681]"></a>LOS_MS2Tick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
</UL>

<P><STRONG><a name="[682]"></a>LOS_Tick2MS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[683]"></a>osCpuTick2MS</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[686]"></a>osCpuTick2US</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[75]"></a>debug_lwip</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = debug_lwip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.data)
</UL>
<P><STRONG><a name="[687]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskPriModify &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[68a]"></a>osConvertTskStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>

<P><STRONG><a name="[688]"></a>osGetTaskWaterLine</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>

<P><STRONG><a name="[689]"></a>osGetAllTskInfo</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetTaskWaterLine
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osConvertTskStatus
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoMonitor
</UL>

<P><STRONG><a name="[68b]"></a>osTaskInit</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[68c]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[106d]"></a>LOS_CurTaskIDGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[106e]"></a>LOS_NextTaskIDGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[106f]"></a>LOS_CurTaskNameGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[68d]"></a>osTaskSwitchCheck</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskSwitchCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[68e]"></a>osTaskMonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTaskMonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[625]"></a>LOS_TaskResume</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_resume
</UL>

<P><STRONG><a name="[623]"></a>LOS_TaskSuspend</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_suspend
</UL>

<P><STRONG><a name="[68f]"></a>LOS_TaskYield</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[254]"></a>LOS_TaskDelay</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST3
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST2
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST1
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_delete
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_delay
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
</UL>

<P><STRONG><a name="[690]"></a>LOS_TaskPriGet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[691]"></a>LOS_TaskPriSet</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_CurTaskPriSet
</UL>

<P><STRONG><a name="[692]"></a>LOS_CurTaskPriSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
</UL>

<P><STRONG><a name="[693]"></a>LOS_TaskLock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[694]"></a>LOS_TaskUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[695]"></a>LOS_TaskInfoGet</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[696]"></a>LOS_TaskStatusGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[697]"></a>LOS_TaskSwitchInfoGet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[63c]"></a>LOS_TaskInfoMonitor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_disp_task_stat_info
</UL>

<P><STRONG><a name="[1070]"></a>LOS_TaskIsRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[1071]"></a>LOS_NewTaskIDGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[698]"></a>LOS_TaskNameGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[1072]"></a>LOS_SysClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[699]"></a>LOS_EventInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>

<P><STRONG><a name="[69a]"></a>LOS_EventPoll</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
</UL>

<P><STRONG><a name="[69b]"></a>LOS_EventRead</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[69c]"></a>LOS_EventWrite</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[69d]"></a>LOS_EventDestory</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>

<P><STRONG><a name="[69e]"></a>LOS_EventClear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[69f]"></a>osMuxInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[6a0]"></a>LOS_ErrHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[627]"></a>LOS_MuxCreate</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mutex_create
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_create
</UL>

<P><STRONG><a name="[629]"></a>LOS_MuxDelete</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mutex_delete
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_delete
</UL>

<P><STRONG><a name="[62b]"></a>LOS_MuxPend</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mutex_acquire
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_lock
</UL>

<P><STRONG><a name="[62d]"></a>LOS_MuxPost</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPost &rArr; osTaskPriModify &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mutex_release
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_unlock
</UL>

<P><STRONG><a name="[6a1]"></a>osQueueInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[6a2]"></a>LOS_QueueWriteHeadCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHead
</UL>

<P><STRONG><a name="[633]"></a>LOS_QueueRead</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
</UL>

<P><STRONG><a name="[632]"></a>LOS_QueueWrite</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>

<P><STRONG><a name="[6a3]"></a>LOS_QueueWriteHead</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
</UL>

<P><STRONG><a name="[6a4]"></a>LOS_MemboxAlloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
</UL>

<P><STRONG><a name="[6a5]"></a>osQueueMailAlloc</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[6a6]"></a>LOS_MemboxFree</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
</UL>

<P><STRONG><a name="[6a7]"></a>osQueueMailFree</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[631]"></a>LOS_QueueDelete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
</UL>

<P><STRONG><a name="[6a8]"></a>LOS_QueueInfoGet</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[6a9]"></a>osSemInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[6aa]"></a>osSemCreate</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[62e]"></a>LOS_SemCreate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>

<P><STRONG><a name="[275]"></a>LOS_BinarySemCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_BinarySemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
</UL>

<P><STRONG><a name="[62f]"></a>LOS_SemDelete</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
</UL>

<P><STRONG><a name="[230]"></a>LOS_SemPend</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[cd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
</UL>

<P><STRONG><a name="[222]"></a>LOS_SemPost</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_net_status_changed_event
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
</UL>

<P><STRONG><a name="[6ab]"></a>osHeapInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[1073]"></a>osHeapGetHeapMemoryPeak</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[6bd]"></a>osHeapGetMaxFreeBlkSize</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[6ac]"></a>osAtomicBitsetInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osAtomicBitsetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[6ad]"></a>osSlabAllocatorNew</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[6ae]"></a>osSlabMemInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[6af]"></a>LOS_MemInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[6b0]"></a>osMemSystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[6b1]"></a>osSlabAllocatorDestroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
</UL>

<P><STRONG><a name="[6b2]"></a>osSlabMemDeinit</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorDestroy
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
</UL>

<P><STRONG><a name="[6b3]"></a>LOS_MemDeInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
</UL>

<P><STRONG><a name="[6b4]"></a>LOS_MemPoolList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[6b5]"></a>osSlabAllocatorCheck</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorCheck &rArr; osAtomicBitsetGetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
</UL>

<P><STRONG><a name="[6b6]"></a>osSlabMemCheck</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osSlabMemCheck &rArr; osSlabAllocatorCheck &rArr; osAtomicBitsetGetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
</UL>

<P><STRONG><a name="[49b]"></a>LOS_MemRealloc</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_MemRealloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[6b7]"></a>osSlabAllocatorGetUsedItemCnt</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
</UL>

<P><STRONG><a name="[6b8]"></a>osSlabAllocatorGetSlabInfo</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetUsedItemCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
</UL>

<P><STRONG><a name="[6b9]"></a>osSlabStatisticsGet</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemStatisticsGet
</UL>

<P><STRONG><a name="[6ba]"></a>LOS_MemStatisticsGet</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
</UL>

<P><STRONG><a name="[6bb]"></a>osSlabGetMaxFreeBlkSize</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[6bc]"></a>LOS_MemGetMaxFreeBlkSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[6be]"></a>LOS_MemboxInit</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[6bf]"></a>LOS_MemboxClr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1074]"></a>LOS_MemboxStatisticsGet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[1075]"></a>osAtomicBitsetIdxChgToNatural</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[6c4]"></a>osAtomicBitsetEmpty</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorEmpty
</UL>

<P><STRONG><a name="[6c0]"></a>osSlabAllocatorGetNth</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>

<P><STRONG><a name="[1076]"></a>osSlabAllocatorGetIdxP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[6c1]"></a>osSlabAllocatorGetIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>

<P><STRONG><a name="[6c2]"></a>osSlabAllocatorGetNumItems</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
</UL>

<P><STRONG><a name="[6c3]"></a>osSlabAllocatorEmpty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetEmpty
</UL>

<P><STRONG><a name="[6c5]"></a>LOS_Msleep</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[1077]"></a>osEnableFPU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[6c6]"></a>LOS_Reboot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[63e]"></a>LOS_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_Start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_start_scheduler
</UL>

<P><STRONG><a name="[63d]"></a>LOS_KernelInit</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_init
</UL>

<P><STRONG><a name="[4bc]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[759]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[131]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[6ca]"></a>sys_arch_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect &rArr; tls_os_release_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[6cb]"></a>sys_arch_protect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[6cd]"></a>memp_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout_p
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>

<P><STRONG><a name="[4b0]"></a>pbuf_free</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_socket_finish_callback
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_recv_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_to_sys
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[6ce]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[6d2]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[6d0]"></a>sys_sem_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; tls_os_sem_delete &rArr; LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[6d1]"></a>netconn_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[6d3]"></a>sys_sem_signal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[74c]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[73f]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_deinit
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[6d4]"></a>sys_mbox_trypost</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[6d5]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
</UL>

<P><STRONG><a name="[744]"></a>tcp_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[6d6]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[4ac]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[6d8]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[6d7]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6d9]"></a>pbuf_cat</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[6db]"></a>pbuf_ref</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_protect &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6e6]"></a>pbuf_alloced_custom</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6dc]"></a>mem_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_alloc_pbuf_custom
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
</UL>

<P><STRONG><a name="[6de]"></a>memp_malloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[6e0]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[6e2]"></a>sys_mbox_post</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[6e3]"></a>tcpip_callback_with_block</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>

<P><STRONG><a name="[4ab]"></a>pbuf_alloc</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[6e5]"></a>ip4_frag</STRONG> (Thumb, 582 bytes, Stack size 96 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[6e8]"></a>ip4_route</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_add_static_entry
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[6ea]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[6ec]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[6f5]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route4udp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6f0]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[6ef]"></a>igmp_input</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6f1]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6f2]"></a>pbuf_copy</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6f3]"></a>inet_chksum_pbuf</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6f4]"></a>icmp_input</STRONG> (Thumb, 724 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6f7]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[6f8]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[6f9]"></a>tcp_rst</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6fb]"></a>tcp_backlog_accepted</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[6fa]"></a>tcp_pcb_purge</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[6fc]"></a>tcp_pcb_remove</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[701]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[700]"></a>tcp_enqueue_flags</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[702]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[710]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[706]"></a>sys_now</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime_p
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_restart_timeouts
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[4a8]"></a>sys_timeout_p</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpTickHandle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[708]"></a>tcp_keepalive</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[709]"></a>tcp_rexmit_rto</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4b9]"></a>pbuf_copy_partial</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[70a]"></a>tcp_zero_window_probe</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[70b]"></a>tcp_slowtmr</STRONG> (Thumb, 986 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[70c]"></a>tcp_process_refused_data</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[70d]"></a>tcp_fasttmr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[193]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[70e]"></a>tcp_timer_needed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[711]"></a>tcp_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_deinit
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[713]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[712]"></a>tcp_recved</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[101]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[714]"></a>tcp_abandon</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[715]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[716]"></a>tcp_send_empty_ack</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[717]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[4ae]"></a>pbuf_realloc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[718]"></a>tcp_seg_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[71a]"></a>tcp_rexmit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[71b]"></a>tcp_rexmit_fast</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[71d]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[726]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[724]"></a>tcp_alloc</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[728]"></a>tcp_input</STRONG> (Thumb, 1452 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[729]"></a>udp_input</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[72b]"></a>raw_input</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = raw_input &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_match
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[72f]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[733]"></a>ip4_reass</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[11c]"></a>ip4_input</STRONG> (Thumb, 834 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_input
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[734]"></a>netif_poll</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = netif_poll &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[735]"></a>netif_loop_output</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output_ipv4
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[736]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[737]"></a>ip4_output_if_opt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[6e9]"></a>ip4_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6fd]"></a>tcp_output</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_skt_tcp_send
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_txnow
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[73a]"></a>tcp_write</STRONG> (Thumb, 1194 bytes, Stack size 120 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_skt_tcp_send
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[743]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[742]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[73e]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_deinit
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[740]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_deinit
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[741]"></a>tcp_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[4c5]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Stop
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[745]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[74a]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[746]"></a>sys_mbox_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; tls_os_queue_delete &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[748]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
</UL>

<P><STRONG><a name="[74b]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[74d]"></a>sys_arch_sem_wait</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>

<P><STRONG><a name="[74e]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[750]"></a>netconn_delete</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[751]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[752]"></a>netconn_getaddr</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[754]"></a>lwip_netconn_do_accepted</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_accepted &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[755]"></a>netconn_accept</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[758]"></a>lwip_accept</STRONG> (Thumb, 652 bytes, Stack size 72 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[75a]"></a>accept</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[75e]"></a>alg_napt_port_is_used</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alg_napt_port_is_used &rArr; alg_napt_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_lock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[761]"></a>tcp_bind</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[4c0]"></a>udp_bind</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = udp_bind &rArr; alg_napt_port_is_used &rArr; alg_napt_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_start
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[764]"></a>raw_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[763]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[765]"></a>netconn_bind</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[766]"></a>lwip_bind</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[767]"></a>bind</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = bind &rArr; lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[768]"></a>lwip_netconn_do_close</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[76a]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[76b]"></a>lwip_shutdown</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[76c]"></a>shutdown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperShutDown
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
</UL>

<P><STRONG><a name="[76f]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[771]"></a>igmp_leavegroup</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[773]"></a>igmp_joingroup_netif</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[774]"></a>igmp_joingroup</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[775]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[776]"></a>netconn_join_leave_group</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[778]"></a>lwip_close</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[518]"></a>closesocket</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
</UL>

<P><STRONG><a name="[77a]"></a>tcp_connect</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[77b]"></a>udp_connect</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; alg_napt_port_is_used &rArr; alg_napt_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[77d]"></a>raw_connect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[77c]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[77e]"></a>netconn_connect</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[780]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[77f]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[781]"></a>netconn_disconnect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[782]"></a>lwip_connect</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[783]"></a>connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = connect &rArr; lwip_connect &rArr; netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[785]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
</UL>

<P><STRONG><a name="[786]"></a>getsockname</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[787]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpeername
</UL>

<P><STRONG><a name="[788]"></a>getpeername</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[78d]"></a>lwip_setsockopt</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[78e]"></a>setsockopt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = setsockopt &rArr; lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_write_sock
</UL>

<P><STRONG><a name="[790]"></a>lwip_getsockopt</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
</UL>

<P><STRONG><a name="[791]"></a>getsockopt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[795]"></a>tcp_backlog_delayed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[792]"></a>sys_sem_new</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[793]"></a>sys_mbox_new</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; tls_os_queue_create &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_task_init
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[794]"></a>netconn_alloc</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; tls_os_queue_create &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[796]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[797]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[798]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[799]"></a>lwip_listen</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[79a]"></a>listen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[79b]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[79d]"></a>netconn_recv</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[79e]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[79f]"></a>lwip_recvfrom</STRONG> (Thumb, 698 bytes, Stack size 96 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>

<P><STRONG><a name="[7a0]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[7a1]"></a>recv</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv
</UL>

<P><STRONG><a name="[7a2]"></a>recvfrom</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[7a3]"></a>lwip_netconn_do_write</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7a4]"></a>netconn_write_partly</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[7a5]"></a>netbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[7a6]"></a>ip4_output_if_src</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[7a7]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[7a8]"></a>udp_sendto_if_src</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[7a9]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7aa]"></a>ip_route4udp</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_route4udp &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[4af]"></a>udp_sendto</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route4udp
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[7ab]"></a>udp_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[7ac]"></a>raw_sendto</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[7ad]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[7ae]"></a>lwip_netconn_do_send</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7af]"></a>netconn_send</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[7b0]"></a>netbuf_ref</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[7b1]"></a>lwip_sendto</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[7b2]"></a>lwip_send</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[7b3]"></a>send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_write_sock
</UL>

<P><STRONG><a name="[517]"></a>sendto</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
</UL>

<P><STRONG><a name="[7b4]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4c2]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_start
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4bf]"></a>udp_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_start
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[7b5]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[7b9]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[7b6]"></a>raw_new</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[7b7]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[7ba]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7bb]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[7bc]"></a>lwip_socket</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[516]"></a>socket</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[7be]"></a>lwip_select</STRONG> (Thumb, 892 bytes, Stack size 120 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[7bf]"></a>select</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = select &rArr; lwip_select &rArr; sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
</UL>

<P><STRONG><a name="[7c0]"></a>lwip_ioctl</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
</UL>

<P><STRONG><a name="[7c1]"></a>ioctlsocket</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</UL>

<P><STRONG><a name="[7c2]"></a>lwip_fcntl</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwip_fcntl &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>

<P><STRONG><a name="[7c3]"></a>fcntl</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fcntl &rArr; lwip_fcntl &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
</UL>

<P><STRONG><a name="[4ad]"></a>pbuf_take</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[7c4]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
</UL>

<P><STRONG><a name="[7c6]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[7c7]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[7cd]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>

<P><STRONG><a name="[7d3]"></a>lwip_strnicmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[7d5]"></a>ip4addr_aton</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[7d6]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[7d7]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7d8]"></a>netconn_gethostbyname</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>

<P><STRONG><a name="[7d9]"></a>lwip_gethostbyname</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[5a2]"></a>gethostbyname</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skghbn_proc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
</UL>

<P><STRONG><a name="[5e4]"></a>tls_net_set_sourceip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksrcip_proc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_recv_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
</UL>

<P><STRONG><a name="[5e3]"></a>tls_net_get_sourceip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksrcip_proc
</UL>

<P><STRONG><a name="[7da]"></a>get_server_conn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
</UL>

<P><STRONG><a name="[7dd]"></a>tls_net_get_socket</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_skt_tcp_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_recv_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
</UL>

<P><STRONG><a name="[7e6]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[7e7]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[4d7]"></a>tls_socket_create</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tcp_server_socket
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
</UL>

<P><STRONG><a name="[7eb]"></a>dns_getserver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_setdns
</UL>

<P><STRONG><a name="[220]"></a>tls_netif_get_ethif</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_net_status_changed_event
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_link_status
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[5d1]"></a>tls_socket_get_status</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_socket_get_status &rArr; get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
</UL>

<P><STRONG><a name="[4d3]"></a>tls_socket_close</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[5ce]"></a>tls_socket_udp_sendto</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tls_socket_udp_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
</UL>

<P><STRONG><a name="[4de]"></a>tls_socket_send</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
</UL>

<P><STRONG><a name="[7ed]"></a>tls_net_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_net_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
</UL>

<P><STRONG><a name="[7ee]"></a>lwip_strnstr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1078]"></a>lwip_stricmp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[1079]"></a>lwip_itoa</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[81e]"></a>dns_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[85d]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_dns_setserver
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[199]"></a>dns_tmr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[7f1]"></a>dns_gethostbyname</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[7f2]"></a>sys_timeouts_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[81d]"></a>igmp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[81c]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[81b]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[7f3]"></a>igmp_report_groups</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[7f4]"></a>ethernet_output</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[7f7]"></a>etharp_request</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[12e]"></a>netif_set_up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[803]"></a>dhcp_network_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[804]"></a>netif_set_link_up</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[805]"></a>tcpip_inpkt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcpip_inpkt &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[4b3]"></a>etharp_update_arp_entry</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_add_static_entry
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[808]"></a>etharp_input</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = etharp_input &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[809]"></a>ethernet_input</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>tcpip_input</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[80a]"></a>igmp_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[80f]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[80e]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[80c]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[80d]"></a>netif_set_ipaddr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[812]"></a>netif_set_gw</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[811]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[810]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[813]"></a>netif_add</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[814]"></a>netif_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[816]"></a>memp_init_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[815]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[81a]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[819]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[818]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[817]"></a>lwip_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[81f]"></a>mem_calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
</UL>

<P><STRONG><a name="[820]"></a>memp_malloc_pool</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>

<P><STRONG><a name="[821]"></a>memp_free_pool</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[822]"></a>netif_input</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[128]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[823]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[12f]"></a>netif_set_down</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[824]"></a>igmp_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[825]"></a>netif_remove</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[107a]"></a>netif_find</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[882]"></a>netif_set_status_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[107b]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[826]"></a>pbuf_dechain</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[827]"></a>pbuf_coalesce</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[828]"></a>pbuf_get_at</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[829]"></a>pbuf_memcmp</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[82a]"></a>pbuf_memfind</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[82b]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[82c]"></a>sys_msleep</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[82d]"></a>tcp_txnow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[97a]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[107c]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>udp_bind_multicast_netif</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
</UL>

<P><STRONG><a name="[82f]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[830]"></a>ip_chksum_pseudo_partial</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[221]"></a>print_ipaddr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_ipaddr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_net_status_changed_event
</UL>

<P><STRONG><a name="[4c4]"></a>sys_untimeout_p</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
</UL>

<P><STRONG><a name="[832]"></a>sys_restart_timeouts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[834]"></a>sys_timeouts_mbox_fetch_p</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch_p &rArr; sys_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime_p
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[4b2]"></a>tls_get_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_link_status
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_igmp_mac_filter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[12b]"></a>ethernetif_input</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[845]"></a>tls_dhcps_getmac</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_dhcps_getmac &rArr; DHCPS_GetMacByIp
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_GetMacByIp
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[12c]"></a>alg_input</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = alg_input &rArr; alg_udp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[851]"></a>alg_napt_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = alg_napt_init &rArr; tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[194]"></a>ip_reass_tmr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[852]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[853]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
</UL>

<P><STRONG><a name="[855]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[854]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
</UL>

<P><STRONG><a name="[107d]"></a>ip4_set_default_multicast_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[856]"></a>ip4_output</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>

<P><STRONG><a name="[861]"></a>dhcp_renew</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[866]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[865]"></a>dhcp_release</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[196]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>dhcp_fine_tmr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[868]"></a>dhcp_set_struct</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[869]"></a>dhcp_cleanup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[86a]"></a>dhcp_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[86b]"></a>dhcp_start</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[86c]"></a>dhcp_inform</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[87c]"></a>tls_dhcp_get_ip_timeout_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_status_changed
</UL>

<P><STRONG><a name="[195]"></a>etharp_tmr</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[86d]"></a>etharp_add_static_entry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>

<P><STRONG><a name="[86e]"></a>etharp_remove_static_entry</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[86f]"></a>etharp_find_addr</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[107e]"></a>etharp_get_entry</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[871]"></a>etharp_query</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[872]"></a>etharp_output</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>igmp_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[874]"></a>sys_thread_new</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[87a]"></a>tcpip_output</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcpip_output &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[87b]"></a>ethernetif_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ethernetif_init &rArr; low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[87d]"></a>tcpip_api_call</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>

<P><STRONG><a name="[87e]"></a>netifapi_netif_common</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_down
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_down
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[87f]"></a>netifapi_netif_add</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[880]"></a>tcpip_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[881]"></a>Tcpip_stack_init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = Tcpip_stack_init &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_status_change_cb_register
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_ip_rx_callback
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_data_rx_callback
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_status_callback
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
</UL>

<P><STRONG><a name="[267]"></a>tls_ethernet_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = tls_ethernet_init &rArr; Tcpip_stack_init &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[290]"></a>tls_netif_set_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
</UL>

<P><STRONG><a name="[27d]"></a>tls_dhcp_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_dhcp_start &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
</UL>

<P><STRONG><a name="[27e]"></a>tls_dhcp_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_dhcp_stop &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[886]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_addr
</UL>

<P><STRONG><a name="[27b]"></a>tls_netif_set_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_netif_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[27f]"></a>tls_netif_dns_setserver</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_netif_dns_setserver
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
</UL>

<P><STRONG><a name="[27c]"></a>tls_netif_set_up</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tls_netif_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
</UL>

<P><STRONG><a name="[291]"></a>tls_netif_set_down</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_netif_set_down &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_down
</UL>

<P><STRONG><a name="[507]"></a>tls_netif_remove_status_event</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = tls_netif_remove_status_event &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[22c]"></a>tls_netif_add_status_event</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_netif_add_status_event &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_net_status_callback
</UL>

<P><STRONG><a name="[283]"></a>tls_dhcps_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_dhcps_start &rArr; DHCPS_Start &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
</UL>

<P><STRONG><a name="[287]"></a>tls_dhcps_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = tls_dhcps_stop &rArr; DHCPS_Stop &rArr; sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_down
</UL>

<P><STRONG><a name="[284]"></a>tls_dnss_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_dnss_start &rArr; DNSS_Start &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
</UL>

<P><STRONG><a name="[286]"></a>tls_dnss_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = tls_dnss_stop &rArr; DNSS_Stop &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_down
</UL>

<P><STRONG><a name="[593]"></a>tls_dhcps_getip</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_dhcps_getip &rArr; DHCPS_GetIpByMac
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_GetIpByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
</UL>

<P><STRONG><a name="[281]"></a>tls_netif2_set_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tls_netif2_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
</UL>

<P><STRONG><a name="[288]"></a>tls_netif2_set_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_netif2_set_down &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_down
</UL>

<P><STRONG><a name="[282]"></a>tls_netif2_set_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_netif2_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net2_up
</UL>

<P><STRONG><a name="[887]"></a>tls_dhcps_setdns</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_SetDns
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>

<P><STRONG><a name="[889]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[88a]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[88b]"></a>tcpip_trycallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[88c]"></a>pbuf_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[88d]"></a>mem_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[88e]"></a>netconn_sendto</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[88f]"></a>netconn_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[107f]"></a>lwip_strerr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[890]"></a>netbuf_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[891]"></a>netbuf_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[892]"></a>netbuf_chain</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[893]"></a>netbuf_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[894]"></a>netbuf_next</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[895]"></a>netbuf_first</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[896]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[897]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
</UL>

<P><STRONG><a name="[898]"></a>lwip_getaddrinfo</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
</UL>

<P><STRONG><a name="[1080]"></a>lwip_socket_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[1081]"></a>lwip_socket_thread_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[899]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[89a]"></a>lwip_sendmsg</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_writev
</UL>

<P><STRONG><a name="[89b]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[89c]"></a>lwip_writev</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[7c]"></a>csArc4Encrypt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = csArc4Encrypt &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4_skip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>csArc4Decrypt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = csArc4Decrypt &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4_skip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>csAesInit</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = csAesInit &rArr; psAesInit &rArr; psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>csAesEncrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = csAesEncrypt &rArr; psAesEncrypt &rArr; psAesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>csAesDecrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = csAesDecrypt &rArr; psAesDecrypt &rArr; psAesDecryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[8a6]"></a>ssl3HMACSha1</STRONG> (Thumb, 178 bytes, Stack size 176 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ssl3HMACSha1 &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
</UL>

<P><STRONG><a name="[8a7]"></a>tlsHMACSha1</STRONG> (Thumb, 158 bytes, Stack size 232 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tlsHMACSha1 &rArr; psHmacSha1Init &rArr; tls_crypto_sha1_update &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
</UL>

<P><STRONG><a name="[8a8]"></a>tlsHMACSha2</STRONG> (Thumb, 168 bytes, Stack size 232 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tlsHMACSha2 &rArr; psHmacSha2Init &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
</UL>

<P><STRONG><a name="[8a9]"></a>ssl3HMACMd5</STRONG> (Thumb, 178 bytes, Stack size 168 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ssl3HMACMd5 &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5GenerateMac
</UL>

<P><STRONG><a name="[8aa]"></a>tlsHMACMd5</STRONG> (Thumb, 166 bytes, Stack size 232 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tlsHMACMd5 &rArr; psHmacMd5Init &rArr; tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5GenerateMac
</UL>

<P><STRONG><a name="[8ab]"></a>_psTrace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _psTrace &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psErrorInt
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psErrorStr
</UL>

<P><STRONG><a name="[44b]"></a>_psError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _psError &rArr; _psTrace &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPriv
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSessionEntryChronList
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[8ac]"></a>_psTraceInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psErrorInt
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPriv
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSessionEntryChronList
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[8ad]"></a>_psTraceStr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psErrorStr
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPriv
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSessionEntryChronList
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[8ae]"></a>csRsaEncryptPub</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>
<BR>[Called By]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
</UL>

<P><STRONG><a name="[8af]"></a>csRsaDecryptPub</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[8b0]"></a>csRsaEncryptPriv</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nowDoSkePka
</UL>

<P><STRONG><a name="[8b1]"></a>csRsaDecryptPriv</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[1082]"></a>matrixSslSetCipherSuiteEnabledStatus</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[910]"></a>csCheckCertAgainstCipherSuite</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8cd]"></a>sslGetCipherSpec</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8e8]"></a>sslGetCipherSpecList</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[8e7]"></a>sslGetCipherSpecListLen</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[90f]"></a>matrixSslSetKexFlags</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8b2]"></a>sslInitHSHash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8b3]"></a>sslUpdateHSHash</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>

<P><STRONG><a name="[8b6]"></a>prf</STRONG> (Thumb, 136 bytes, Stack size 488 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
</UL>

<P><STRONG><a name="[8b8]"></a>prf2</STRONG> (Thumb, 192 bytes, Stack size 264 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
</UL>

<P><STRONG><a name="[8ba]"></a>sslGenerateFinishedHash</STRONG> (Thumb, 222 bytes, Stack size 272 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
</UL>

<P><STRONG><a name="[8bb]"></a>sslSnapshotHSHash</STRONG> (Thumb, 124 bytes, Stack size 488 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
</UL>

<P><STRONG><a name="[8bd]"></a>_psErrorStr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
</UL>

<P><STRONG><a name="[8be]"></a>matrixSslOpenWithConfig</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psErrorStr
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSessionEntryChronList
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8bf]"></a>matrixSslGetPrngData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>

<P><STRONG><a name="[8c0]"></a>matrixSslClose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8c1]"></a>matrixSslNewKeys</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8c4]"></a>matrixSslLoadRsaKeysMem</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[8c5]"></a>matrixSslDeleteKeys</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[8c6]"></a>clearFlightList</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
</UL>

<P><STRONG><a name="[8c7]"></a>clearPkaAfter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nowDoSkePka
</UL>

<P><STRONG><a name="[8c8]"></a>matrixUpdateSession</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8c9]"></a>matrixSslDeleteSession</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPkaAfter
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlightList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
</UL>

<P><STRONG><a name="[8ca]"></a>sslActivateWriteCipher</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
</UL>

<P><STRONG><a name="[8cb]"></a>sslActivateReadCipher</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
</UL>

<P><STRONG><a name="[8cc]"></a>matrixSslNewSession</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
</UL>

<P><STRONG><a name="[8ce]"></a>matrixClearSession</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
</UL>

<P><STRONG><a name="[8cf]"></a>matrixSslSetSessionOption</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReEnableRehandshakes
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDisableRehandshakes
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>

<P><STRONG><a name="[1083]"></a>matrixSslGetAnonStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[917]"></a>matrixSslHandshakeIsComplete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[8eb]"></a>matrixSslSetCertValidator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
</UL>

<P><STRONG><a name="[8d0]"></a>psGetTime</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
</UL>

<P><STRONG><a name="[8d1]"></a>matrixRegisterSession</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
</UL>

<P><STRONG><a name="[8d3]"></a>psDiffMsecs</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
</UL>

<P><STRONG><a name="[8d2]"></a>matrixResumeSession</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDiffMsecs
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[90e]"></a>matrixServerSetKeysSNI</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8d4]"></a>matrixSslDeleteSessionTicketKey</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1084]"></a>matrixSslSetSessionTicketCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[8d5]"></a>matrixSslLoadSessionTicketKeys</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8d7]"></a>matrixSessionTicketLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewSessionTicket
</UL>

<P><STRONG><a name="[8d8]"></a>sslWritePad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>

<P><STRONG><a name="[8d6]"></a>matrixCreateSessionTicket</STRONG> (Thumb, 312 bytes, Stack size 1032 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetEntropy
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslWritePad
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSessionTicketLen
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewSessionTicket
</UL>

<P><STRONG><a name="[8da]"></a>matrixUnlockSessionTicket</STRONG> (Thumb, 322 bytes, Stack size 1080 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTicketKeys
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8db]"></a>matrixSslGetSessionId</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[8dc]"></a>matrixSslCreateSNIext</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8dd]"></a>sslResetContext</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8e0]"></a>matrixValidateCerts</STRONG> (Thumb, 488 bytes, Stack size 88 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcardMatch
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[911]"></a>matrixUserCertValidator</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[8e5]"></a>psWriteHandshakeHeader</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>

<P><STRONG><a name="[8e4]"></a>psWriteRecordInfo</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>

<P><STRONG><a name="[8e6]"></a>matrixSslEncodeClientHello</STRONG> (Thumb, 1510 bytes, Stack size 152 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecListLen
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
</UL>

<P><STRONG><a name="[8e9]"></a>matrixSslNewClientSession</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ValidateGeneralName
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetCertValidator
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8ec]"></a>matrixSslNewSessionId</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8ed]"></a>matrixSslClearSessionId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8ee]"></a>matrixSslDeleteSessionId</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8ef]"></a>matrixSslNewServerSession</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[1085]"></a>matrixSslRegisterSNICallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[8f0]"></a>matrixSslGetReadbuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[8f1]"></a>matrixSslGetOutdata</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[8f3]"></a>matrixSslGetEncodedSize</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
</UL>

<P><STRONG><a name="[8f2]"></a>matrixSslGetWritebuf</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetEncodedSize
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
</UL>

<P><STRONG><a name="[8f4]"></a>matrixSslEncode</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToUserBuf
</UL>

<P><STRONG><a name="[8f5]"></a>matrixSslEncodeToUserBuf</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
</UL>

<P><STRONG><a name="[8f6]"></a>matrixSslEncodeWritebuf</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[8f7]"></a>matrixSslEncodeToOutdata</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[900]"></a>sslDeriveKeys</STRONG> (Thumb, 190 bytes, Stack size 280 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
</UL>

<P><STRONG><a name="[901]"></a>tlsDeriveKeys</STRONG> (Thumb, 484 bytes, Stack size 104 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
</UL>

<P><STRONG><a name="[902]"></a>sslCreateKeys</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
</UL>

<P><STRONG><a name="[90c]"></a>sslEncodeResponse</STRONG> (Thumb, 1410 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSessionTicketLen
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCertFragOverhead
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewSessionTicket
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secureWriteAdditions
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nowDoSkePka
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[912]"></a>matrixSslDecode</STRONG> (Thumb, 1974 bytes, Stack size 216 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCompressCount
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[916]"></a>matrixSslReceivedData</STRONG> (Thumb, 1380 bytes, Stack size 96 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslHandshakeIsComplete
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
</UL>

<P><STRONG><a name="[918]"></a>matrixSslProcessedData</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[919]"></a>sslEncodeClosureAlert</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
</UL>

<P><STRONG><a name="[91a]"></a>matrixSslEncodeClosureAlert</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeClosureAlert
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[91b]"></a>matrixSslEncodeHelloRequest</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>

<P><STRONG><a name="[91c]"></a>matrixSslEncodeRehandshake</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetCertValidator
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>

<P><STRONG><a name="[91d]"></a>matrixSslDisableRehandshakes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
</UL>

<P><STRONG><a name="[91e]"></a>matrixSslReEnableRehandshakes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
</UL>

<P><STRONG><a name="[1086]"></a>matrixSslGetRehandshakeCredits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[1087]"></a>matrixSslAddRehandshakeCredits</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[91f]"></a>matrixSslSentData</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslHandshakeIsComplete
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[920]"></a>matrixSslNewHelloExtension</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[921]"></a>matrixSslDeleteHelloExtension</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[922]"></a>matrixSslLoadHelloExtension</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[923]"></a>_psErrorInt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
</UL>

<P><STRONG><a name="[1088]"></a>psCompareTime</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, wm_matrixssl_compile.o(.text), UNUSED)

<P><STRONG><a name="[924]"></a>_psTracePtr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1089]"></a>HTTPClientSetLocalConnection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)

<P><STRONG><a name="[925]"></a>HTTPClientSetVerb</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HTTPClientSetVerb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[926]"></a>HTTPClientOpenRequest</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HTTPClientOpenRequest &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[927]"></a>HTTPWrapperGetUpTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPWrapperGetUpTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
</UL>

<P><STRONG><a name="[92a]"></a>HTTPClientReset</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>

<P><STRONG><a name="[92b]"></a>HTTPIntrnConnectionClose</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
</UL>

<P><STRONG><a name="[92c]"></a>HTTPClientCloseRequest</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[92e]"></a>HTTPClientAddRequestHeaders</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HTTPClientAddRequestHeaders &rArr; HTTPIntrnHeadersAdd &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[92f]"></a>HTTPWrapperGetSocketError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPWrapperGetSocketError
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[938]"></a>HTTPWrapperItoa</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPWrapperItoa
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[932]"></a>HTTPStrInsensitiveCompare</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTTPStrInsensitiveCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
</UL>

<P><STRONG><a name="[933]"></a>HTTPStrCaseStr</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTTPStrCaseStr &rArr; HTTPStrInsensitiveCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
</UL>

<P><STRONG><a name="[93c]"></a>HTTPStrExtract</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPStrExtract
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[939]"></a>HTTPWrapperGetHostByName</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = HTTPWrapperGetHostByName &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[93d]"></a>HTTPStrSearch</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HTTPStrSearch &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
</UL>

<P><STRONG><a name="[93f]"></a>HTTPClientSendRequest</STRONG> (Thumb, 572 bytes, Stack size 88 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = HTTPClientSendRequest &rArr; HTTPIntrnHeadersSend &rArr; HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperItoa
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[940]"></a>HTTPStrGetToken</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTTPStrGetToken
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
</UL>

<P><STRONG><a name="[945]"></a>HTTPClientRecvResponse</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = HTTPClientRecvResponse &rArr; HTTPIntrnHeadersReceive &rArr; HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[947]"></a>HTTPStrLToH</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
</UL>

<P><STRONG><a name="[946]"></a>HTTPClientWriteData</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrLToH
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[948]"></a>HTTPStrHToL</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTTPStrHToL
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
</UL>

<P><STRONG><a name="[94b]"></a>HTTPClientReadData</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[94c]"></a>HTTPClientGetInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[94d]"></a>HTTPClientGetNextHeader</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HTTPClientGetNextHeader &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
</UL>

<P><STRONG><a name="[94e]"></a>HTTPClientFindFirstHeader</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HTTPClientFindFirstHeader &rArr; HTTPClientGetNextHeader &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[95c]"></a>HTTPClientFindCloseHeader</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[950]"></a>stricmp</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[952]"></a>HTTPWrapperIsAscii</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlNum
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlpha
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperToLower
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperToUpper
</UL>

<P><STRONG><a name="[951]"></a>HTTPWrapperToUpper</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[953]"></a>HTTPWrapperToLower</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[954]"></a>HTTPWrapperIsAlpha</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlNum
</UL>

<P><STRONG><a name="[955]"></a>HTTPWrapperIsAlNum</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlpha
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[956]"></a>HTTPWrapperShutDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[957]"></a>HTTPWrapperInitRandomeNumber</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[958]"></a>HTTPWrapperGetRandomeNumber</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[26c]"></a>http_client_task_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = http_client_task_init &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[5e8]"></a>http_client_post</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = http_client_post &rArr; HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpc_proc
</UL>

<P><STRONG><a name="[5fe]"></a>ping_test_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ping_test_stop &rArr; tls_os_timer_start &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop_timeout
</UL>

<P><STRONG><a name="[5fc]"></a>ping_test_create_task</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ping_test_create_task &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[5fd]"></a>ping_test_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ping_test_start &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[966]"></a>http_fwup</STRONG> (Thumb, 658 bytes, Stack size 144 bytes, wm_http_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = http_fwup &rArr; socket_fwup_recv &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindCloseHeader
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientRecvResponse
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
</UL>

<P><STRONG><a name="[5e9]"></a>t_http_fwup</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, wm_http_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = t_http_fwup &rArr; http_fwup &rArr; socket_fwup_recv &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_proc
</UL>

<P><STRONG><a name="[968]"></a>socket_fwup_recv</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = socket_fwup_recv &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[969]"></a>socket_fwup_err</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = socket_fwup_err &rArr; tls_fwup_exit &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[108a]"></a>socket_fwup_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_socket_fwup.o(.text), UNUSED)

<P><STRONG><a name="[967]"></a>socket_fwup_accept</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = socket_fwup_accept &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[96b]"></a>fs_open</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_open &rArr; fs_free
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_malloc
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_jump_html
</UL>

<P><STRONG><a name="[96e]"></a>fs_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_close &rArr; fs_free
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
</UL>

<P><STRONG><a name="[96f]"></a>fs_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[970]"></a>fs_read_line</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = fs_read_line &rArr; Web_parse_line &rArr; tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[975]"></a>send_error_html</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = send_error_html &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[976]"></a>send_jump_html</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = send_jump_html &rArr; send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[977]"></a>send_data_to_sys</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = send_data_to_sys &rArr; tls_fwup_request_sync &rArr; tls_fwup_request_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[979]"></a>extract_html_recive</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = extract_html_recive &rArr; send_jump_html &rArr; send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_jump_html
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resethandler
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[97c]"></a>http_set_cgi_handlers</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[97b]"></a>httpd_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_cgi_handlers
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_webserver_init
</UL>

<P><STRONG><a name="[50a]"></a>httpd_deinit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = httpd_deinit &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[50b]"></a>tls_webserver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tls_webserver_init &rArr; httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[97d]"></a>scan_result_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, web.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[971]"></a>Web_parse_line</STRONG> (Thumb, 820 bytes, Stack size 264 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Web_parse_line &rArr; tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
</UL>

<P><STRONG><a name="[85]"></a>do_cgi_config</STRONG> (Thumb, 522 bytes, Stack size 152 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = do_cgi_config &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HtmlConvertURLStr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>do_cgi_advance</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = do_cgi_advance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>do_cgi_firmware</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = do_cgi_firmware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>do_cgi_webindex</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = do_cgi_webindex &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HtmlConvertURLStr
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.data)
</UL>
<P><STRONG><a name="[97f]"></a>flash_manager_destroy_flash_info</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = flash_manager_destroy_flash_info &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
</UL>

<P><STRONG><a name="[9b1]"></a>flash_manager_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
</UL>

<P><STRONG><a name="[988]"></a>flash_manager_read</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = flash_manager_read &rArr; flash_manager_parse &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
</UL>

<P><STRONG><a name="[98a]"></a>flash_manager_write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = flash_manager_write &rArr; flash_manager_write_buffer &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
</UL>

<P><STRONG><a name="[98b]"></a>mbedtls_hmac_calc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_hmac_calc &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_generate_passwd
</UL>

<P><STRONG><a name="[993]"></a>hmac_generate_passwd</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hmac_generate_passwd &rArr; mbedtls_hmac_calc &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
</UL>

<P><STRONG><a name="[9af]"></a>atiny_mqtt_init</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_mqtt_init &rArr; mqtt_dup_param &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_init
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_param
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
</UL>

<P><STRONG><a name="[9b2]"></a>atiny_mqtt_bind</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = atiny_mqtt_bind &rArr; connect_server &rArr; mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_init
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_disconnect
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_deinit
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_check_status
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_delay
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_inc_fail_cnt
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_device_info
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_dynamic_info
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_params
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
</UL>

<P><STRONG><a name="[9b9]"></a>atiny_mqtt_isconnected</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_mqtt_isconnected &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_check_status
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_is_connectting_with_deviceid
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
</UL>

<P><STRONG><a name="[9ba]"></a>atiny_mqtt_data_send</STRONG> (Thumb, 856 bytes, Stack size 72 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = atiny_mqtt_data_send &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_publish
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_device_topic
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
</UL>

<P><STRONG><a name="[9bb]"></a>mqtt_al_install</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqtt_al_install &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
</UL>

<P><STRONG><a name="[108b]"></a>mqtt_al_uninstall</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mqtt_al.o(.text), UNUSED)

<P><STRONG><a name="[9b3]"></a>mqtt_al_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mqtt_al_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9b8]"></a>mqtt_al_deinit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mqtt_al_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9a2]"></a>mqtt_al_connect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_al_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[9b5]"></a>mqtt_al_disconnect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_al_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9ab]"></a>mqtt_al_publish</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_al_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
</UL>

<P><STRONG><a name="[9ad]"></a>mqtt_al_subscribe</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_al_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
</UL>

<P><STRONG><a name="[108c]"></a>mqtt_al_unsubscribe</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mqtt_al.o(.text), UNUSED)

<P><STRONG><a name="[9b7]"></a>mqtt_al_check_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mqtt_al.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_al_check_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9c0]"></a>MQTTClientInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = MQTTClientInit &rArr; MutexInit &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
</UL>

<P><STRONG><a name="[9c3]"></a>MQTTClientDeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MQTTClientDeInit &rArr; MutexDestory &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disconnect
</UL>

<P><STRONG><a name="[9c9]"></a>deliverMessage</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = deliverMessage &rArr; MQTTTopicMatched
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTTopicMatched
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewMessageData
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9cb]"></a>keepalive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = keepalive &rArr; sendPacket &rArr; TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9cf]"></a>MQTTCleanSession</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTCleanSession
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
</UL>

<P><STRONG><a name="[9ce]"></a>MQTTCloseSession</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTTCloseSession &rArr; MQTTCleanSession
</UL>
<BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCleanSession
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9d0]"></a>cycle</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRun
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[9d4]"></a>MQTTYield</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MQTTYield &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_loop_entry
</UL>

<P><STRONG><a name="[9d7]"></a>MQTTRun</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MQTTRun &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttclient.o(.text)
</UL>
<P><STRONG><a name="[9d8]"></a>MQTTStartTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mqttclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadStart
</UL>

<P><STRONG><a name="[9da]"></a>waitfor</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[9db]"></a>MQTTConnectWithResults</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = MQTTConnectWithResults &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[9de]"></a>MQTTConnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[9df]"></a>MQTTSetMessageHandler</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSetMessageHandler &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[9e0]"></a>MQTTSubscribeWithResults</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, mqttclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[9e5]"></a>MQTTSubscribeWithResultsArgs</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = MQTTSubscribeWithResultsArgs &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandlerArgs
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subscribe
</UL>

<P><STRONG><a name="[9e6]"></a>MQTTSubscribe</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mqttclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[9e7]"></a>MQTTUnsubscribe</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MQTTUnsubscribe &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unsubscribe
</UL>

<P><STRONG><a name="[9ea]"></a>MQTTPublish</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MQTTPublish &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__publish
</UL>

<P><STRONG><a name="[9ec]"></a>MQTTDisconnect</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MQTTDisconnect &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disconnect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
</UL>

<P><STRONG><a name="[9ee]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[9dc]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[9dd]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[9f7]"></a>MQTTSerialize_zero</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[9ed]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[9cd]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[9d1]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, mqttdeserializepublish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9d3]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mqttdeserializepublish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9c7]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_readnb
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[9fb]"></a>MQTTPacket_decode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_read
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[9f0]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[9fa]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(.text)
</UL>
<P><STRONG><a name="[9f6]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[9f9]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[9f5]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[9f1]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[9f3]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[9f2]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[108d]"></a>getLenStringLen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mqttpacket.o(.text), UNUSED)

<P><STRONG><a name="[9f4]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[9f8]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[9ef]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[9fc]"></a>MQTTPacket_equals</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqttpacket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[9fd]"></a>MQTTPacket_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mqttpacket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>

<P><STRONG><a name="[9fe]"></a>MQTTPacket_readnb</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mqttpacket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodenb
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>

<P><STRONG><a name="[a00]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[9eb]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[9d2]"></a>MQTTSerialize_ack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mqttserializepublish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pubcomp
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pubrel
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_puback
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[a01]"></a>MQTTSerialize_puback</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttserializepublish.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[a02]"></a>MQTTSerialize_pubrel</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mqttserializepublish.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[a03]"></a>MQTTSerialize_pubcomp</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttserializepublish.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[a04]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[9e2]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[9e3]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[a05]"></a>MQTTSerialize_unsubscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttunsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_unsubscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
</UL>

<P><STRONG><a name="[9e8]"></a>MQTTSerialize_unsubscribe</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, mqttunsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_unsubscribe &rArr; MQTTSerialize_unsubscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>

<P><STRONG><a name="[9e9]"></a>MQTTDeserialize_unsuback</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, mqttunsubscribeclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>

<P><STRONG><a name="[9c1]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TimerInit &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRun
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
</UL>

<P><STRONG><a name="[9be]"></a>TimerIsExpired</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TimerIsExpired &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[9cc]"></a>TimerCountdownMS</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TimerCountdownMS &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRun
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[9bf]"></a>TimerCountdown</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[9bd]"></a>TimerLeftMS</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TimerLeftMS &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[9c2]"></a>MutexInit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MutexInit &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
</UL>

<P><STRONG><a name="[9d5]"></a>MutexLock</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MutexLock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRun
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[9d6]"></a>MutexUnlock</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRun
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[9c4]"></a>MutexDestory</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mqtt_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MutexDestory &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientDeInit
</UL>

<P><STRONG><a name="[9d9]"></a>ThreadStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqtt_osdep.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTStartTask
</UL>

<P><STRONG><a name="[233]"></a>mqtt_lib_load</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mqtt_lib_load &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_install
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[a3b]"></a>atiny_net_bind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[a1f]"></a>atiny_net_accept</STRONG> (Thumb, 330 bytes, Stack size 104 bytes, atiny_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</UL>

<P><STRONG><a name="[a12]"></a>atiny_net_connect</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = atiny_net_connect &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[a20]"></a>atiny_net_recv</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = atiny_net_recv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>

<P><STRONG><a name="[a0b]"></a>atiny_net_recv_timeout</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = atiny_net_recv_timeout &rArr; atiny_net_recv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_raw_read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
</UL>

<P><STRONG><a name="[a21]"></a>atiny_net_send</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = atiny_net_send &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
</UL>

<P><STRONG><a name="[a19]"></a>atiny_net_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
</UL>

<P><STRONG><a name="[a0f]"></a>atiny_net_send_timeout</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = atiny_net_send_timeout &rArr; atiny_net_write_sock &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_write_sock
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
</UL>

<P><STRONG><a name="[a1e]"></a>dtls_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dtls_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_snprintf
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_printf
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[a14]"></a>dtls_ssl_new</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3492<LI>Call Chain = dtls_ssl_new &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_init
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_psk
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
</UL>

<P><STRONG><a name="[a15]"></a>dtls_shakehand</STRONG> (Thumb, 244 bytes, Stack size 544 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488 + Unknown Stack Size
<LI>Call Chain = dtls_shakehand &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_gettime
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
</UL>

<P><STRONG><a name="[a16]"></a>dtls_ssl_destroy</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dtls_ssl_destroy &rArr; mbedtls_net_free &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_disconnect
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
</UL>

<P><STRONG><a name="[a10]"></a>dtls_write</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048<LI>Call Chain = dtls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
</UL>

<P><STRONG><a name="[a43]"></a>dtls_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dtls_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
</UL>

<P><STRONG><a name="[a44]"></a>dtls_accept</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dtls_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</UL>

<P><STRONG><a name="[a46]"></a>atiny_random</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, entropy_hardware_poll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atiny_random &rArr; tls_crypto_random_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[162]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, entropy_hardware_poll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_hardware_poll &rArr; atiny_random &rArr; tls_crypto_random_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_random
</UL>
<BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[a47]"></a>mbedtls_timing_get_timer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, timing_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = mbedtls_timing_get_timer &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_set_delay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_delay
</UL>

<P><STRONG><a name="[14a]"></a>mbedtls_timing_set_delay</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timing_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mbedtls_timing_set_delay &rArr; mbedtls_timing_get_timer &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>mbedtls_timing_get_delay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timing_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mbedtls_timing_get_delay &rArr; mbedtls_timing_get_timer &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[a48]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a49]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a4b]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2092<LI>Call Chain = mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[a4d]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2412<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a4f]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1302 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
</UL>

<P><STRONG><a name="[a4e]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
</UL>

<P><STRONG><a name="[a51]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>

<P><STRONG><a name="[a50]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>

<P><STRONG><a name="[a52]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb8
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[a53]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a54]"></a>mbedtls_aes_crypt_cfb128</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cfb128_wrap
</UL>

<P><STRONG><a name="[a55]"></a>mbedtls_aes_crypt_cfb8</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a56]"></a>mbedtls_aes_crypt_ctr</STRONG> (Thumb, 106 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[a57]"></a>mbedtls_aes_self_test</STRONG> (Thumb, 1312 bytes, Stack size 504 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a58]"></a>mbedtls_arc4_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_arc4_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_self_test
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_ctx_alloc
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>

<P><STRONG><a name="[a59]"></a>mbedtls_arc4_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_arc4_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_self_test
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_ctx_free
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>

<P><STRONG><a name="[a5c]"></a>mbedtls_arc4_setup</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_arc4_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_self_test
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_setkey_wrap
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>

<P><STRONG><a name="[a5d]"></a>mbedtls_arc4_crypt</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_arc4_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_self_test
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_crypt_stream_wrap
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>

<P><STRONG><a name="[a5b]"></a>mbedtls_arc4_self_test</STRONG> (Thumb, 140 bytes, Stack size 296 bytes, arc4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_crypt
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_setup
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_free
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[a5f]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[a5e]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>

<P><STRONG><a name="[a60]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[a61]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[a62]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[a64]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
</UL>

<P><STRONG><a name="[a65]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[a66]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[a67]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[a69]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[a6a]"></a>mbedtls_asn1_free_named_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
</UL>

<P><STRONG><a name="[a6b]"></a>mbedtls_asn1_free_named_data_list</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
</UL>

<P><STRONG><a name="[a6c]"></a>mbedtls_asn1_find_named_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
</UL>

<P><STRONG><a name="[a71]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[a72]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn1write.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[a6d]"></a>mbedtls_asn1_write_raw_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
</UL>

<P><STRONG><a name="[a6e]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[a73]"></a>mbedtls_asn1_write_null</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
</UL>

<P><STRONG><a name="[a74]"></a>mbedtls_asn1_write_oid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
</UL>

<P><STRONG><a name="[a75]"></a>mbedtls_asn1_write_algorithm_identifier</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a76]"></a>mbedtls_asn1_write_bool</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a77]"></a>mbedtls_asn1_write_int</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a78]"></a>mbedtls_asn1_write_printable_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a79]"></a>mbedtls_asn1_write_ia5_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a7a]"></a>mbedtls_asn1_write_bitstring</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a7b]"></a>mbedtls_asn1_write_octet_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[a7c]"></a>mbedtls_asn1_store_named_data</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a7e]"></a>mbedtls_base64_encode</STRONG> (Thumb, 312 bytes, Stack size 36 bytes, base64.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_write_buffer
</UL>

<P><STRONG><a name="[a7f]"></a>mbedtls_base64_decode</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[a7d]"></a>mbedtls_base64_self_test</STRONG> (Thumb, 134 bytes, Stack size 152 bytes, base64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_encode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[a8e]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a80]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_free
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[a82]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[a83]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[a84]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
</UL>

<P><STRONG><a name="[c05]"></a>mbedtls_mpi_swap</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[a85]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>

<P><STRONG><a name="[a86]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_swap &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[a87]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[b4c]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[a88]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_set_bit &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[aa9]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>

<P><STRONG><a name="[a89]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[a6f]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_read_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[a8b]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
</UL>

<P><STRONG><a name="[a8d]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a8c]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>

<P><STRONG><a name="[a90]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[a91]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a92]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[a93]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[a94]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a96]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[a97]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[a9a]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[a99]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a9b]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
</UL>

<P><STRONG><a name="[a9c]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[a9e]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a9f]"></a>mbedtls_mpi_div_int</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[aa1]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[aa2]"></a>mbedtls_mpi_write_string</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[a63]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_read_public
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_bignum
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[a70]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[aa3]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[aa6]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1362 bytes, Stack size 1664 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[aa8]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[aaa]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 1048 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[aab]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[aae]"></a>mbedtls_mpi_is_prime</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
</UL>

<P><STRONG><a name="[aaf]"></a>mbedtls_mpi_gen_prime</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
</UL>
<BR>[Called By]<UL><LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[ab0]"></a>mbedtls_mpi_self_test</STRONG> (Thumb, 696 bytes, Stack size 104 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>

<P><STRONG><a name="[ab4]"></a>mbedtls_blowfish_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_blowfish_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_ctx_alloc
</UL>

<P><STRONG><a name="[ab5]"></a>mbedtls_blowfish_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_blowfish_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_ctx_free
</UL>

<P><STRONG><a name="[ab7]"></a>mbedtls_blowfish_setkey</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_blowfish_setkey &rArr; blowfish_enc &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_setkey_wrap
</UL>

<P><STRONG><a name="[ab8]"></a>mbedtls_blowfish_crypt_ecb</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_dec
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ctr
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_cfb64
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_cbc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[ab9]"></a>mbedtls_blowfish_crypt_cbc</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_blowfish_crypt_cbc &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[aba]"></a>mbedtls_blowfish_crypt_cfb64</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mbedtls_blowfish_crypt_cfb64 &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_crypt_cfb64_wrap
</UL>

<P><STRONG><a name="[abb]"></a>mbedtls_blowfish_crypt_ctr</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mbedtls_blowfish_crypt_ctr &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[abc]"></a>mbedtls_camellia_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_camellia_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_dec
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_ctx_alloc
</UL>

<P><STRONG><a name="[abd]"></a>mbedtls_camellia_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_camellia_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_dec
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_ctx_free
</UL>

<P><STRONG><a name="[abf]"></a>mbedtls_camellia_setkey_enc</STRONG> (Thumb, 1570 bytes, Stack size 288 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mbedtls_camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_feistel
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_dec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_enc_wrap
</UL>

<P><STRONG><a name="[ac1]"></a>mbedtls_camellia_setkey_dec</STRONG> (Thumb, 140 bytes, Stack size 312 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = mbedtls_camellia_setkey_dec &rArr; mbedtls_camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_enc
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_free
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_dec_wrap
</UL>

<P><STRONG><a name="[ac2]"></a>mbedtls_camellia_crypt_ecb</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_feistel
</UL>
<BR>[Called By]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ctr
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cfb128
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cbc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[ac3]"></a>mbedtls_camellia_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_camellia_crypt_cbc &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[ac4]"></a>mbedtls_camellia_crypt_cfb128</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_camellia_crypt_cfb128 &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cfb128_wrap
</UL>

<P><STRONG><a name="[ac5]"></a>mbedtls_camellia_crypt_ctr</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_camellia_crypt_ctr &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[ac6]"></a>mbedtls_camellia_self_test</STRONG> (Thumb, 828 bytes, Stack size 496 bytes, camellia.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ctr
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cbc
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_dec
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_enc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[ac7]"></a>mbedtls_ccm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
</UL>

<P><STRONG><a name="[ac8]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_camellia_setkey_wrap
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[acd]"></a>mbedtls_ccm_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
</UL>

<P><STRONG><a name="[ad1]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[ad2]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[ad3]"></a>mbedtls_ccm_self_test</STRONG> (Thumb, 300 bytes, Stack size 136 bytes, ccm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[108e]"></a>mbedtls_cipher_list</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher.o(.text), UNUSED)

<P><STRONG><a name="[be1]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[ad4]"></a>mbedtls_cipher_info_from_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[ac9]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[ad5]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[aca]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[ad7]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[acb]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[acc]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[ad8]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[ae2]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[ad9]"></a>mbedtls_cipher_update_ad</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>

<P><STRONG><a name="[ad0]"></a>mbedtls_cipher_update</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[add]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</UL>

<P><STRONG><a name="[ade]"></a>mbedtls_cipher_write_tag</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[ae0]"></a>mbedtls_cipher_check_tag</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[ae1]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[ae3]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[ae5]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[a29]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[afa]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 118 bytes, Stack size 408 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3340<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>

<P><STRONG><a name="[afb]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3404<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[a2c]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3436<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[a36]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[b00]"></a>mbedtls_ctr_drbg_set_prediction_resistance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[108f]"></a>mbedtls_ctr_drbg_set_entropy_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[1090]"></a>mbedtls_ctr_drbg_set_reseed_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[afd]"></a>mbedtls_ctr_drbg_update</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
</UL>

<P><STRONG><a name="[afe]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3452<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[148]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3484<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[aff]"></a>mbedtls_ctr_drbg_self_test</STRONG> (Thumb, 360 bytes, Stack size 352 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_set_prediction_resistance
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[af4]"></a>mbedtls_des_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_des_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_alloc
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
</UL>

<P><STRONG><a name="[af5]"></a>mbedtls_des_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_des_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_free
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
</UL>

<P><STRONG><a name="[af6]"></a>mbedtls_des3_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_des3_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_alloc
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</UL>

<P><STRONG><a name="[af7]"></a>mbedtls_des3_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_des3_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_free
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</UL>

<P><STRONG><a name="[1091]"></a>mbedtls_des_key_set_parity</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, des.o(.text), UNUSED)

<P><STRONG><a name="[1092]"></a>mbedtls_des_key_check_key_parity</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, des.o(.text), UNUSED)

<P><STRONG><a name="[b02]"></a>mbedtls_des_key_check_weak</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[b03]"></a>mbedtls_des_setkey</STRONG> (Thumb, 784 bytes, Stack size 20 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
</UL>

<P><STRONG><a name="[aef]"></a>mbedtls_des_setkey_enc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_enc_wrap
</UL>

<P><STRONG><a name="[aee]"></a>mbedtls_des_setkey_dec</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec_wrap
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
</UL>

<P><STRONG><a name="[af1]"></a>mbedtls_des3_set2key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set2key_enc &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc_wrap
</UL>

<P><STRONG><a name="[af0]"></a>mbedtls_des3_set2key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set2key_dec &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec_wrap
</UL>

<P><STRONG><a name="[af3]"></a>mbedtls_des3_set3key_enc</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set3key_enc &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc_wrap
</UL>

<P><STRONG><a name="[af2]"></a>mbedtls_des3_set3key_dec</STRONG> (Thumb, 34 bytes, Stack size 400 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec_wrap
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</UL>

<P><STRONG><a name="[aea]"></a>mbedtls_des_crypt_ecb</STRONG> (Thumb, 564 bytes, Stack size 28 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[aec]"></a>mbedtls_des_crypt_cbc</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_des_crypt_cbc &rArr; mbedtls_des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc_wrap
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
</UL>

<P><STRONG><a name="[aeb]"></a>mbedtls_des3_crypt_ecb</STRONG> (Thumb, 1158 bytes, Stack size 28 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[aed]"></a>mbedtls_des3_crypt_cbc</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_des3_crypt_cbc &rArr; mbedtls_des3_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc_wrap
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</UL>

<P><STRONG><a name="[b06]"></a>mbedtls_des_self_test</STRONG> (Thumb, 716 bytes, Stack size 584 bytes, des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[b09]"></a>mbedtls_dhm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_dhm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_self_test
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[b0a]"></a>mbedtls_dhm_read_params</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbedtls_dhm_read_params &rArr; dhm_check_range &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_bignum
</UL>
<BR>[Called By]<UL><LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_dh_params
</UL>

<P><STRONG><a name="[b0b]"></a>mbedtls_dhm_make_params</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, dhm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>

<P><STRONG><a name="[b0c]"></a>mbedtls_dhm_read_public</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dhm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[b0d]"></a>mbedtls_dhm_make_public</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_dhm_make_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[b0f]"></a>mbedtls_dhm_calc_secret</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = mbedtls_dhm_calc_secret &rArr; dhm_update_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_update_blinding
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[b10]"></a>mbedtls_dhm_free</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_dhm_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_self_test
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[b12]"></a>mbedtls_dhm_parse_dhm</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, dhm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_self_test
</UL>

<P><STRONG><a name="[b16]"></a>mbedtls_dhm_self_test</STRONG> (Thumb, 74 bytes, Stack size 136 bytes, dhm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_free
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_init
</UL>

<P><STRONG><a name="[b17]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[b19]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[b1f]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[b20]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[b22]"></a>mbedtls_ecdh_make_params</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[b25]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[b28]"></a>mbedtls_ecdh_get_params</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_ecdh_get_params &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_ecdh_params_from_cert
</UL>

<P><STRONG><a name="[b2b]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[b2c]"></a>mbedtls_ecdh_read_public</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[b2d]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[b2f]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 466 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[b30]"></a>mbedtls_ecdsa_sign_det</STRONG> (Thumb, 182 bytes, Stack size 304 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[b34]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 392 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[b37]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_det
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[b38]"></a>mbedtls_ecdsa_write_signature_det</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[b39]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[b3a]"></a>mbedtls_ecdsa_genkey</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[b3c]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[b3e]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[b3f]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[b42]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
</UL>

<P><STRONG><a name="[b41]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[b43]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
</UL>

<P><STRONG><a name="[b44]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[b45]"></a>mbedtls_ecp_curve_info_from_name</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[b1a]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[b46]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[b40]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[b1e]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[b21]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[b3d]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
</UL>

<P><STRONG><a name="[b2a]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[b29]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[b48]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[b1d]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[b49]"></a>mbedtls_ecp_point_cmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>

<P><STRONG><a name="[b4a]"></a>mbedtls_ecp_point_read_string</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>

<P><STRONG><a name="[b4b]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[b4d]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[b27]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_public
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[b24]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[b26]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[b23]"></a>mbedtls_ecp_tls_write_group</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[b1b]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[b61]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[b1c]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[b35]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[b63]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[b18]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[b64]"></a>mbedtls_ecp_gen_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[b65]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[b66]"></a>mbedtls_ecp_self_test</STRONG> (Thumb, 594 bytes, Stack size 272 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b3b]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[b71]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[a2a]"></a>mbedtls_entropy_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[a37]"></a>mbedtls_entropy_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[b76]"></a>mbedtls_entropy_update_manual</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[b78]"></a>mbedtls_entropy_gather</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[147]"></a>mbedtls_entropy_func</STRONG> (Thumb, 232 bytes, Stack size 104 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[b7b]"></a>mbedtls_entropy_source_self_test</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_check_bits
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[b7d]"></a>mbedtls_entropy_self_test</STRONG> (Thumb, 306 bytes, Stack size 400 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[ae7]"></a>mbedtls_gcm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[ae9]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_camellia_setkey_wrap
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[ada]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update_ad
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[adc]"></a>mbedtls_gcm_update</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[adf]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_check_tag
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_write_tag
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[ae4]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[ae6]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[ae8]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[b81]"></a>mbedtls_gcm_self_test</STRONG> (Thumb, 1358 bytes, Stack size 536 bytes, gcm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[b31]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_hmac_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[b82]"></a>mbedtls_hmac_drbg_update</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[b32]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[b85]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 100 bytes, Stack size 408 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
</UL>

<P><STRONG><a name="[b86]"></a>mbedtls_hmac_drbg_seed</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>

<P><STRONG><a name="[b8a]"></a>mbedtls_hmac_drbg_set_prediction_resistance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>

<P><STRONG><a name="[1093]"></a>mbedtls_hmac_drbg_set_entropy_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)

<P><STRONG><a name="[1094]"></a>mbedtls_hmac_drbg_set_reseed_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)

<P><STRONG><a name="[b87]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[158]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(.text)
</UL>
<P><STRONG><a name="[b33]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[b89]"></a>mbedtls_hmac_drbg_self_test</STRONG> (Thumb, 372 bytes, Stack size 200 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_set_prediction_resistance
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1095]"></a>mbedtls_md_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[98c]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[b8b]"></a>mbedtls_md_info_from_string</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[98d]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[992]"></a>mbedtls_md_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[1096]"></a>mbedtls_md_clone</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[98e]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init_ctx
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[b8d]"></a>mbedtls_md_init_ctx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[be6]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[be7]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[be8]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[be9]"></a>mbedtls_md</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[98f]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[990]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[991]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[b84]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[b8e]"></a>mbedtls_md_hmac</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[c68]"></a>mbedtls_md_process</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[b83]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[1097]"></a>mbedtls_md_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[ca7]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[b92]"></a>mbedtls_md5_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[b93]"></a>mbedtls_md5_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md5_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[b94]"></a>mbedtls_md5_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[b8f]"></a>mbedtls_md5_starts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[b95]"></a>mbedtls_md5_process</STRONG> (Thumb, 2326 bytes, Stack size 84 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
</UL>

<P><STRONG><a name="[b90]"></a>mbedtls_md5_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
</UL>

<P><STRONG><a name="[b91]"></a>mbedtls_md5_finish</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[1d6]"></a>mbedtls_md5</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bb1]"></a>mbedtls_md5_self_test</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[bb3]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[bb5]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[bb7]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[bb9]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[bba]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[1098]"></a>mbedtls_oid_get_oid_by_sig_alg</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[bbc]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[1099]"></a>mbedtls_oid_get_oid_by_pk_alg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[bbe]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[109a]"></a>mbedtls_oid_get_oid_by_ec_grp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[bc0]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[bc2]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>

<P><STRONG><a name="[c11]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[bc4]"></a>mbedtls_oid_get_pkcs12_pbe_alg</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pkcs12_pbe_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[109b]"></a>mbedtls_oid_get_numeric_string</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[b13]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[b14]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 902 bytes, Stack size 88 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2852<LI>Call Chain = mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[b15]"></a>mbedtls_pem_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_parse_dhm
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[bcb]"></a>mbedtls_pem_write_buffer</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, pem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_encode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bd5]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
<LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[109c]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[bcc]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[bf8]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[bf9]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[109d]"></a>mbedtls_pk_setup_rsa_alt</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[bd1]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_ecdh_params_from_cert
<LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[bcf]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[bd0]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[bd4]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[109e]"></a>mbedtls_pk_decrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[c43]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[109f]"></a>mbedtls_pk_check_pair</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[10a0]"></a>mbedtls_pk_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[cb9]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[ccb]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[bdf]"></a>mbedtls_pkcs5_pbkdf2_hmac</STRONG> (Thumb, 280 bytes, Stack size 192 bytes, pkcs5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[be0]"></a>mbedtls_pkcs5_pbes2</STRONG> (Thumb, 390 bytes, Stack size 280 bytes, pkcs5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[be2]"></a>mbedtls_pkcs5_self_test</STRONG> (Thumb, 294 bytes, Stack size 112 bytes, pkcs5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[be5]"></a>mbedtls_pkcs12_derivation</STRONG> (Thumb, 470 bytes, Stack size 648 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
</UL>

<P><STRONG><a name="[bec]"></a>mbedtls_pkcs12_pbe_sha1_rc4_128</STRONG> (Thumb, 116 bytes, Stack size 336 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_crypt
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_setup
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_free
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_init
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[bed]"></a>mbedtls_pkcs12_pbe</STRONG> (Thumb, 244 bytes, Stack size 168 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[bf7]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[bff]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[c00]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[a24]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_init
</UL>

<P><STRONG><a name="[a25]"></a>mbedtls_platform_set_snprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_init
</UL>

<P><STRONG><a name="[a26]"></a>mbedtls_platform_set_printf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_init
</UL>

<P><STRONG><a name="[10a1]"></a>mbedtls_platform_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[10a2]"></a>mbedtls_platform_teardown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[b99]"></a>mbedtls_ripemd160_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ripemd160_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_ctx_alloc
</UL>

<P><STRONG><a name="[b9a]"></a>mbedtls_ripemd160_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ripemd160_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_ctx_free
</UL>

<P><STRONG><a name="[b9b]"></a>mbedtls_ripemd160_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ripemd160_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_clone_wrap
</UL>

<P><STRONG><a name="[b96]"></a>mbedtls_ripemd160_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_starts_wrap
</UL>

<P><STRONG><a name="[b9c]"></a>mbedtls_ripemd160_process</STRONG> (Thumb, 7464 bytes, Stack size 100 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_ripemd160_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_process_wrap
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
</UL>

<P><STRONG><a name="[b97]"></a>mbedtls_ripemd160_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update_wrap
</UL>

<P><STRONG><a name="[b98]"></a>mbedtls_ripemd160_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_finish_wrap
</UL>

<P><STRONG><a name="[1de]"></a>mbedtls_ripemd160</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mbedtls_ripemd160 &rArr; mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c02]"></a>mbedtls_ripemd160_self_test</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[c03]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[bdb]"></a>mbedtls_rsa_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[bdc]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[c04]"></a>mbedtls_rsa_gen_key</STRONG> (Thumb, 490 bytes, Stack size 80 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[c05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_swap
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[bf5]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[bfb]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 572 bytes, Stack size 168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[bda]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[c06]"></a>mbedtls_rsa_public</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[c08]"></a>mbedtls_rsa_private</STRONG> (Thumb, 700 bytes, Stack size 144 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[c0b]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[c0c]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[bd9]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[c0d]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 468 bytes, Stack size 1168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[c0e]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 354 bytes, Stack size 1088 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[bd8]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[c0f]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 384 bytes, Stack size 144 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[c10]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[bd7]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[bd3]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 512 bytes, Stack size 1168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[c12]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[c13]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 678 bytes, Stack size 1112 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[bd6]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[c14]"></a>mbedtls_rsa_copy</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[c15]"></a>mbedtls_rsa_self_test</STRONG> (Thumb, 544 bytes, Stack size 400 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ba0]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[ba2]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[ba1]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[b9d]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sha1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[ba3]"></a>mbedtls_sha1_process</STRONG> (Thumb, 6442 bytes, Stack size 92 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>

<P><STRONG><a name="[b9e]"></a>mbedtls_sha1_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
</UL>

<P><STRONG><a name="[b9f]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[1e6]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c17]"></a>mbedtls_sha1_self_test</STRONG> (Thumb, 196 bytes, Stack size 1160 bytes, sha1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba8]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[ba9]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[baa]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[ba4]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[bab]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3600 bytes, Stack size 312 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>

<P><STRONG><a name="[ba5]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[ba6]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[ba7]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[c19]"></a>mbedtls_sha256_self_test</STRONG> (Thumb, 264 bytes, Stack size 176 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bac]"></a>mbedtls_sha512_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[bad]"></a>mbedtls_sha512_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[bae]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[b70]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[baf]"></a>mbedtls_sha512_process</STRONG> (Thumb, 3730 bytes, Stack size 752 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>

<P><STRONG><a name="[b75]"></a>mbedtls_sha512_update</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
</UL>

<P><STRONG><a name="[b79]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 946 bytes, Stack size 56 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[b74]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[c1b]"></a>mbedtls_sha512_self_test</STRONG> (Thumb, 264 bytes, Stack size 312 bytes, sha512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c95]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[c1c]"></a>mbedtls_ssl_ciphersuite_from_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_id
</UL>

<P><STRONG><a name="[c1e]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[c1d]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
</UL>

<P><STRONG><a name="[c1f]"></a>mbedtls_ssl_get_ciphersuite_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
</UL>

<P><STRONG><a name="[c4b]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[10a3]"></a>mbedtls_ssl_get_ciphersuite_sig_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[10a4]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[c4f]"></a>mbedtls_ssl_ciphersuite_uses_psk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[c56]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3912<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[c7b]"></a>mbedtls_ssl_sig_hash_set_const_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[c5f]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[c3d]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1176 bytes, Stack size 440 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c50]"></a>mbedtls_ssl_psk_derive_premaster</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = mbedtls_ssl_psk_derive_premaster &rArr; mbedtls_dhm_calc_secret &rArr; dhm_update_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[c27]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[c69]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; ssl_check_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[c57]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[c2e]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[c6e]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[c70]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[c31]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[c3b]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[c6d]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_handle_message_type
</UL>
<BR>[Calls]<UL><LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[c6f]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[c3a]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c71]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>

<P><STRONG><a name="[c59]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c72]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[c40]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[c58]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 1016 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3896<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c5a]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c5c]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c3c]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c76]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>

<P><STRONG><a name="[c77]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[c78]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_free
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[c5e]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c5b]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c5d]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c7d]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[a27]"></a>mbedtls_ssl_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[a33]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[c81]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[c93]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[c94]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[a2e]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[10a5]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a2f]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[10a6]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a3c]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[a0d]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_read
</UL>

<P><STRONG><a name="[a34]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_set_timer_cb &rArr; ssl_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[c82]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[10a7]"></a>mbedtls_ssl_conf_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10a8]"></a>mbedtls_ssl_conf_ciphersuites_for_version</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10a9]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c83]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>

<P><STRONG><a name="[a32]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[a30]"></a>mbedtls_ssl_conf_psk</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_conf_psk &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[c85]"></a>mbedtls_ssl_set_hs_psk</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10aa]"></a>mbedtls_ssl_conf_psk_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10ab]"></a>mbedtls_ssl_conf_dhm_min_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10ac]"></a>mbedtls_ssl_conf_sig_hashes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10ad]"></a>mbedtls_ssl_conf_curves</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c86]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c87]"></a>mbedtls_ssl_conf_alpn_protocols</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[10ae]"></a>mbedtls_ssl_get_alpn_protocol</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10af]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b0]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b1]"></a>mbedtls_ssl_conf_fallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b2]"></a>mbedtls_ssl_conf_encrypt_then_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b3]"></a>mbedtls_ssl_conf_extended_master_secret</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b4]"></a>mbedtls_ssl_conf_arc4_support</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b5]"></a>mbedtls_ssl_conf_max_frag_len</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b6]"></a>mbedtls_ssl_conf_truncated_hmac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b7]"></a>mbedtls_ssl_conf_cbc_record_splitting</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b8]"></a>mbedtls_ssl_conf_legacy_renegotiation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10b9]"></a>mbedtls_ssl_conf_renegotiation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10ba]"></a>mbedtls_ssl_conf_renegotiation_enforced</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10bb]"></a>mbedtls_ssl_conf_renegotiation_period</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10bc]"></a>mbedtls_ssl_conf_session_tickets</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10bd]"></a>mbedtls_ssl_conf_export_keys_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10be]"></a>mbedtls_ssl_get_bytes_avail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a3f]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[c88]"></a>mbedtls_ssl_get_ciphersuite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[10bf]"></a>mbedtls_ssl_get_version</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c89]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>

<P><STRONG><a name="[c90]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[10c0]"></a>mbedtls_ssl_get_peer_cert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c8a]"></a>mbedtls_ssl_get_session</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[c8b]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3928<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[a3e]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3944<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[c8d]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3976<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[a0e]"></a>mbedtls_ssl_read</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_read
</UL>

<P><STRONG><a name="[a42]"></a>mbedtls_ssl_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_split
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_write
</UL>

<P><STRONG><a name="[c92]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>

<P><STRONG><a name="[a39]"></a>mbedtls_ssl_free</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
</UL>

<P><STRONG><a name="[a28]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[a2d]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[c95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
</UL>

<P><STRONG><a name="[a35]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
</UL>

<P><STRONG><a name="[c53]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[10c1]"></a>mbedtls_ssl_sig_from_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c46]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[10c2]"></a>mbedtls_ssl_sig_hash_set_find</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[10c3]"></a>mbedtls_ssl_sig_hash_set_add</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c45]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[c22]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[c47]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[10c4]"></a>mbedtls_ssl_set_calc_verify_md</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[c97]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[c98]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>
<BR>[Called By]<UL><LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[c99]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[c9b]"></a>mbedtls_x509_get_rsassa_pss_params</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[c9d]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ca1]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[ca2]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ca3]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[ca4]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[ca5]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 316 bytes, Stack size 312 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cb8]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, x509.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[ca6]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[ca7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cba]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, x509.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cbf]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[cc3]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[ca8]"></a>mbedtls_x509_self_test</STRONG> (Thumb, 174 bytes, Stack size 648 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
</UL>

<P><STRONG><a name="[a38]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
</UL>

<P><STRONG><a name="[a2b]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[c62]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[a31]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2916<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
</UL>

<P><STRONG><a name="[cb7]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 1646 bytes, Stack size 80 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[a40]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_crt_verify_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[c73]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 402 bytes, Stack size 12 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[c74]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[cbe]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[c75]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 548 bytes, Stack size 88 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ccb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
</UL>

<P><STRONG><a name="[ca9]"></a>mbedtls_x509_crt_verify</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
</UL>

<P><STRONG><a name="[ccc]"></a>atiny_usleep</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_usleep
</UL>

<P><STRONG><a name="[983]"></a>atiny_gettime_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__deinit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_param
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_gettime
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rcv_msg
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>

<P><STRONG><a name="[989]"></a>atiny_malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_user
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_id
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_strdup
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_calloc
</UL>

<P><STRONG><a name="[143]"></a>atiny_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_destroy_flash_info
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disconnect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_device_info
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_dynamic_info
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_params
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>atiny_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>atiny_printf</STRONG> (Thumb, 68 bytes, Stack size 288 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__deinit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_param
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_debug
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rcv_msg
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[985]"></a>atiny_strdup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = atiny_strdup &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
</UL>

<P><STRONG><a name="[ccf]"></a>tls_fwup_img_update_header</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
</UL>

<P><STRONG><a name="[cd0]"></a>atiny_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
</UL>

<P><STRONG><a name="[9b6]"></a>atiny_delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = atiny_delay &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_loop_entry
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[cd1]"></a>atiny_mutex_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[cd2]"></a>atiny_mutex_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[cd3]"></a>atiny_mutex_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[cd4]"></a>atiny_mutex_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atiny_osdep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
</UL>

<P><STRONG><a name="[a06]"></a>atiny_task_mutex_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = atiny_task_mutex_create &rArr; LOS_MuxCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
</UL>

<P><STRONG><a name="[a09]"></a>atiny_task_mutex_delete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = atiny_task_mutex_delete &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
</UL>

<P><STRONG><a name="[a07]"></a>atiny_task_mutex_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = atiny_task_mutex_lock &rArr; LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
</UL>

<P><STRONG><a name="[a08]"></a>atiny_task_mutex_unlock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = atiny_task_mutex_unlock &rArr; LOS_MuxPost &rArr; osTaskPriModify &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
</UL>

<P><STRONG><a name="[10c5]"></a>atiny_set_log_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_log.o(.text), UNUSED)

<P><STRONG><a name="[982]"></a>atiny_get_log_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__deinit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_param
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rcv_msg
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>

<P><STRONG><a name="[984]"></a>atiny_get_log_level_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, atiny_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__deinit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexDestory
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_param
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rcv_msg
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>

<P><STRONG><a name="[10c6]"></a>mbedtls_net_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sockets_alt.o(.text), UNUSED)

<P><STRONG><a name="[a3a]"></a>mbedtls_net_connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_sockets_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_connect &rArr; atiny_net_connect &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[cd6]"></a>mbedtls_net_usleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_sockets_alt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_usleep
</UL>

<P><STRONG><a name="[14c]"></a>mbedtls_net_recv</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, net_sockets_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv &rArr; atiny_net_recv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>mbedtls_net_recv_timeout</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, net_sockets_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv_timeout &rArr; atiny_net_recv_timeout &rArr; atiny_net_recv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>mbedtls_net_send</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, net_sockets_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_send &rArr; atiny_net_send &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[a41]"></a>mbedtls_net_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_sockets_alt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_free &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[a45]"></a>mbedtls_net_accept</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, net_sockets_alt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_accept
</UL>

<P><STRONG><a name="[10c7]"></a>cJSON_GetErrorPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[cd8]"></a>cJSON_IsString</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetStringValue
</UL>

<P><STRONG><a name="[cd7]"></a>cJSON_GetStringValue</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsString
</UL>

<P><STRONG><a name="[cd9]"></a>cJSON_Version</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[9b0]"></a>cJSON_InitHooks</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
</UL>

<P><STRONG><a name="[9a9]"></a>cJSON_Delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
<LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[d31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[d25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemViaPointer
<LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObjectCaseSensitive
<LI><a href="#[d22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
<LI><a href="#[d1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
<LI><a href="#[d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
<LI><a href="#[d1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddObjectToObject
<LI><a href="#[d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddRawToObject
<LI><a href="#[d17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[d16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[d12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddFalseToObject
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddTrueToObject
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNullToObject
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[ce3]"></a>cJSON_SetNumberHelper</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>

<P><STRONG><a name="[cf3]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[cee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[9a7]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
</UL>

<P><STRONG><a name="[cf8]"></a>cJSON_Print</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
</UL>

<P><STRONG><a name="[cf9]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[cfa]"></a>cJSON_PrintBuffered</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[cfb]"></a>cJSON_PrintPreallocated</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[10c8]"></a>cJSON_GetArraySize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[cfc]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>

<P><STRONG><a name="[9a8]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_HasObjectItem
</UL>

<P><STRONG><a name="[cff]"></a>cJSON_GetObjectItemCaseSensitive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[d21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObjectCaseSensitive
</UL>

<P><STRONG><a name="[d00]"></a>cJSON_HasObjectItem</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[d04]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_AddItemToArray &rArr; add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
</UL>

<P><STRONG><a name="[d07]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cJSON_AddItemToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>

<P><STRONG><a name="[d08]"></a>cJSON_AddItemToObjectCS</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d09]"></a>cJSON_AddItemReferenceToArray</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
<LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[d0a]"></a>cJSON_AddItemReferenceToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[d0b]"></a>cJSON_CreateNull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNullToObject
</UL>

<P><STRONG><a name="[d0c]"></a>cJSON_AddNullToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNull
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d0d]"></a>cJSON_CreateTrue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddTrueToObject
</UL>

<P><STRONG><a name="[d0e]"></a>cJSON_AddTrueToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d0f]"></a>cJSON_CreateFalse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddFalseToObject
</UL>

<P><STRONG><a name="[d10]"></a>cJSON_AddFalseToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d11]"></a>cJSON_CreateBool</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
</UL>

<P><STRONG><a name="[d12]"></a>cJSON_AddBoolToObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d13]"></a>cJSON_CreateNumber</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_CreateNumber &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
<LI><a href="#[d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>

<P><STRONG><a name="[d14]"></a>cJSON_AddNumberToObject</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d15]"></a>cJSON_CreateString</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[d16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[d16]"></a>cJSON_AddStringToObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d17]"></a>cJSON_CreateRaw</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddRawToObject
</UL>

<P><STRONG><a name="[d18]"></a>cJSON_AddRawToObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d19]"></a>cJSON_CreateObject</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
<LI><a href="#[d1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddObjectToObject
</UL>

<P><STRONG><a name="[d1a]"></a>cJSON_AddObjectToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d1b]"></a>cJSON_CreateArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
</UL>

<P><STRONG><a name="[d1c]"></a>cJSON_AddArrayToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d1e]"></a>cJSON_DetachItemViaPointer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObjectCaseSensitive
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[d1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
</UL>

<P><STRONG><a name="[d1d]"></a>cJSON_DetachItemFromArray</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemViaPointer
<LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>
<BR>[Called By]<UL><LI><a href="#[d1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
</UL>

<P><STRONG><a name="[d1f]"></a>cJSON_DeleteItemFromArray</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
</UL>

<P><STRONG><a name="[d20]"></a>cJSON_DetachItemFromObject</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[d1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemViaPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
</UL>

<P><STRONG><a name="[d21]"></a>cJSON_DetachItemFromObjectCaseSensitive</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemViaPointer
<LI><a href="#[cff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItemCaseSensitive
</UL>
<BR>[Called By]<UL><LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObjectCaseSensitive
</UL>

<P><STRONG><a name="[d22]"></a>cJSON_DeleteItemFromObject</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
</UL>

<P><STRONG><a name="[d23]"></a>cJSON_DeleteItemFromObjectCaseSensitive</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObjectCaseSensitive
</UL>

<P><STRONG><a name="[d24]"></a>cJSON_InsertItemInArray</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
<LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>

<P><STRONG><a name="[d25]"></a>cJSON_ReplaceItemViaPointer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[d26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
</UL>

<P><STRONG><a name="[d26]"></a>cJSON_ReplaceItemInArray</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemViaPointer
<LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>

<P><STRONG><a name="[d28]"></a>cJSON_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
</UL>

<P><STRONG><a name="[d29]"></a>cJSON_ReplaceItemInObject</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
</UL>

<P><STRONG><a name="[d2a]"></a>cJSON_ReplaceItemInObjectCaseSensitive</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
</UL>

<P><STRONG><a name="[d2b]"></a>cJSON_CreateStringReference</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[d2c]"></a>cJSON_CreateObjectReference</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[d2d]"></a>cJSON_CreateArrayReference</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[d2e]"></a>cJSON_CreateIntArray</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[d2f]"></a>cJSON_CreateFloatArray</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[d30]"></a>cJSON_CreateDoubleArray</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[d31]"></a>cJSON_CreateStringArray</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[d32]"></a>cJSON_Duplicate</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
</UL>

<P><STRONG><a name="[10c9]"></a>cJSON_Minify</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[d34]"></a>cJSON_IsInvalid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
</UL>

<P><STRONG><a name="[10ca]"></a>cJSON_IsFalse</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10cb]"></a>cJSON_IsTrue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10cc]"></a>cJSON_IsBool</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10cd]"></a>cJSON_IsNull</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10ce]"></a>cJSON_IsNumber</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10cf]"></a>cJSON_IsArray</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10d0]"></a>cJSON_IsObject</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[10d1]"></a>cJSON_IsRaw</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[d33]"></a>cJSON_Compare</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsInvalid
<LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
</UL>

<P><STRONG><a name="[10d2]"></a>cJSON_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mem_get_avail_heapsize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 3]<UL><LI> platform.o(.data)
<LI> cjson.o(.data)
<LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(.data)
<LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[d35]"></a>zalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[89]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[d36]"></a>memalign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[8e]"></a>realloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = realloc &rArr; LOS_MemRealloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(.data)
<LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[d3a]"></a>app_data_report</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = app_data_report &rArr; create_json_data &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agent_tiny_demo.o(.text)
</UL>
<P><STRONG><a name="[d3c]"></a>creat_report_task</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, agent_tiny_demo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[234]"></a>agent_tiny_entry</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = agent_tiny_entry &rArr; atiny_mqtt_bind &rArr; connect_server &rArr; mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_init
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[232]"></a>agent_tiny_demo_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agent_tiny_demo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[10d3]"></a>airkiss_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, airkiss_log.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>airkiss_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = airkiss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_start
</UL>

<P><STRONG><a name="[51c]"></a>airkiss_recv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = airkiss_recv &rArr; __airkiss_recv &rArr; __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[d45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[51a]"></a>airkiss_get_result</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, airkiss_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
</UL>

<P><STRONG><a name="[51b]"></a>airkiss_change_channel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = airkiss_change_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_airkiss_change_channel
</UL>

<P><STRONG><a name="[d47]"></a>psAesInitKey</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mix2
<LI><a href="#[d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mix
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
</UL>

<P><STRONG><a name="[8a2]"></a>psAesInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psAesInit &rArr; psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[d47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesInit
</UL>

<P><STRONG><a name="[d4a]"></a>psAesEncryptBlock</STRONG> (Thumb, 612 bytes, Stack size 36 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = psAesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
</UL>

<P><STRONG><a name="[8a3]"></a>psAesEncrypt</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = psAesEncrypt &rArr; psAesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[d4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncryptBlock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesEncrypt
</UL>

<P><STRONG><a name="[d4b]"></a>psAesDecryptBlock</STRONG> (Thumb, 612 bytes, Stack size 36 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = psAesDecryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
</UL>

<P><STRONG><a name="[8a4]"></a>psAesDecrypt</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = psAesDecrypt &rArr; psAesDecryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecryptBlock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesDecrypt
</UL>

<P><STRONG><a name="[d4d]"></a>hostapd_clear_unicast_ps_bit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_clear_unicast_ps_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
</UL>

<P><STRONG><a name="[d4f]"></a>hostapd_clean_ps_multicast</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = hostapd_clean_ps_multicast &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
</UL>

<P><STRONG><a name="[d51]"></a>hostapd_alloc_bss_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hostapd_alloc_bss_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
</UL>

<P><STRONG><a name="[d52]"></a>hostapd_mac_comp_empty</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[d58]"></a>hostapd_mgmt_rx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = hostapd_mgmt_rx &rArr; ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[d59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d5c]"></a>hostapd_ps_pkt_timer_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = hostapd_ps_pkt_timer_start &rArr; tls_os_timer_start &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_net_up
</UL>

<P><STRONG><a name="[d5d]"></a>hostapd_ps_pkt_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = hostapd_ps_pkt_timer_stop &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_net_fail
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_net_down
</UL>

<P><STRONG><a name="[d5e]"></a>hostapd_event_handle</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = hostapd_event_handle &rArr; hostapd_mgmt_rx &rArr; ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[d55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
<LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
<LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
</UL>

<P><STRONG><a name="[ef2]"></a>hostapd_client_event</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_client_event
</UL>
<BR>[Called By]<UL><LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
</UL>

<P><STRONG><a name="[d69]"></a>hostapd_channel_check</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hostapd_channel_check &rArr; tls_wl_if_send_channel_switch &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[d6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_ds_ie
<LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[d6d]"></a>hostapd_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = hostapd_init &rArr; hostapd_ap_destroy &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[5ea]"></a>hostapd_get_mac</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_qmac_proc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[480]"></a>random_get_bytes</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetEntropy
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[fed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
</UL>

<P><STRONG><a name="[d5b]"></a>random_add_randomness</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = random_add_randomness &rArr; random_mix_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[8a0]"></a>Arc4Init</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Arc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Init
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[8a1]"></a>Arc4_skip</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Arc4_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Decrypt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Encrypt
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[d78]"></a>rc4_skip</STRONG> (Thumb, 44 bytes, Stack size 800 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4_skip
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[d79]"></a>rc4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rc4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[d7a]"></a>sha1</STRONG> (Thumb, 40 bytes, Stack size 128 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>

<P><STRONG><a name="[d7b]"></a>sha1_vector</STRONG> (Thumb, 60 bytes, Stack size 136 bytes, sha1_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>

<P><STRONG><a name="[915]"></a>SHA1Transform</STRONG> (Thumb, 4386 bytes, Stack size 104 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>

<P><STRONG><a name="[10d4]"></a>SHA1Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1_internal.o(.text), UNUSED)

<P><STRONG><a name="[d7c]"></a>SHA1Update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
</UL>

<P><STRONG><a name="[d7d]"></a>SHA1Final</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[914]"></a>sha256_compress</STRONG> (Thumb, 268 bytes, Stack size 308 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[456]"></a>sha256_done</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha256_done &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[458]"></a>sha256_process</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[457]"></a>wpa_sha256_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[d7e]"></a>sha256_vector</STRONG> (Thumb, 70 bytes, Stack size 144 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sha256_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
</UL>
<BR>[Called By]<UL><LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>

<P><STRONG><a name="[d7f]"></a>hmac_sha256_vector</STRONG> (Thumb, 196 bytes, Stack size 192 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[d80]"></a>hmac_sha256</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>

<P><STRONG><a name="[d81]"></a>sha256_prf</STRONG> (Thumb, 190 bytes, Stack size 120 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d82]"></a>eloop_cancel_timeout</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[d83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[db7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[ffa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>

<P><STRONG><a name="[d85]"></a>eloop_register_timeout</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = eloop_register_timeout &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[d86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
</UL>

<P><STRONG><a name="[d87]"></a>eloop_handle_timeout</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = eloop_handle_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[d83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[10d5]"></a>wpa_supplicant_state_txt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wpa_supplicant.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>eloop_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = eloop_timeout &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[d88]"></a>wpa_supplicant_cancel_connect_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>

<P><STRONG><a name="[d89]"></a>wpa_supplicant_cancel_auth_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_cancel_auth_timeout &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>

<P><STRONG><a name="[d8c]"></a>wpa_clear_keys</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[d91]"></a>wpa_supplicant_disassociate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[d93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_disassociate
</UL>

<P><STRONG><a name="[d94]"></a>wpa_supplicant_connect_timeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_connect_timeout &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[d95]"></a>wpa_supplicant_timeout</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_timeout &rArr; wpa_multi_bss_connect &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_multi_bss
<LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
<LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[176]"></a>wpa_supplicant_auth_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_auth_timer &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[d99]"></a>wpa_supplicant_req_auth_timeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_req_auth_timeout &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[177]"></a>wpa_supplicant_connect_timer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[d9a]"></a>wpa_supplicant_rx_eapol</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[d9e]"></a>wpa_supplicant_set_state</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_set_state &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_destroy_multi_bss
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[d8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[da3]"></a>wpa_supplicant_set_non_wpa_policy</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_set_non_wpa_policy &rArr; wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[da8]"></a>wpa_set_wep_keys</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = wpa_set_wep_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[da9]"></a>wpa_supplicant_set_suites</STRONG> (Thumb, 502 bytes, Stack size 112 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk
<LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[db1]"></a>wpa_supplicant_deauthenticate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
</UL>

<P><STRONG><a name="[db3]"></a>wpa_supplicant_associate</STRONG> (Thumb, 396 bytes, Stack size 344 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
</UL>

<P><STRONG><a name="[10d6]"></a>wpa_config_set_network_defaults</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_supplicant.o(.text), UNUSED)

<P><STRONG><a name="[db5]"></a>wpa_config_update_psk</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
</UL>

<P><STRONG><a name="[db6]"></a>wpa_supplicant_cleanup</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_cleanup &rArr; wpa_supplicant_set_state &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[db7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
<LI><a href="#[db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[dba]"></a>wpa_supplicant_reload_configs</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_reload_configs &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ps_mode
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[dbd]"></a>supplicant_send_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = supplicant_send_event &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[d86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mac_wdg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_failed_softap
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
</UL>

<P><STRONG><a name="[174]"></a>supplicant_ps_pkt_timer_expire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = supplicant_ps_pkt_timer_expire &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>supplicant_event_rx_mgmt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = supplicant_event_rx_mgmt &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>supplicant_event_mic_err</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_mic_err &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>supplicant_event_rx_from_unknown</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_rx_from_unknown &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>supplicant_event_net_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = supplicant_event_net_up &rArr; hostapd_ps_pkt_timer_start &rArr; tls_os_timer_start &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>supplicant_event_net_down</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = supplicant_event_net_down &rArr; hostapd_ps_pkt_timer_stop &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>supplicant_event_net_fail</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = supplicant_event_net_fail &rArr; hostapd_ps_pkt_timer_stop &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[dbe]"></a>supplicant_event_reload_config4softap</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_reload_config4softap &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[dbf]"></a>supplicant_event_disconnect_softap</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_disconnect_softap &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
</UL>

<P><STRONG><a name="[dc0]"></a>supplicant_event_failed_softap</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_failed_softap &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[91]"></a>supplicant_event_scan_completed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = supplicant_event_scan_completed &rArr; wpa_supplicant_set_state &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[dc1]"></a>supplicant_event_disconnect_network</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_disconnect_network &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
</UL>

<P><STRONG><a name="[90]"></a>supplicant_event_disassoc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = supplicant_event_disassoc &rArr; wpa_supplicant_event_disassoc &rArr; wpa_multi_bss_connect &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>supplicant_event_assoc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = supplicant_event_assoc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>supplicant_event_rx_eapol</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = supplicant_event_rx_eapol &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>supplicant_event_mac_wdg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_mac_wdg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>supplicant_event_update_stat</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[dc3]"></a>supplicant_event_reload_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_reload_config &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
</UL>

<P><STRONG><a name="[dc4]"></a>wpa_supplicant_init_default_configs</STRONG> (Thumb, 276 bytes, Stack size 896 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[dc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[dc7]"></a>tls_supplicant_timer_task</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_supplicant_timer_task &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[dcf]"></a>tls_supplicant_task</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = tls_supplicant_task &rArr; hostapd_event_handle &rArr; hostapd_mgmt_rx &rArr; ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[266]"></a>wpa_supplicant_init</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_init &rArr; wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[e65]"></a>wpa_cipher2host</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[4ba]"></a>wpa_supplicant_get_mac</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmac_proc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>

<P><STRONG><a name="[5f2]"></a>wpa_supplicant_set_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
</UL>

<P><STRONG><a name="[e64]"></a>tls_get_wpa_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
</UL>

<P><STRONG><a name="[84a]"></a>wpa_supplicant_get_bssid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[dd4]"></a>tls_get_ieee80211_if_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_isr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mac_isr
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[e1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_channel_info_updata
<LI><a href="#[df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
<LI><a href="#[dd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_pm_isr
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[ad]"></a>tls_wl_mac_isr</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_wl_mac_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>tls_wl_data_tx_isr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_wl_data_tx_isr &rArr; tls_wl_litepoint_test &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_litepoint_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>tls_wl_mgmt_tx_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>tls_wl_rx_isr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tls_wl_rx_isr &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[75c]"></a>tls_wl_get_isr_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>

<P><STRONG><a name="[dd6]"></a>tls_wl_pm_isr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, tls_wl_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>

<P><STRONG><a name="[de1]"></a>standby_timeout</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = standby_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[dd9]"></a>tls_wl_power_save_awake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tls_wl_power_save_awake &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[264]"></a>tls_wl_init</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tls_wl_init &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_init
<LI><a href="#[ddb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_init
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[de3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_rx
<LI><a href="#[de2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_mac_int
<LI><a href="#[ddd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_init
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[de4]"></a>ieee80211_hw_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
</UL>

<P><STRONG><a name="[dce]"></a>tls_wl_mem_reinit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_get_state
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_special_mode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_special_mode
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_mode
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_init
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[de3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_rx
<LI><a href="#[de2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_mac_int
<LI><a href="#[de7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_disble_rx
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_disable_mac_int
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
<LI><a href="#[de9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_state
<LI><a href="#[de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_listen_mode
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_failed_softap
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[dee]"></a>ieee80211_bss_info_change_notify</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[f63]"></a>ieee80211_reset_erp_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
</UL>

<P><STRONG><a name="[10d7]"></a>tls_wl_print_stats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_core.o(.text), UNUSED)

<P><STRONG><a name="[10d8]"></a>ieee80211_disconnect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_core.o(.text), UNUSED)

<P><STRONG><a name="[df0]"></a>ieee80211_change_iface</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ieee80211_change_iface &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[d73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
</UL>

<P><STRONG><a name="[df1]"></a>tls_wl_power_save</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_power_save &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon_proc_dtim
</UL>

<P><STRONG><a name="[5f1]"></a>ieee80211_get_tx_gain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_rate_get_proc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_rate_set_proc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_tx_gain_max
</UL>

<P><STRONG><a name="[840]"></a>tls_get_wif_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_ip_rx_callback
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_data_rx_callback
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>

<P><STRONG><a name="[df2]"></a>tls_wl_cleanup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = tls_wl_cleanup &rArr; tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[df3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
</UL>

<P><STRONG><a name="[df4]"></a>tls_wl_mem_default</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_wl_mem_default
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_mem_cfg
</UL>

<P><STRONG><a name="[262]"></a>tls_wifi_mem_cfg</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_wifi_mem_cfg &rArr; tls_wl_tx_mem_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_mem_init
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_mem_init
<LI><a href="#[df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_default
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[de2]"></a>tls_wl_hw_enable_mac_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[de6]"></a>tls_wl_hw_disable_mac_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[de3]"></a>tls_wl_hw_enable_rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[de7]"></a>tls_wl_hw_disble_rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[dda]"></a>tls_wl_hw_wake_up</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
<LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save_awake
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[fb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>

<P><STRONG><a name="[da2]"></a>tls_wl_hw_sleep</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[df8]"></a>tls_wl_change_chanel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_wl_change_chanel &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_change_chanel
</UL>

<P><STRONG><a name="[4e8]"></a>tls_wl_change_channel_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_change_chanel
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>

<P><STRONG><a name="[ddc]"></a>tls_wl_hw_init</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[dfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rc_init
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[f88]"></a>tls_wl_hw_reset_tsf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[de5]"></a>tls_wl_hw_config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>

<P><STRONG><a name="[def]"></a>tls_wl_hw_bss_info_changed</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[dfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
</UL>

<P><STRONG><a name="[e04]"></a>tls_sec_find_hw_idx</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_sec_find_hw_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>

<P><STRONG><a name="[e01]"></a>hed_sec_set_mac_addr</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[e03]"></a>hed_sec_clr_mac_addr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_del_multicast_key
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
</UL>

<P><STRONG><a name="[dff]"></a>hed_hw_set_multicast_key</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
</UL>

<P><STRONG><a name="[878]"></a>tls_hw_set_multicast_key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_hw_set_multicast_key &rArr; hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_igmp_mac_filter
</UL>

<P><STRONG><a name="[e02]"></a>hed_hw_del_multicast_key</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hed_hw_del_multicast_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>

<P><STRONG><a name="[879]"></a>tls_hw_del_multicast_key</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_hw_del_multicast_key &rArr; hed_hw_del_multicast_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_del_multicast_key
<LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sec_find_hw_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_igmp_mac_filter
</UL>

<P><STRONG><a name="[ded]"></a>tls_wl_hw_set_key</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_wl_hw_set_key &rArr; hed_hw_set_ccmp_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
</UL>

<P><STRONG><a name="[dec]"></a>tls_wl_hw_del_key</STRONG> (Thumb, 342 bytes, Stack size 28 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tls_wl_hw_del_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
</UL>

<P><STRONG><a name="[d73]"></a>tls_wl_if_set_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_set_mode &rArr; ieee80211_change_iface &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_mode
</UL>

<P><STRONG><a name="[f34]"></a>tls_wl_if_clear_mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
</UL>

<P><STRONG><a name="[e0d]"></a>tls_wl_if_get_scan_res</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rc_get_max_rate_code
<LI><a href="#[e0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_vendor_ie
<LI><a href="#[e0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get_ie
<LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
</UL>

<P><STRONG><a name="[d97]"></a>tls_wl_if_sta_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[ecd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_flush
</UL>

<P><STRONG><a name="[e13]"></a>tls_wl_if_sta_deauth</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sta_deauth &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>

<P><STRONG><a name="[e15]"></a>tls_wl_if_sta_disassoc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sta_disassoc &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
</UL>

<P><STRONG><a name="[1006]"></a>tls_wl_if_set_tx_queue_params</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_if_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[ec6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_tx_queue_params
</UL>

<P><STRONG><a name="[d6f]"></a>tls_wl_if_set_sta_flags</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_set_sta_flags &rArr; sta_info_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
</UL>

<P><STRONG><a name="[e18]"></a>tls_wl_if_send_mlme</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
</UL>

<P><STRONG><a name="[d6c]"></a>tls_wl_if_send_channel_switch</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_send_channel_switch &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
</UL>

<P><STRONG><a name="[e1a]"></a>tls_wl_if_switch_channel_width</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e1b]"></a>tls_wl_if_channel_info_updata</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_if_channel_info_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[f33]"></a>tls_wl_if_set_bssid</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wl_if_set_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
</UL>

<P><STRONG><a name="[e1c]"></a>tls_wl_if_set_rate_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wl_if_set_rate_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
</UL>
<BR>[Called By]<UL><LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[e1d]"></a>tls_wl_if_set_beacon</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[e1e]"></a>tls_wl_if_del_beacon</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_del_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
</UL>

<P><STRONG><a name="[e1f]"></a>tls_wl_if_scan</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
</UL>

<P><STRONG><a name="[e22]"></a>tls_wl_if_set_ssid</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
</UL>

<P><STRONG><a name="[e25]"></a>tls_wl_if_set_freq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>

<P><STRONG><a name="[f31]"></a>tls_wl_if_set_auth</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_wl_if_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
</UL>

<P><STRONG><a name="[e27]"></a>tls_wl_if_remove_key</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_del_key
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
</UL>

<P><STRONG><a name="[e29]"></a>tls_wl_if_add_key</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>

<P><STRONG><a name="[841]"></a>tls_wl_if_xmit</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_eapol
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
</UL>

<P><STRONG><a name="[e2c]"></a>tls_wl_if_send_eapol</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>

<P><STRONG><a name="[10d9]"></a>tls_wl_if_get_rates</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)

<P><STRONG><a name="[e2d]"></a>tls_wl_if_sta_add</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sta_add &rArr; ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
</UL>

<P><STRONG><a name="[e30]"></a>tls_wl_if_sta_remove</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
</UL>

<P><STRONG><a name="[e32]"></a>tls_wl_if_get_inact_sec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_get_inact_sec &rArr; sta_info_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_get_inact_sec
</UL>

<P><STRONG><a name="[dcd]"></a>tls_wl_if_disconnect</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_disconnect &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[e34]"></a>tls_wl_if_set_max_rate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
</UL>

<P><STRONG><a name="[10da]"></a>tls_wl_if_get_max_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)

<P><STRONG><a name="[f36]"></a>tls_wl_if_set_adhoc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[dbc]"></a>tls_wl_if_set_ps_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
</UL>

<P><STRONG><a name="[52e]"></a>tls_wl_if_ps</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_ps &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[52f]"></a>tls_wl_if_standby</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_standby &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[530]"></a>tls_wl_if_sleep</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_sleep &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[d9f]"></a>tls_wl_if_set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[e6c]"></a>tls_wl_if_get_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[e6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_errno
</UL>

<P><STRONG><a name="[e35]"></a>tls_wl_if_perror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_perror
</UL>

<P><STRONG><a name="[e6f]"></a>tls_wl_if_get_errinfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_errinfo
</UL>

<P><STRONG><a name="[5f0]"></a>rf_spi_write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfw_proc
<LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
<LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_stop
<LI><a href="#[e3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel1
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_reinit
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
<LI><a href="#[fc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[59e]"></a>rf_spi_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_spi_read &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfr_proc
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[10db]"></a>rf_spi_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_rf.o(.text), UNUSED)

<P><STRONG><a name="[df9]"></a>delay_us</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_reinit
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[e37]"></a>wm_rf_band_switch</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wm_rf_band_switch &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
</UL>

<P><STRONG><a name="[17d]"></a>wm_rf_set_channel</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = wm_rf_set_channel &rArr; wm_rf_band_switch &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_reinit
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_hw.o(.text)
</UL>
<P><STRONG><a name="[df7]"></a>wm_rf_reinit</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = wm_rf_reinit &rArr; wm_rf_set_channel &rArr; wm_rf_band_switch &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>

<P><STRONG><a name="[dfc]"></a>wm_rf_init</STRONG> (Thumb, 738 bytes, Stack size 48 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = wm_rf_init &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_printf
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
<LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_loleakage_cal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[e3a]"></a>wm_rf_set_channel1</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tls_wl_rf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
</UL>

<P><STRONG><a name="[e3b]"></a>tls_tx_wave_stop</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_tx_wave_stop &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
</UL>

<P><STRONG><a name="[5f9]"></a>tls_tx_wave_start</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tls_tx_wave_start &rArr; tls_tx_wave_stop &rArr; rf_spi_write &rArr; tls_wl_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_sin
</UL>

<P><STRONG><a name="[5fa]"></a>tls_rx_data_from_adc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tls_rx_data_from_adc &rArr; wm_printf &rArr; wm_vprintf &rArr; IP2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_printf
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_wave
</UL>

<P><STRONG><a name="[dd5]"></a>tls_wl_litepoint_test</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_wl_litepoint_test &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_data_tx_isr
</UL>

<P><STRONG><a name="[df5]"></a>tls_wl_tx_mem_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_tx_mem_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_mem_cfg
</UL>

<P><STRONG><a name="[ddf]"></a>tls_wl_tx_init</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tls_wl_tx_init &rArr; tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[e3d]"></a>ieee80211_set_qos_hdr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_set_qos_hdr &rArr; ieee80211_get_qos_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e3f]"></a>ieee80211_tx_encrypt_add_iv</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ieee80211_tx_encrypt_add_iv &rArr; ieee80211_wep_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_get_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[e41]"></a>ieee80211_tx_rate_ctrl</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_rate
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e44]"></a>ieee80211_tx_michael_mic_add</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ieee80211_tx_michael_mic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_block
<LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e2b]"></a>tls_wl_if_tx</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
</UL>

<P><STRONG><a name="[876]"></a>tls_wifi_buffer_acquire</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_wifi_buffer_acquire &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[877]"></a>tls_wifi_buffer_release</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_wifi_buffer_release &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[e50]"></a>ieee80211_send_data</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, tls_wl_tx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[e52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power2
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
</UL>

<P><STRONG><a name="[4e3]"></a>tls_wifi_data_recv_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[10dc]"></a>tls_wifi_data_ext_recv_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[883]"></a>tls_wifi_status_change_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[884]"></a>tls_ethernet_data_rx_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_ethernet_data_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[885]"></a>tls_ethernet_ip_rx_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_ethernet_ip_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[4e4]"></a>tls_wifi_scan_result_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
</UL>

<P><STRONG><a name="[503]"></a>tls_wifi_scan</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wifi_scan &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
</UL>

<P><STRONG><a name="[e53]"></a>tls_wifi_passive_scan</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[500]"></a>tls_wifi_get_scan_rslt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
</UL>

<P><STRONG><a name="[506]"></a>tls_wifi_set_listen_mode</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_wifi_set_listen_mode &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[de8]"></a>tls_wifi_get_listen_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
</UL>

<P><STRONG><a name="[4e6]"></a>tls_wifi_set_special_mode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tls_wifi_set_special_mode &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_callback_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[4f6]"></a>tls_wifi_get_special_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_polling_check
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[10dd]"></a>tls_filter_mcast_mac</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[10de]"></a>tls_wifi_set_bcast_mac_filter</STRONG> (Thumb, 334 bytes, Stack size 28 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[10df]"></a>tls_wifi_restore_bcast_mac_filter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>tls_wifi_change_chanel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_wifi_change_chanel &rArr; tls_wl_change_chanel &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
</UL>

<P><STRONG><a name="[e54]"></a>wpa_update_ssid</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[e55]"></a>wpa_update_ssid2</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = wpa_update_ssid2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[e57]"></a>wpa_update_encrypt_cfg2</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_update_encrypt_cfg2
</UL>
<BR>[Called By]<UL><LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
</UL>

<P><STRONG><a name="[e56]"></a>wpa_update_encrypt2</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wpa_update_encrypt2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[e58]"></a>wpa_update_key_cfg2</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wpa_update_key_cfg2 &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
</UL>

<P><STRONG><a name="[e59]"></a>wpa_update_key_4_ap2</STRONG> (Thumb, 230 bytes, Stack size 136 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[e5a]"></a>wpa_update_ip_info2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wpa_update_ip_info2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[e5b]"></a>wpa_update_dnsname</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wpa_update_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[e5c]"></a>wpa_update_bssid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wpa_update_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
</UL>

<P><STRONG><a name="[e5e]"></a>wpa_update_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wpa_update_mode &rArr; __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
</UL>

<P><STRONG><a name="[e5f]"></a>wpa_update_key</STRONG> (Thumb, 136 bytes, Stack size 160 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
</UL>

<P><STRONG><a name="[dc5]"></a>wpa_update_encrypt_cfg</STRONG> (Thumb, 158 bytes, Stack size 28 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wpa_update_encrypt_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
</UL>

<P><STRONG><a name="[e60]"></a>wpa_update_encrypt</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[dc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[dc6]"></a>wpa_update_key_cfg</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wpa_update_key_cfg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
</UL>

<P><STRONG><a name="[e61]"></a>wpa_update_key_4_ap</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e62]"></a>wpa_update_ip_info</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
</UL>

<P><STRONG><a name="[22e]"></a>tls_wifi_connect</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[4da]"></a>tls_wifi_connect_by_bssid</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tls_wifi_connect_by_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[28e]"></a>tls_wifi_connect_by_ssid_bssid</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[de9]"></a>tls_wifi_get_state</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[28d]"></a>tls_wifi_auto_connect_flag</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_update_autoflag
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[225]"></a>tls_wifi_disconnect</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[28b]"></a>tls_wifi_softap_create</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[de9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_state
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_dnsname
<LI><a href="#[e5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info2
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[227]"></a>tls_wifi_softap_destroy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wifi_softap_destroy &rArr; supplicant_event_disconnect_softap &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[4a6]"></a>tls_wifi_get_authed_sta_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wifi_get_authed_sta_info &rArr; ap_get_authed_sta
</UL>
<BR>[Calls]<UL><LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_authed_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
</UL>

<P><STRONG><a name="[29d]"></a>tls_wifi_softap_get_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[10e0]"></a>tls_wifi_softap_client_event_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[10e1]"></a>tls_wifi_ibss_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[5be]"></a>tls_wifi_get_current_bss</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_wifi_get_current_bss &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wpa_data
<LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher2host
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
</UL>

<P><STRONG><a name="[29c]"></a>tls_wifi_set_psflag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
</UL>

<P><STRONG><a name="[10e2]"></a>tls_wifi_get_psflag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>tls_wifi_send_oneshotdata</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_wifi_send_oneshotdata &rArr; ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
</UL>

<P><STRONG><a name="[e67]"></a>tls_wifi_get_tx_gain_max</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
</UL>

<P><STRONG><a name="[e68]"></a>tls_wifi_send_mgmt</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e6a]"></a>tls_wifi_send_data</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_tx_gain_max
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e6b]"></a>tls_wifi_get_errno</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errno
</UL>

<P><STRONG><a name="[e6d]"></a>tls_wifi_perror</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_perror
</UL>

<P><STRONG><a name="[e6e]"></a>tls_wifi_get_errinfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errinfo
</UL>

<P><STRONG><a name="[e73]"></a>decrypt_data</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = decrypt_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[e71]"></a>decode_data</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[e72]"></a>tls_wifi_oneshotinfo_resolve_probereq</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[e73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_data
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
</UL>

<P><STRONG><a name="[10e3]"></a>tls_wifi_get_oneshot_chan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot_api.o(.text), UNUSED)

<P><STRONG><a name="[e74]"></a>tls_wifi_oneshot_resolve_info</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc8
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[e76]"></a>tls_wifi_pbreq_encry_data</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_wifi_pbreq_encry_data &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[e77]"></a>tls_wifi_pbreq_recv</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tls_wifi_pbreq_recv &rArr; tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
</UL>
<BR>[Called By]<UL><LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
</UL>

<P><STRONG><a name="[509]"></a>tls_wifi_decode_new_oneshot_data</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_wifi_decode_new_oneshot_data &rArr; tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[5f4]"></a>tls_litepoint_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tls_litepoint_start &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
</UL>

<P><STRONG><a name="[e3c]"></a>tls_tx_send_litepoint</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_tx_send_litepoint &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_type
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_litepoint_test
</UL>

<P><STRONG><a name="[5f5]"></a>tls_set_test_channel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tls_set_test_channel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
</UL>

<P><STRONG><a name="[10e4]"></a>tls_tx_litepoint_param_update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, litepoint.o(.text), UNUSED)

<P><STRONG><a name="[5f6]"></a>tls_tx_litepoint_test_start</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tls_tx_litepoint_test_start &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_bytes
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_stop
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
</UL>

<P><STRONG><a name="[5f7]"></a>tls_txrx_litepoint_test_stop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = tls_txrx_litepoint_test_stop &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstp_proc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstp_proc
</UL>

<P><STRONG><a name="[e79]"></a>tls_txrx_litepoint_clear_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, litepoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[59c]"></a>tls_tx_litepoint_test_get_totalsnd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, litepoint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[5f8]"></a>tls_rx_litepoint_test_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tls_rx_litepoint_test_start &rArr; tls_set_test_channel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
</UL>

<P><STRONG><a name="[59d]"></a>tls_rx_litepoint_test_result</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_rx_litepoint_test_result
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[59f]"></a>tls_rx_litepoint_pwr_result</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_rx_litepoint_pwr_result
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[10e5]"></a>tls_rx_litepoint_test_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, litepoint.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>mp_reverse</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[449]"></a>mp_clamp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[47d]"></a>mp_grow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[43b]"></a>wpa_mp_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wpa_mp_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[437]"></a>mp_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = mp_clear &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear_multi
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[e7e]"></a>mp_cmp_mag</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[e7d]"></a>mp_add</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mp_add &rArr; s_mp_add &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e7f]"></a>mp_sub</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mp_sub &rArr; s_mp_add &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e83]"></a>mp_exch</STRONG> (Thumb, 16 bytes, Stack size 20 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[e80]"></a>mp_init_size</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mp_init_size &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[e85]"></a>mp_clear_multi</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e87]"></a>mp_zero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
</UL>

<P><STRONG><a name="[e86]"></a>mp_rshd</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_rshd &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[440]"></a>mp_copy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[e88]"></a>mp_mod_2d</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[e89]"></a>mp_div_2d</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[477]"></a>mp_cmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e8a]"></a>mp_lshd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mp_lshd &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
</UL>

<P><STRONG><a name="[e8b]"></a>mp_mul_2d</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e8c]"></a>mp_abs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[43c]"></a>mp_count_bits</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[43d]"></a>mp_set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_set &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[e8d]"></a>mp_init_multi</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[e8e]"></a>mp_div</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear_multi
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[e8f]"></a>mp_mod</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[43f]"></a>mp_mulmod</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[e91]"></a>mp_sqr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[e92]"></a>mp_reduce_2k_l</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416 + Unknown Stack Size
<LI>Call Chain = mp_reduce_2k_l &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libtommath.o(.text)
</UL>
<P><STRONG><a name="[e93]"></a>mp_2expt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
</UL>

<P><STRONG><a name="[e94]"></a>mp_reduce_2k_setup_l</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[e98]"></a>mp_cmp_d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[e95]"></a>mp_init_copy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mp_init_copy &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[e96]"></a>mp_reduce</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408 + Unknown Stack Size
<LI>Call Chain = mp_reduce &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libtommath.o(.text)
</UL>
<P><STRONG><a name="[e99]"></a>mp_reduce_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[43e]"></a>mp_exptmod</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[466]"></a>mp_unsigned_bin_size</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
</UL>

<P><STRONG><a name="[45e]"></a>mp_init_for_read_unsigned_bin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>

<P><STRONG><a name="[436]"></a>mp_read_unsigned_bin</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>

<P><STRONG><a name="[439]"></a>mp_to_unsigned_bin_nr</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
</UL>

<P><STRONG><a name="[478]"></a>mp_to_unsigned_bin</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reverse
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[e9b]"></a>mp_karatsuba_sqr</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[e9c]"></a>mp_karatsuba_mul</STRONG> (Thumb, 444 bytes, Stack size 120 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[e9d]"></a>wpa_bss_remove</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = wpa_bss_remove &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[e9f]"></a>wpa_bss_copy_res</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
</UL>

<P><STRONG><a name="[e9e]"></a>wpa_bss_add</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_bss_add &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[db8]"></a>wpa_bss_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = wpa_bss_deinit &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[dab]"></a>wpa_bss_get_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bit_rates
<LI><a href="#[ea3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_max_rate
</UL>

<P><STRONG><a name="[daa]"></a>wpa_bss_get_vendor_ie</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_bss_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[ea0]"></a>wpa_bss_get_vendor_ie_multi</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[ea3]"></a>wpa_bss_get_max_rate</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>

<P><STRONG><a name="[ea4]"></a>wpa_bss_get_bit_rates</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>

<P><STRONG><a name="[ea5]"></a>wpa_supplicant_connect</STRONG> (Thumb, 72 bytes, Stack size 184 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
</UL>

<P><STRONG><a name="[dcb]"></a>wpa_supplicant_event_assoc</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_event_assoc &rArr; wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[ea9]"></a>wpa_supplicant_update_key_wep</STRONG> (Thumb, 388 bytes, Stack size 240 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_update_key_wep &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[eaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2digit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[eac]"></a>wpa_supplicant_update_key_wpa</STRONG> (Thumb, 326 bytes, Stack size 240 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_update_key_wpa &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[eaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2digit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[eb4]"></a>wpa_multi_bss_updte_cfg</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = wpa_multi_bss_updte_cfg &rArr; wpa_scan_res_match &rArr; wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[d98]"></a>wpa_multi_bss_connect</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = wpa_multi_bss_connect &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[d8b]"></a>wpa_del_multi_bss</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = wpa_del_multi_bss &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[eb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[da1]"></a>wpa_destroy_multi_bss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = wpa_destroy_multi_bss &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[eb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[d8f]"></a>wpa_supplicant_mark_disassoc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_mark_disassoc &rArr; wpa_supplicant_set_state &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
</UL>

<P><STRONG><a name="[dc2]"></a>wpa_supplicant_event_disassoc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_event_disassoc &rArr; wpa_multi_bss_connect &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
</UL>

<P><STRONG><a name="[dca]"></a>wpa_supplicant_event_scan_results</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errno
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[ebb]"></a>hostapd_setup_wpa_psk</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = hostapd_setup_wpa_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[d55]"></a>hostapd_interface_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = hostapd_interface_free &rArr; hostapd_clean_ps_multicast &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[ec3]"></a>hostapd_rate_found</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hostapd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
</UL>

<P><STRONG><a name="[ec2]"></a>hostapd_prepare_rates</STRONG> (Thumb, 168 bytes, Stack size 144 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_prepare_rates &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ec3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_rate_found
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[d74]"></a>hostapd_setup_interface</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[ec6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_tx_queue_params
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
<LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
<LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
</UL>

<P><STRONG><a name="[d54]"></a>hostapd_interface_deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[ec9]"></a>hostapd_new_assoc_sta</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = hostapd_new_assoc_sta &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[ecf]"></a>ieee802_1x_set_sta_authorized</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ieee802_1x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ed1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[d65]"></a>ieee802_1x_receive</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ieee802_1x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = ieee802_1x_receive &rArr; wpa_receive &rArr; wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[ed3]"></a>hostapd_notif_assoc</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = hostapd_notif_assoc &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[ee3]"></a>hostapd_eid_supp_rates</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hostapd_eid_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[ee4]"></a>hostapd_eid_ext_supp_rates</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hostapd_eid_ext_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[ee2]"></a>hostapd_own_capab_info</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ieee802_11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[ede]"></a>ieee802_11_print_ssid</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee802_11_print_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[d5a]"></a>ieee802_11_mgmt</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
</UL>

<P><STRONG><a name="[d66]"></a>ieee802_11_rx_from_unknown</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ieee802_11_rx_from_unknown &rArr; hostapd_drv_sta_disassoc &rArr; tls_wl_if_sta_disassoc &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[ed4]"></a>hostapd_parse_elems</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ieee802_11_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hostapd_parse_elems &rArr; ieee802_11_parse_vendor_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_vendor_specific
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[10e6]"></a>ieee802_11_ie_count</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ieee802_11_common.o(.text), UNUSED)

<P><STRONG><a name="[ef5]"></a>ieee802_11_vendor_ie_concat</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ieee802_11_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d59]"></a>get_hdr_bssid</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ieee802_11_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
</UL>

<P><STRONG><a name="[ef6]"></a>os_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = os_zalloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>

<P><STRONG><a name="[e7a]"></a>os_realloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
</UL>

<P><STRONG><a name="[ef7]"></a>os_strdup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[dd3]"></a>wpa_supplicant_req_scan</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_req_scan &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[dcc]"></a>wpa_supplicant_scan</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_scan &rArr; wpa_drv_scan &rArr; tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[da0]"></a>wpa_supplicant_cancel_scan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_cancel_scan &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[175]"></a>wpa_supplicant_scan_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_scan_timer &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[eae]"></a>wpa_scan_get_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_scan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[eaf]"></a>wpa_scan_get_vendor_ie</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_scan_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[ef9]"></a>wpa_scan_get_vendor_ie_multi</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[efa]"></a>wpa_scan_results_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[efb]"></a>hmac_sha1_vector</STRONG> (Thumb, 210 bytes, Stack size 184 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
</UL>

<P><STRONG><a name="[d77]"></a>hmac_sha1</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
</UL>

<P><STRONG><a name="[efc]"></a>sha1_prf</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[fed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[db0]"></a>pbkdf2_sha1</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, sha1-pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
</UL>

<P><STRONG><a name="[e63]"></a>ap_get_authed_sta</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ap_get_authed_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
</UL>

<P><STRONG><a name="[10e7]"></a>ap_for_each_sta</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text), UNUSED)

<P><STRONG><a name="[d62]"></a>ap_get_sta</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ap_get_sta &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[f03]"></a>ap_sta_hash_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
</UL>

<P><STRONG><a name="[ed0]"></a>ap_sta_set_authorized</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[f00]"></a>ap_handle_timer</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ap_handle_timer &rArr; mlme_disassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_get_inact_sec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostapd_sta_info.o(.text)
</UL>
<P><STRONG><a name="[ed9]"></a>ap_free_sta</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[ece]"></a>hostapd_free_stas</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = hostapd_free_stas &rArr; mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[ed5]"></a>ap_sta_add</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ap_sta_add &rArr; eloop_register_timeout &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_hash_add
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[ef0]"></a>ap_sta_disconnect</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[fe5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
</UL>

<P><STRONG><a name="[f05]"></a>ieee80211_tkip_countermeasures_deinit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = ieee80211_tkip_countermeasures_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[d67]"></a>michael_mic_failure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_local_mic_failure_report
<LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_michaelmicfailure_indication
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[ffd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
</UL>

<P><STRONG><a name="[f0b]"></a>wpa_eapol_key_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
</UL>

<P><STRONG><a name="[f0f]"></a>wpa_sm_key_request</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rekey_ptk
</UL>

<P><STRONG><a name="[f12]"></a>wpa_supplicant_send_2_of_4</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_send_2_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[f1c]"></a>wpa_supplicant_send_4_of_4</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_send_4_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[d9d]"></a>wpa_sm_rx_eapol</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = wpa_sm_rx_eapol &rArr; wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[da6]"></a>wpa_sm_set_assoc_wpa_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[d90]"></a>wpa_sm_set_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_sm_set_config &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>

<P><STRONG><a name="[f2c]"></a>wpa_sm_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wpa_sm_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
</UL>

<P><STRONG><a name="[db7]"></a>wpa_sm_deinit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = wpa_sm_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[dad]"></a>wpa_sm_parse_own_wpa_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_sm_parse_own_wpa_ie &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[daf]"></a>wpa_sm_set_pmk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_set_pmk &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[da7]"></a>wpa_sm_set_param</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_sm_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
</UL>

<P><STRONG><a name="[dd2]"></a>wpa_sm_set_own_addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[da4]"></a>wpa_sm_set_ap_wpa_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_ap_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[da5]"></a>wpa_sm_set_ap_rsn_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_ap_rsn_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[dae]"></a>wpa_sm_set_assoc_wpa_ie_default</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_assoc_wpa_ie_default &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[ea8]"></a>wpa_sm_notify_assoc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[d96]"></a>wpa_sm_notify_disassoc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_notify_disassoc
</UL>
<BR>[Calls]<UL><LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[ef8]"></a>wpa_drv_scan</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = wpa_drv_scan &rArr; tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[f2f]"></a>wpa_drv_set_freq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wpa_drv_set_freq &rArr; tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[f30]"></a>wpa_drv_set_auth_alg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_drv_set_auth_alg &rArr; tls_wl_if_set_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[f32]"></a>wpa_drv_set_auth_params</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_drv_set_auth_params &rArr; tls_wl_if_set_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[dea]"></a>wpa_drv_set_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = wpa_drv_set_mode &rArr; tls_wl_if_set_mode &rArr; ieee80211_change_iface &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[d73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[ec4]"></a>wpa_drv_set_bssid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_drv_set_bssid &rArr; tls_wl_if_set_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[d56]"></a>wpa_drv_deinit_ap</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wpa_drv_deinit_ap &rArr; tls_wl_if_del_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[e1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_clear_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[db9]"></a>wpa_drv_cleanup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = wpa_drv_cleanup &rArr; tls_wl_cleanup &rArr; tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_clear_mode
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[f35]"></a>wpa_drv_set_ssid</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[db4]"></a>wpa_drv_associate</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wpa_drv_associate &rArr; wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_adhoc
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_mode
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ps_mode
<LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher2drv
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[db2]"></a>wpa_drv_deauthenticate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wpa_drv_deauthenticate &rArr; tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
<LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>

<P><STRONG><a name="[f38]"></a>wpa_drv_send_eapol</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_eapol
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[fdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_hapd_send_eapol
</UL>

<P><STRONG><a name="[d93]"></a>wpa_drv_disassociate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[d8d]"></a>wpa_drv_set_key</STRONG> (Thumb, 192 bytes, Stack size 144 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>

<P><STRONG><a name="[ebe]"></a>wpa_drv_remove_key</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = wpa_drv_remove_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[dac]"></a>wpa_parse_wpa_ie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[f2d]"></a>wpa_gen_wpa_ie</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_gen_wpa_ie &rArr; wpa_gen_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn
<LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
</UL>

<P><STRONG><a name="[f14]"></a>wpa_supplicant_parse_ies</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[ea2]"></a>wpabuf_put</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpabuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>

<P><STRONG><a name="[ea1]"></a>wpabuf_alloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[ef5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>

<P><STRONG><a name="[f3f]"></a>wpabuf_resize</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wpabuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f40]"></a>wpabuf_dup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpabuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>

<P><STRONG><a name="[d9b]"></a>wpabuf_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = wpabuf_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>

<P><STRONG><a name="[d9c]"></a>wpabuf_alloc_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wpabuf_alloc_copy &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[f43]"></a>wpabuf_zeropad</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpabuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[dd1]"></a>wpa_supplicant_init_wpa</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_init_wpa &rArr; wpa_sm_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[ef6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[10e8]"></a>wpa_supplicant_rsn_supp_set_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpas_glue.o(.text), UNUSED)

<P><STRONG><a name="[f10]"></a>wpa_sm_alloc_eapol</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_alloc_eapol &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
</UL>

<P><STRONG><a name="[f16]"></a>wpa_sm_deauthenticate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wpa_sm_deauthenticate &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[f0e]"></a>wpa_sm_ether_send</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = wpa_sm_ether_send &rArr; wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[f18]"></a>wpa_sm_set_key</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
</UL>

<P><STRONG><a name="[f2e]"></a>wpa_sm_disassociate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
</UL>

<P><STRONG><a name="[f28]"></a>wpa_sm_cancel_auth_timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = wpa_sm_cancel_auth_timeout &rArr; wpa_supplicant_cancel_auth_timeout &rArr; tls_os_timer_stop &rArr; LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f25]"></a>wpa_supplicant_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[10e9]"></a>wpa_supplicant_init_eapol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_glue.o(.text), UNUSED)

<P><STRONG><a name="[f44]"></a>ieee80211_bss_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_put &rArr; kref_put &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
</UL>
<BR>[Called By]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>

<P><STRONG><a name="[f46]"></a>ieee80211_bss_del</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
</UL>
<BR>[Called By]<UL><LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
</UL>

<P><STRONG><a name="[e11]"></a>ieee80211_bss_flush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[fb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>

<P><STRONG><a name="[f47]"></a>ieee80211_bss_flush_by_age</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_flush_by_age &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bss_mgmt_task
</UL>

<P><STRONG><a name="[f48]"></a>ieee80211_bss_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_timeout &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_bss.o(.text)
</UL>
<P><STRONG><a name="[dde]"></a>ieee80211_bss_list_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_list_init &rArr; tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[f49]"></a>ieee80211_bss_add</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_add &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[f4a]"></a>ieee80211_bss_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[f4c]"></a>ieee80211_bss_info_update</STRONG> (Thumb, 970 bytes, Stack size 40 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_init
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[10ea]"></a>find_ie</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tls_wl_bss.o(.text), UNUSED)

<P><STRONG><a name="[f4e]"></a>ieee80211_get_match_bss</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ieee80211_get_match_bss &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[17c]"></a>tls_wl_bss_mgmt_task</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_wl_bss_mgmt_task &rArr; ieee80211_bss_flush_by_age &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[e46]"></a>mic_block</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tls_wl_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[f50]"></a>ieee80211_wep_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tls_wl_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[f51]"></a>ieee80211_key_alloc</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ieee80211_key_alloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[f52]"></a>ieee80211_key_link</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ieee80211_key_link &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[f55]"></a>ieee80211_key_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_del_key
<LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[e2a]"></a>ieee80211_add_key</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ieee80211_add_key &rArr; ieee80211_key_link &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
</UL>

<P><STRONG><a name="[e28]"></a>ieee80211_del_key</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>

<P><STRONG><a name="[f57]"></a>ieee80211_free_keys</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tls_wl_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[f58]"></a>tls_wl_get_mgmt_txbuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[e66]"></a>ieee80211_send_probe_req</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotdata
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[f5d]"></a>ieee80211_send_auth</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_auth &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
</UL>

<P><STRONG><a name="[e0f]"></a>ieee80211_bss_get_ie</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
</UL>

<P><STRONG><a name="[f5e]"></a>ieee80211_send_assoc</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get_ie
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>

<P><STRONG><a name="[f5f]"></a>ieee80211_send_probe_rsp</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e14]"></a>ieee80211_send_deauth_disassoc</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_disassoc
<LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
</UL>

<P><STRONG><a name="[f60]"></a>ieee80211_send_nullfunc</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_nullfunc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon_proc_dtim
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[f61]"></a>ieee80211_send_pspoll</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_pspoll &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon_proc_dtim
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[e19]"></a>ieee80211_send_mgmt</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
</UL>

<P><STRONG><a name="[e69]"></a>ieee80211_send_mgmt_by_rate</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
</UL>

<P><STRONG><a name="[e33]"></a>ieee80211_set_disassoc</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reset_erp_info
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[f65]"></a>ieee80211_ht_cap_ie_to_sta_ht_cap</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_ht_cap_ie_to_sta_ht_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[f6a]"></a>ieee80211_sta_rx_notify</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_rx_notify &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[f6d]"></a>ieee80211_rx_mgmt_beacon_proc_dtim</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_beacon_proc_dtim &rArr; ieee80211_send_pspoll &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[f70]"></a>disable_rd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = disable_rd &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>

<P><STRONG><a name="[f71]"></a>ieee80211_send_delba</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_stop_tx_ba_cb
<LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>

<P><STRONG><a name="[f72]"></a>__ieee80211_stop_rx_ba_session</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __ieee80211_stop_rx_ba_session &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
</UL>

<P><STRONG><a name="[f73]"></a>ieee80211_stop_tx_ba_cb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
</UL>

<P><STRONG><a name="[f74]"></a>___ieee80211_stop_tx_ba_session</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_stop_tx_ba_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_tx_ba_session
</UL>

<P><STRONG><a name="[f75]"></a>__ieee80211_stop_tx_ba_session</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
</UL>

<P><STRONG><a name="[f76]"></a>ieee80211_sta_tear_down_BA_sessions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_tx_ba_session
<LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>

<P><STRONG><a name="[f77]"></a>ieee80211_enable_ht</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ieee80211_enable_ht &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[10eb]"></a>ieee80211_stop_tx_ba_session</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text), UNUSED)

<P><STRONG><a name="[f79]"></a>ieee80211_process_addba_request</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_process_addba_request &rArr; ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[10ec]"></a>ieee80211_process_addba_resp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text), UNUSED)

<P><STRONG><a name="[f7a]"></a>ieee80211_process_delba</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ieee80211_process_delba &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
<LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[f7b]"></a>ieee80211_process_chanswitch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ieee80211_process_chanswitch &rArr; ieee80211_get_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[f84]"></a>ieee80211_sta_rx_mgmt</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_rx_mgmt &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[e24]"></a>ieee80211_sta_req_auth</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
</UL>

<P><STRONG><a name="[f86]"></a>ieee80211_sta_commit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
</UL>

<P><STRONG><a name="[e23]"></a>ieee80211_sta_set_ssid</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_sta_set_ssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_commit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[f87]"></a>ieee80211_sta_config_auth</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_config_auth &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_reset_tsf
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[f89]"></a>ieee80211_sta_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_timer &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_mlme.o(.text)
</UL>
<P><STRONG><a name="[ddb]"></a>tls_wl_mlme_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tls_wl_mlme_init &rArr; tls_os_timer_create &rArr; LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[17a]"></a>tls_wl_mlme_task</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tls_wl_mlme_task &rArr; ieee80211_sta_rx_queued_mgmt &rArr; ieee80211_rx_mgmt_beacon &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[df3]"></a>tls_wl_mlme_cleanup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
</UL>

<P><STRONG><a name="[e36]"></a>tls_wl_delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tls_wl_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wl_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
</UL>

<P><STRONG><a name="[dfa]"></a>tls_wl_bbp_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tls_wl_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tls_wl_bbp_init &rArr; tls_get_tx_iq_phase &rArr; tls_ft_param_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[e10]"></a>tls_wl_rc_get_max_rate_code</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_rc_get_max_rate_code
</UL>
<BR>[Called By]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
</UL>

<P><STRONG><a name="[f93]"></a>rate_supported</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_send_low
</UL>

<P><STRONG><a name="[e0b]"></a>hw_set_tx_rate_and_power</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hw_set_tx_rate_and_power
</UL>
<BR>[Called By]<UL><LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_beacon
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
</UL>

<P><STRONG><a name="[e52]"></a>hw_set_tx_rate_and_power2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
</UL>

<P><STRONG><a name="[dd8]"></a>rc_get_rate_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_max_rate
<LI><a href="#[e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_rate_mode
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
</UL>

<P><STRONG><a name="[e2f]"></a>ieee80211_rate_control_init</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[f92]"></a>rate_control_send_low</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[e42]"></a>ieee80211_set_rate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
</UL>

<P><STRONG><a name="[dfb]"></a>tls_wl_rc_init</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_rc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[df6]"></a>tls_wl_rx_mem_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tls_wl_rx_mem_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_mem_cfg
</UL>

<P><STRONG><a name="[de0]"></a>tls_wl_rx_init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_wl_rx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[f83]"></a>tls_wl_free_rxbuf</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tls_wl_free_rxbuf &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
</UL>

<P><STRONG><a name="[f9b]"></a>ieee80211_rx_defragment</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, tls_wl_rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fa4]"></a>ieee80211_deliver_frame</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[17b]"></a>tls_wl_rx_task</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tls_wl_rx_task &rArr; ieee80211_rx_mgmt_handle &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[fa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_pspoll
<LI><a href="#[fa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_mgmt
<LI><a href="#[fb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
<LI><a href="#[faf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[e20]"></a>alloc_scan_req</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[fb3]"></a>ieee80211_start_scan</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ieee80211_start_scan &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
</UL>

<P><STRONG><a name="[fb4]"></a>ieee80211_scan_completed</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ieee80211_scan_completed &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
</UL>

<P><STRONG><a name="[e21]"></a>ieee80211_request_scan</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ieee80211_request_scan &rArr; ieee80211_start_scan &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[fb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[179]"></a>tls_wl_scan_task</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_wl_scan_task &rArr; ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[deb]"></a>sta_info_get</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sta_info_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[e17]"></a>sta_info_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sta_info_put &rArr; kref_put &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[e2e]"></a>sta_info_add_with_mode</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sta_info_add_with_mode &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_init
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[e31]"></a>sta_info_free</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
<LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
<LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
</UL>

<P><STRONG><a name="[e12]"></a>sta_info_flush</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
</UL>

<P><STRONG><a name="[ddd]"></a>sta_info_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = sta_info_init &rArr; tls_os_sem_create &rArr; LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[10ed]"></a>kref_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_util.o(.text), UNUSED)

<P><STRONG><a name="[f4d]"></a>kref_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[f4b]"></a>kref_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = kref_get &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
</UL>

<P><STRONG><a name="[f45]"></a>kref_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = kref_put &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
</UL>

<P><STRONG><a name="[10ee]"></a>ieee80211_sta_get_rates</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, tls_wl_util.o(.text), UNUSED)

<P><STRONG><a name="[e4f]"></a>ieee80211_get_bssid</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[fb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[fb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_ctl
<LI><a href="#[fb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[dbb]"></a>ieee80211_channel_to_frequency</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[d6a]"></a>ieee80211_frequency_to_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
</UL>

<P><STRONG><a name="[f6c]"></a>ieee80211_get_channel</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[ea6]"></a>ieee802_11_parse_elems</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee802_11_parse_elems
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[e26]"></a>ieee80211_set_freq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_freq
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[e51]"></a>ieee80211_hdrlen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_hdrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[fb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[fb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_ctl
<LI><a href="#[fb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[fb8]"></a>ieee80211_ssid_txt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tls_wl_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[dfd]"></a>ieee80211_beacon_get</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
</UL>

<P><STRONG><a name="[d4e]"></a>ieee80211_get_tim_ie</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_beacon_done
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
</UL>

<P><STRONG><a name="[d6b]"></a>ieee80211_get_ds_ie</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
</UL>

<P><STRONG><a name="[e0e]"></a>ieee80211_get_vendor_ie</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
</UL>

<P><STRONG><a name="[fb9]"></a>IQ_mismatch_power_cal</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
</UL>

<P><STRONG><a name="[fbb]"></a>IQ_mismatch_correlation_method</STRONG> (Thumb, 1420 bytes, Stack size 128 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_power_cal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[fbd]"></a>IQ_mismatch_phase_adjust_fft</STRONG> (Thumb, 1254 bytes, Stack size 104 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IQ_mismatch_phase_adjust_fft &rArr; rf_data_sample_fft_cal_t &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[fc0]"></a>IQ_Mismatch_method</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = IQ_Mismatch_method &rArr; IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[fc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_IQ_data
<LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
</UL>

<P><STRONG><a name="[e39]"></a>tx_iqmismatch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = tx_iqmismatch &rArr; IQ_Mismatch_method &rArr; IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>
<BR>[Called By]<UL><LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[fc1]"></a>prepare_IQ_data</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prepare_IQ_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[10ef]"></a>prepare_IQ_data_fft</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tx_lo_cal.o(.text), UNUSED)

<P><STRONG><a name="[fc2]"></a>data_acquire_once</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = data_acquire_once &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>

<P><STRONG><a name="[fc3]"></a>read_IQ_data</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_IQ_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>

<P><STRONG><a name="[fbe]"></a>rf_data_sample_fft_cal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf_data_sample_fft_cal &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[fc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[fc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[fc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
<LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
</UL>

<P><STRONG><a name="[fbf]"></a>rf_data_sample_fft_cal_t</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf_data_sample_fft_cal_t &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[fc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[fc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
</UL>

<P><STRONG><a name="[fba]"></a>rf_data_sample_correlation_cal</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[fc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[fc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
<LI><a href="#[fb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_power_cal
</UL>

<P><STRONG><a name="[fc5]"></a>LO_Leakage_correlation</STRONG> (Thumb, 1762 bytes, Stack size 88 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[fc6]"></a>LO_leakage_fft</STRONG> (Thumb, 1538 bytes, Stack size 72 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LO_leakage_fft &rArr; rf_data_sample_fft_cal &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[fc7]"></a>LO_leakage_func_method</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = LO_leakage_func_method &rArr; LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[fc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
<LI><a href="#[fc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
<LI><a href="#[fc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_IQ_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_loleakage_cal
</UL>

<P><STRONG><a name="[e38]"></a>rf_loleakage_cal</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = rf_loleakage_cal &rArr; LO_leakage_func_method &rArr; LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>
<BR>[Called By]<UL><LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[f22]"></a>aes_unwrap</STRONG> (Thumb, 186 bytes, Stack size 840 bytes, aes_unwrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[fc8]"></a>mlme_deletekeys_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_reassociate_indication
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[edb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_authenticate_indication
<LI><a href="#[eed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_associate_indication
</UL>

<P><STRONG><a name="[edb]"></a>mlme_authenticate_indication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_authenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[eea]"></a>mlme_deauthenticate_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[eed]"></a>mlme_associate_indication</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_associate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[eec]"></a>mlme_reassociate_indication</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_reassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[ef3]"></a>mlme_disassociate_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mlme_disassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
</UL>

<P><STRONG><a name="[f07]"></a>mlme_michaelmicfailure_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[ee5]"></a>hostapd_eid_wmm</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hostapd_eid_wmm
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[edf]"></a>hostapd_eid_wmm_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[ee9]"></a>handle_probe_req</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = handle_probe_req &rArr; hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[ee5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[ede]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_print_ssid
<LI><a href="#[ee2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[ee3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ds_params
<LI><a href="#[fca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[ec7]"></a>ieee802_11_set_beacon</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ieee802_11_set_beacon &rArr; hostapd_drv_set_ap &rArr; tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[ee5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[ee2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[ee3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ds_params
<LI><a href="#[fca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[fcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_erp_info
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[fcf]"></a>wpa_ssid_txt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd0]"></a>hex2byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2num
</UL>
<BR>[Called By]<UL><LI><a href="#[fd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>

<P><STRONG><a name="[fd2]"></a>hexstr2bin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>

<P><STRONG><a name="[f11]"></a>inc_byte_array</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[fd3]"></a>wpa_get_ntp_timestamp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_get_ntp_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[fed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[ff5]"></a>wpa_auth_for_each_sta</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_for_each_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[ff4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
</UL>

<P><STRONG><a name="[10f0]"></a>wpa_auth_logger</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[fd8]"></a>__wpa_send_eapol</STRONG> (Thumb, 714 bytes, Stack size 96 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[fda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
<LI><a href="#[fdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_hapd_send_eapol
<LI><a href="#[fd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>

<P><STRONG><a name="[fc9]"></a>wpa_remove_ptk</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[fd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[fef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>

<P><STRONG><a name="[ff7]"></a>wpa_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[ff9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_set_key_len
<LI><a href="#[fed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
</UL>

<P><STRONG><a name="[ec1]"></a>wpa_init_keys</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = wpa_init_keys &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[ffa]"></a>wpa_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = wpa_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[ffb]"></a>wpa_reconfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wpa_auth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[ff9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_set_key_len
<LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ed6]"></a>wpa_auth_sta_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_auth_sta_init &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[ecc]"></a>wpa_auth_sta_associated</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = wpa_auth_sta_associated &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[ee0]"></a>wpa_auth_sta_no_wpa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[f02]"></a>wpa_auth_sta_deinit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wpa_auth_sta_deinit &rArr; eloop_register_timeout &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[fd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[ed2]"></a>wpa_receive</STRONG> (Thumb, 698 bytes, Stack size 96 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = wpa_receive &rArr; wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[ffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[ffd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[fe3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[fe5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>

<P><STRONG><a name="[ecb]"></a>wpa_auth_sm_event</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[f0a]"></a>wpa_gtk_rekey</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[feb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[f09]"></a>wpa_auth_countermeasures_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[10f1]"></a>wpa_auth_pairwise_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[10f2]"></a>wpa_auth_get_pairwise</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[10f3]"></a>wpa_auth_sta_key_mgmt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[10f4]"></a>wpa_auth_sta_wpa_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[10f5]"></a>wpa_auth_sta_clear_pmksa</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[10f6]"></a>wpa_auth_sta_get_pmksa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[f06]"></a>wpa_auth_sta_local_mic_failure_report</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[fcb]"></a>wpa_auth_get_wpa_ie</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
</UL>

<P><STRONG><a name="[ec8]"></a>hostapd_deinit_wpa</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpa_auth_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = hostapd_deinit_wpa &rArr; wpa_deinit &rArr; eloop_cancel_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
<LI><a href="#[ffa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>

<P><STRONG><a name="[ec0]"></a>hostapd_setup_wpa</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, wpa_auth_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[fff]"></a>wpa_write_rsn_ie</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_write_rsn_ie &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[ff8]"></a>wpa_auth_gen_wpa_ie</STRONG> (Thumb, 110 bytes, Stack size 152 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = wpa_auth_gen_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[fff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_wpa_ie
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ffb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[fdf]"></a>wpa_add_kde</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_add_kde &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[ed7]"></a>wpa_validate_wpa_ie</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wpa_validate_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[ffc]"></a>wpa_parse_kde_ies</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_parse_kde_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[1001]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[10f7]"></a>wpa_auth_uses_mfp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth_ie.o(.text), UNUSED)

<P><STRONG><a name="[f0d]"></a>wpa_eapol_key_mic</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[1002]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
</UL>

<P><STRONG><a name="[fe8]"></a>rsn_pmkid</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[f15]"></a>wpa_pmk_to_ptk</STRONG> (Thumb, 154 bytes, Stack size 144 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[10f8]"></a>wpa_cipher_txt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wpa_common.o(.text), UNUSED)

<P><STRONG><a name="[f1a]"></a>wpa_compare_rsn_ie</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wpa_compare_rsn_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
</UL>

<P><STRONG><a name="[f3b]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[1003]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[f3a]"></a>wpa_parse_wpa_ie_wpa</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[1004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_selector_to_bitfield
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[eaa]"></a>hex2digit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
</UL>

<P><STRONG><a name="[eee]"></a>hostapd_drv_sta_remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc
<LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>

<P><STRONG><a name="[ef1]"></a>hostapd_set_sta_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[fda]"></a>hostapd_sta_flags_to_drv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[ed1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[eef]"></a>hostapd_drv_sta_add</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_sta_add &rArr; tls_wl_if_sta_add &rArr; ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[fda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[ee6]"></a>hostapd_drv_send_mlme</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
</UL>

<P><STRONG><a name="[fce]"></a>hostapd_drv_set_ap</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_set_ap &rArr; tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_rate_mode
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[1005]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher2drv
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[10f9]"></a>hostapd_drv_sta_set_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[ebf]"></a>hostapd_drv_set_key</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[fd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
</UL>

<P><STRONG><a name="[ffe]"></a>hostapd_get_seqnum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_seqnum
</UL>

<P><STRONG><a name="[f04]"></a>hostapd_drv_set_countermeasures</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_stop
</UL>

<P><STRONG><a name="[fdb]"></a>hostapd_drv_hapd_send_eapol</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_hapd_send_eapol &rArr; wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[ec5]"></a>hostapd_set_freq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hostapd_set_freq &rArr; wpa_drv_set_freq &rArr; tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_channel_info_updata
<LI><a href="#[de9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_state
<LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[10fa]"></a>hostapd_sta_set_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[f01]"></a>hostapd_drv_get_inact_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_get_inact_sec &rArr; tls_wl_if_get_inact_sec &rArr; sta_info_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[ed1]"></a>hostapd_set_authorized</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hostapd_set_authorized
</UL>
<BR>[Calls]<UL><LI><a href="#[fda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>

<P><STRONG><a name="[ecd]"></a>hostapd_drv_sta_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_sta_flush &rArr; tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[eca]"></a>hostapd_drv_sta_deauth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_sta_deauth &rArr; tls_wl_if_sta_deauth &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[ed8]"></a>hostapd_drv_sta_disassoc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hostapd_drv_sta_disassoc &rArr; tls_wl_if_sta_disassoc &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[10fb]"></a>hostapd_if_add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[ec6]"></a>hostapd_set_tx_queue_params</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hostapd_set_tx_queue_params &rArr; tls_wl_if_set_tx_queue_params
</UL>
<BR>[Calls]<UL><LI><a href="#[1006]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[100a]"></a>fftr2_dit_new</STRONG> (Thumb, 190 bytes, Stack size 44 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fftr2_dit_new
</UL>
<BR>[Called By]<UL><LI><a href="#[fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[1009]"></a>ReverseBits</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1007]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
</UL>

<P><STRONG><a name="[1008]"></a>NumberOfBitsNeeded</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls_rf_fft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1007]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
</UL>

<P><STRONG><a name="[1007]"></a>bit_rev</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bit_rev &rArr; ReverseBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberOfBitsNeeded
<LI><a href="#[1009]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[fc4]"></a>fft</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1007]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
<LI><a href="#[100a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftr2_dit_new
</UL>
<BR>[Called By]<UL><LI><a href="#[fbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
</UL>

<P><STRONG><a name="[fd9]"></a>aes_wrap</STRONG> (Thumb, 168 bytes, Stack size 840 bytes, aes_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[100b]"></a>md5</STRONG> (Thumb, 40 bytes, Stack size 128 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
</UL>

<P><STRONG><a name="[100c]"></a>md5_vector</STRONG> (Thumb, 60 bytes, Stack size 136 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>

<P><STRONG><a name="[10fc]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(.text), UNUSED)

<P><STRONG><a name="[100d]"></a>MD5Update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[100f]"></a>MD5Final</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[1010]"></a>hmac_md5_vector</STRONG> (Thumb, 208 bytes, Stack size 184 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hmac_md5_vector &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[1002]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[1002]"></a>hmac_md5</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>

<P><STRONG><a name="[675]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1011]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1012]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Tick2MS
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_gettime
<LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[fbc]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
</UL>

<P><STRONG><a name="[949]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[101a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[18b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[5b9]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
</UL>

<P><STRONG><a name="[934]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[cdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[3ed]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
</UL>

<P><STRONG><a name="[75d]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperInitRandomeNumber
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
</UL>

<P><STRONG><a name="[10fd]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[10fe]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[10ff]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_chipid
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_read
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privRsaEncryptSignedElement
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_bytes
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_ssid_bssid_crc_match
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotinfo
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnResizeBuffer
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslCreateSNIext
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadSessionTicketKeys
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTicketKeys
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha2
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5GenerateMac
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csNullEncrypt
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_strdup
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cbc
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb8
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_psk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_self_test_entropy
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_self_test_entropy
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_fill_buffer
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_write_buffer
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_psk
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[dfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_beacon
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk
<LI><a href="#[d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[ef5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[ef7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[fff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[fdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[fd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[fca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ssid_txt
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[1010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[100f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[100d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[345]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_lib_load
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_install
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_clone
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p521
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[ffb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[8a5]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csNullDecrypt
<LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[190]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[1100]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_dummy_source
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[fd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1101]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1102]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_customdata
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxClr
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnResizeBuffer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslCreateSNIext
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_calloc
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[d35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
<LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ht_cap_ie_to_sta_ht_cap
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[ef6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[100f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BoadExampleEntry
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba_gen
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_timer_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_special_task_create
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tcp_server_socket
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_litepoint_start
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsw_proc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_lkstt_proc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpc_proc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lkstt_proc
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetInfo
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewHelloExtension
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSessionId
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslClearSessionId
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSessionId
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadSessionTicketKeys
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewKeys
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslClose
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesInit
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Init
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_init
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_enc
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_init
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_init
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_init
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_init
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_self_test
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[d51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[d47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
<LI><a href="#[d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_report_task
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
<LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintPreallocated
<LI><a href="#[cfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintBuffered
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mac_wdg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_failed_softap
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[e79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_clear_data
<LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[ffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[fc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
<LI><a href="#[1010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[100f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[1103]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[59b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[4d5]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_printf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrSearch
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[3f0]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_recive_cb
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_user
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
<LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[5aa]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_comma
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrGetToken
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcardMatch
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
</UL>

<P><STRONG><a name="[22d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DnsCompareName
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_post
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_dealer
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTTopicMatched
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_user
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_id
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_self_test
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_write_buffer
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[ce5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[ef7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
</UL>

<P><STRONG><a name="[598]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandlerArgs
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_flash_info
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_string
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
<LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
<LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[617]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_atcmd_eol
</UL>

<P><STRONG><a name="[191]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_flash_verify
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_chipid
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_find_chlist
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_find_ch_by_bssid
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_ClientDelete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanClientHistory
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientTableLookup
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSessionTicketKey
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTicketKeys
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_self_test
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_self_test
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_key_check_weak
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_self_test
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5_parse_pbkdf2_params
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pkcs12_pbe_alg_from_asn1
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[d52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bss
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[3ef]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_parse_param
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_customdata
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_customdata
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_ssidpwd
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_default_socket_params
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
<LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[7ef]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[cee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
</UL>

<P><STRONG><a name="[8df]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wildcardMatch
</UL>

<P><STRONG><a name="[ce8]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1013]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[416]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1013]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
</UL>

<P><STRONG><a name="[1014]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[1015]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1016]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1015]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[102a]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1026]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[1025]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1018]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1019]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1017]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[414]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[101a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[93a]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[101a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[101b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[101c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[101e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[370]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
</UL>

<P><STRONG><a name="[101e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[371]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
</UL>

<P><STRONG><a name="[101f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1012]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1022]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1023]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1023]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[375]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1017]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[374]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1022]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1017]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
</UL>

<P><STRONG><a name="[959]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_profile_data
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[962]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
</UL>

<P><STRONG><a name="[684]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
<LI><a href="#[1017]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[95a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1011]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_SetNumberHelper
<LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[685]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1011]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1012]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
</UL>

<P><STRONG><a name="[ce7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[ce2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_SetNumberHelper
<LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[ce1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_SetNumberHelper
<LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[376]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[1018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1104]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1033]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1012]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1105]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1011]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1106]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1020]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1107]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1015]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1016]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[1014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[1013]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[188]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[1027]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1025]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[101a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1108]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[101d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[101b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[101c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[101b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1022]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1021]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1021]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1011]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1012]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1022]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[21f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1029]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1109]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1024]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1026]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[102a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[1016]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[1014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[1013]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1028]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1015]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[101a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[110a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[110b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[102b]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[110c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[223]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST3
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST2
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST1
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Callback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_IRQHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ipaddr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_connect_net
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_net_status_changed_event
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HS_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubRsaDecryptSignedElement
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_config_mode
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_lsd_finish
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetTaskWaterLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_lwip
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTracePtr
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_calc
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
</UL>

<P><STRONG><a name="[110d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[102d]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[110e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[8e1]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write_buffer
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_id
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_accept
</UL>

<P><STRONG><a name="[110f]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[8b]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[102e]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1110]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[40f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mactostr
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iptostr
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ap_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_err_resp
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Web_parse_line
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[1111]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cda]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Version
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[102f]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1112]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1113]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1114]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[cce]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>

<P><STRONG><a name="[757]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv
<LI><a href="#[1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[101a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1115]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1116]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1117]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1118]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1019]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[646]"></a>osAtomicBitsetGetNumBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(i.osAtomicBitsetGetNumBits))
<BR><BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetNumItems
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetIndex
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[ce0]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1027]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d3]"></a>con_net_status_changed_event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = con_net_status_changed_event &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ipaddr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>IP2Str</STRONG> (Thumb, 390 bytes, Stack size 36 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IP2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
</UL>

<P><STRONG><a name="[23f]"></a>Mac2Str</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mac2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_vprintf
</UL>

<P><STRONG><a name="[23a]"></a>tls_reg_write32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[23b]"></a>tls_reg_read32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[278]"></a>Timer1_Callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[27a]"></a>sys_net_up</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = sys_net_up &rArr; tls_netif_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_dns_setserver
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[280]"></a>sys_net2_up</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = sys_net2_up &rArr; tls_netif2_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_addr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_start
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_start
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[285]"></a>sys_net2_down</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = sys_net2_down &rArr; tls_netif2_set_down &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_down
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_stop
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[289]"></a>tls_auto_reconnect_softap</STRONG> (Thumb, 188 bytes, Stack size 144 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[28f]"></a>sys_net_down</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = sys_net_down &rArr; tls_auto_reconnect &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_status
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_down
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[296]"></a>tls_sys_net_up</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_net_up &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[297]"></a>tls_sys_net2_up</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_net2_up &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[298]"></a>tls_sys_net2_down</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_net2_down &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[299]"></a>tls_sys_net2_fail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_net2_fail &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[29a]"></a>tls_sys_net_down</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_net_down &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[29b]"></a>tls_sys_connect_failed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_sys_connect_failed &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[d6]"></a>sys_net_status_changed</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = sys_net_status_changed &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_get_state
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_status
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_connect_failed
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net_down
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_fail
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_down
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net2_up
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_net_up
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_sys.o(.text)
</UL>
<P><STRONG><a name="[2a8]"></a>dl_list_add_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
</UL>

<P><STRONG><a name="[2a7]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[2a4]"></a>tls_uart_tx_chars</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>

<P><STRONG><a name="[2ab]"></a>tls_uart_tx_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>

<P><STRONG><a name="[2b1]"></a>tls_uart_tx_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
</UL>

<P><STRONG><a name="[2b0]"></a>uart_handle_cts_change</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_disable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_enable
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>uart_tx_finish_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = uart_tx_finish_callback &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[2ca]"></a>timer_clear_irq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>

<P><STRONG><a name="[2cb]"></a>timer_irq_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_irq_callback &rArr; timer_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>spi_set_mode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
</UL>

<P><STRONG><a name="[2d3]"></a>spi_set_endian</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_set_endian
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
</UL>

<P><STRONG><a name="[2d4]"></a>spi_set_chipselect_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_set_chipselect_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
</UL>

<P><STRONG><a name="[2d5]"></a>spi_set_sclk</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_set_sclk &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
</UL>

<P><STRONG><a name="[2d6]"></a>spi_get_status</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_rxfifo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
</UL>

<P><STRONG><a name="[2d7]"></a>SpiMasterInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiMasterInit &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
</UL>

<P><STRONG><a name="[2dc]"></a>SpiDmaBlockWrite</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SpiDmaBlockWrite &rArr; tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
</UL>

<P><STRONG><a name="[2de]"></a>SpiDmaBlockRead</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SpiDmaBlockRead &rArr; tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; LOS_TaskDelay &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[2e0]"></a>spi_message_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_message_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[d8]"></a>spi_complete</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = spi_complete &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[2e1]"></a>spi_fill_txfifo</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_fill_txfifo &rArr; spi_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_status
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[2e3]"></a>spi_get_rxfifo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_get_rxfifo &rArr; spi_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_status
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[2e5]"></a>spi_next_transfer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_next_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
</UL>

<P><STRONG><a name="[2e6]"></a>spi_next_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_next_message &rArr; spi_next_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[2e7]"></a>spi_start_transfer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_start_transfer &rArr; spi_set_sclk &rArr; tls_sys_clk_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[2e8]"></a>spi_continue_transfer</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = spi_continue_transfer &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_rxfifo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
</UL>

<P><STRONG><a name="[d9]"></a>spi_scheduler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = spi_scheduler &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[2f2]"></a>io_cfg_option6</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option6
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[2f3]"></a>io_cfg_option5</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option5
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[2f4]"></a>io_cfg_option4</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option4
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[2f5]"></a>io_cfg_option3</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option3
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[2f6]"></a>io_cfg_option2</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option2
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[2f7]"></a>io_cfg_option1</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_cfg_option1
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[31f]"></a>slave_spi_rx_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slave_spi_rx_data &rArr; hspi_free_rxdesc
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_free_rxdesc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_TX_IRQHandler
</UL>

<P><STRONG><a name="[32e]"></a>writeEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSR
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programSR
</UL>

<P><STRONG><a name="[32d]"></a>programSR</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = programSR
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
</UL>

<P><STRONG><a name="[32f]"></a>eraseSR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eraseSR
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSRRW
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>

<P><STRONG><a name="[339]"></a>programPage</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = programPage &rArr; programSR
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programSR
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[33a]"></a>eraseSector</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eraseSector &rArr; eraseSR
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[35b]"></a>dma_irq_proc</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_irq_proc &rArr; tls_dma_irq_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_clr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel4_7_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel3_IRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel2_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>adc_dma_isr_callbk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_dma_isr_callbk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>waitForAdcDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interVolt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_inputVolt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interTemp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_offset
</UL>

<P><STRONG><a name="[386]"></a>tls_i2s_set_rxth</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
</UL>

<P><STRONG><a name="[382]"></a>tls_i2s_set_txth</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
</UL>

<P><STRONG><a name="[380]"></a>tls_i2s_int_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[37f]"></a>tls_i2s_fill_txfifo</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tls_i2s_fill_txfifo &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[3b9]"></a>getFlashDensity</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
</UL>

<P><STRONG><a name="[3b1]"></a>tls_fls_flush_sector</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
</UL>

<P><STRONG><a name="[3c1]"></a>swap32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_read
</UL>

<P><STRONG><a name="[3be]"></a>tls_spifls_drv_write_enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_write_enable &rArr; tls_spi_write &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[3bf]"></a>tls_spifls_drv_wait_write_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_wait_write_enable &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[3c0]"></a>tls_spifls_drv_wait_flash_ready</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[0]"></a>tls_spifls_drv_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_read &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>tls_spifls_drv_fast_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>tls_spifls_drv_page_write</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_page_write &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>tls_spifls_drv_erase</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_erase &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>tls_spifls_drv_chip_erase</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tls_spifls_drv_chip_erase &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>tls_spifls_drv_probe</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>tls_spifls_drv_remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[2a0]"></a>tls_reg_write32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_irq
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_af_disable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_clr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_clk_select
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_powerInit
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rx_retry_times
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_tx_retry_times
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_bgt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_open_peripheral_clock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_close_peripheral_clock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_standby_start
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer1_stop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer1_start
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer0_stop
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer0_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SDIO_WAKE_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_GPIO_WAKE_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_TIMER0_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_TIMER1_IRQHandler
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_io_config
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_set_clk
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_cmp_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_config_cmp_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_dma
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_voltage_start_with_cpu
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_temp_offset_with_cpu
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_enable_calibration_buffer_offset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_cpu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_clear_irq
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_clr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_clr_gpio_irq_status
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_disable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_enable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_cis
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_regs_cfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_TX_CMD_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_TX_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_RX_IRQHandler
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_free_rxdesc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_IRQ_ISR_Handler
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_irq_type_config
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_irq_cmd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_mode_config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_brake_mode_config
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_inverse_cmd
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_deadzone_config
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_by_period_config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_inverse_cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_mode_config
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_RTC_IRQHandler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rtc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_change
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRegInit
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_put
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option2
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option3
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option4
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option5
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option6
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
</UL>

<P><STRONG><a name="[29f]"></a>tls_reg_read32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_status
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_irq
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_clk_select
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_powerInit
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rx_retry_times
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_tx_retry_times
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_bgt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_open_peripheral_clock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_close_peripheral_clock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_standby_start
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer1_stop
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer0_stop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SDIO_WAKE_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_GPIO_WAKE_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_TIMER0_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_TIMER1_IRQHandler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_get
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_set_clk
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_reference_sel
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_cmp_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_config_cmp_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_dma
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_voltage_start_with_cpu
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_temp_offset_with_cpu
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_enable_calibration_buffer_offset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_cpu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_read_adc_result
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_clear_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_clr_gpio_irq_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_gpio_irq_status
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_disable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_enable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_IRQ_ISR_Handler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_irq_type_config
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_irq_cmd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_mode_config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_brake_mode_config
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_inverse_cmd
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_deadzone_config
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_by_period_config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_inverse_cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_mode_config
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_RTC_IRQHandler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_rtc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rtc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_delay_via_timer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option2
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option3
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option4
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option5
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_option6
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
</UL>

<P><STRONG><a name="[37c]"></a>tls_bitband_write</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_bitband_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rx_config
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rx_retry_times
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_tx_retry_times
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_seg_set
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_callback
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_callback
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
</UL>

<P><STRONG><a name="[37a]"></a>tls_bitband_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_seg_set
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_fresh_ratio
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_set_freq_exclk
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_freq
</UL>

<P><STRONG><a name="[2b6]"></a>dl_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
</UL>

<P><STRONG><a name="[2a5]"></a>dl_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
</UL>

<P><STRONG><a name="[2e2]"></a>spi_data_put</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_data_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
</UL>

<P><STRONG><a name="[2e4]"></a>spi_data_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_data_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_rxfifo
</UL>

<P><STRONG><a name="[3e1]"></a>fwup_update_autoflag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = fwup_update_autoflag &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[3e6]"></a>tls_fwup_img_update_header</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tls_fwup_img_update_header &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[db]"></a>fwup_scheduler</STRONG> (Thumb, 1406 bytes, Stack size 88 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = fwup_scheduler &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_clr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_update_header
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_update_autoflag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_img_header_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[3f2]"></a>tls_fwup_request_async</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tls_fwup_request_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
</UL>

<P><STRONG><a name="[dc]"></a>task_thread</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = task_thread &rArr; tls_timeouts_mbox_fetch_p &rArr; tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; LOS_QueueRead &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeout_p
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_untimeout_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[407]"></a>_cal_crc32</STRONG> (Thumb, 1692 bytes, Stack size 84 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _cal_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>

<P><STRONG><a name="[41a]"></a>tls_crypto_clear_32reg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_crypto_clear_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_encrypt_decrypt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4
</UL>

<P><STRONG><a name="[41b]"></a>tls_crypto_write_32reg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteM
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteB
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteA
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_encrypt_decrypt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4
</UL>

<P><STRONG><a name="[41c]"></a>tls_crypto_read_32reg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadD
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadB
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadA
</UL>

<P><STRONG><a name="[446]"></a>pstm_get_bit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[428]"></a>hd_sha1_compress</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
</UL>

<P><STRONG><a name="[42b]"></a>hd_md5_compress</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
</UL>

<P><STRONG><a name="[442]"></a>rsaMonMulSetLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[443]"></a>rsaMonMulWriteMc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[42e]"></a>rsaMonMulWriteA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
</UL>

<P><STRONG><a name="[42f]"></a>rsaMonMulWriteB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
</UL>

<P><STRONG><a name="[430]"></a>rsaMonMulWriteM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
</UL>

<P><STRONG><a name="[431]"></a>rsaMonMulReadA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_read_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
</UL>

<P><STRONG><a name="[432]"></a>rsaMonMulReadB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_read_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
</UL>

<P><STRONG><a name="[433]"></a>rsaMonMulReadD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_read_32reg
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
</UL>

<P><STRONG><a name="[434]"></a>rsaMulModRead</STRONG> (Thumb, 106 bytes, Stack size 272 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadD
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadB
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulReadA
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reverse
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[438]"></a>rsaMulModWrite</STRONG> (Thumb, 70 bytes, Stack size 272 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteM
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteB
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulWriteA
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[444]"></a>rsaMonMulAA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[445]"></a>rsaMonMulDD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[447]"></a>rsaMonMulAB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[448]"></a>rsaMonMulBD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[441]"></a>rsaCalMc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[46a]"></a>parseGeneralNames</STRONG> (Thumb, 724 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[46c]"></a>lookupExt</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[46d]"></a>getImplicitBitString</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[471]"></a>validateDateRange</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[46e]"></a>getTimeValidity</STRONG> (Thumb, 922 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[46f]"></a>getExplicitVersion</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[475]"></a>x509ConfirmSignature</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>

<P><STRONG><a name="[47c]"></a>pstm_mul_comba_gen</STRONG> (Thumb, 414 bytes, Stack size 72 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
</UL>

<P><STRONG><a name="[481]"></a>readRandomData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
</UL>

<P><STRONG><a name="[491]"></a>cookey</STRONG> (Thumb, 334 bytes, Stack size 152 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[492]"></a>deskey</STRONG> (Thumb, 276 bytes, Stack size 280 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesInitKey
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3InitKey
</UL>

<P><STRONG><a name="[495]"></a>desfunc</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesDecryptBlock
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesEncryptBlock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3DecryptBlock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3EncryptBlock
</UL>

<P><STRONG><a name="[49d]"></a>param_flash_verify</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = param_flash_verify &rArr; tls_fls_read &rArr; flashRead &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
</UL>

<P><STRONG><a name="[49e]"></a>param_to_flash</STRONG> (Thumb, 1072 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_flash_verify
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
</UL>

<P><STRONG><a name="[3e7]"></a>dl_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[3e2]"></a>tls_reg_read32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_read_32reg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_encrypt_decrypt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_bytes
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_stop
</UL>

<P><STRONG><a name="[3e3]"></a>tls_reg_write32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_write_32reg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_clear_32reg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_encrypt_decrypt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTION_IRQHandler
</UL>

<P><STRONG><a name="[4a7]"></a>compare_ether_addr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dhcp_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_GetIpByMac
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
</UL>

<P><STRONG><a name="[4a5]"></a>_CheckMacIsValid</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _CheckMacIsValid &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpTickHandle
</UL>

<P><STRONG><a name="[dd]"></a>_DhcpTickHandle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _DhcpTickHandle &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckMacIsValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_server.o(.text)
</UL>
<P><STRONG><a name="[4bb]"></a>_ParseDhcpOptions</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ParseDhcpOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[4a9]"></a>_ClientTableLookup</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ClientTableLookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[4aa]"></a>_DHCPNakGenAndSend</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = _DHCPNakGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[4b1]"></a>_DHCPAckGenAndSend</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = _DHCPAckGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[4b4]"></a>_DHCPOfferGenAndSend</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[4b5]"></a>_CleanClientHistory</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _CleanClientHistory &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[4b6]"></a>_DhcpClientSMEHandle</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = _DhcpClientSMEHandle &rArr; _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanClientHistory
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[4c6]"></a>_DnsCompareName</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[4c7]"></a>_DNSNameErrGenAndSend</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = _DNSNameErrGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[4c8]"></a>_DNSAnswerGenAndSend</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = _DNSAnswerGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[4e7]"></a>wifi_change_chanel</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wifi_change_chanel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[4eb]"></a>tls_find_ssid_nonascII_pos_and_count</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_find_ssid_nonascII_pos_and_count
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
</UL>

<P><STRONG><a name="[4ec]"></a>oneshot_lsd_finish</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = oneshot_lsd_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot_special
</UL>

<P><STRONG><a name="[519]"></a>oneshot_airkiss_finish</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = oneshot_airkiss_finish &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; soft_ap_create &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_get_result
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[192]"></a>oneshot_airkiss_printf</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = oneshot_airkiss_printf &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[522]"></a>lsd_ssid_bssid_crc_match</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lsd_ssid_bssid_crc_match &rArr; lsd_crc8_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsd_crc8_calc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
</UL>

<P><STRONG><a name="[523]"></a>ieee80211_has_tods</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
</UL>

<P><STRONG><a name="[524]"></a>ieee80211_has_retry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_oneshot_lsd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lsd_recv
</UL>

<P><STRONG><a name="[5b1]"></a>put_unaligned_le16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[5af]"></a>put_unaligned_be16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[e2]"></a>ResetTimerProc</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetTimerProc &rArr; tls_sys_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[5a8]"></a>hostif_check_atcmd_opt</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hostif_check_atcmd_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[5a6]"></a>atcmd_nop_proc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atcmd_nop_proc &rArr; atcmd_err_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_err_resp
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[5bc]"></a>tls_hostif_send_event_linkup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls_hostif_send_event_linkup &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[5cb]"></a>tls_hostif_set_recvmit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
</UL>

<P><STRONG><a name="[5ca]"></a>alloc_recvmit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alloc_recvmit &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_recvmit
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_state_changed
</UL>

<P><STRONG><a name="[5cc]"></a>free_recvmit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = free_recvmit &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_recvmit
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_state_changed
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
</UL>

<P><STRONG><a name="[5cf]"></a>hostif_default_socket_create_tmr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hostif_default_socket_create_tmr &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
</UL>

<P><STRONG><a name="[e7]"></a>hostif_socket_rpt</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hostif_socket_rpt &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>hostif_default_socket_state_changed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hostif_default_socket_state_changed &rArr; alloc_recvmit &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>hostif_default_socket_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = hostif_default_socket_err &rArr; tls_cmd_get_auto_mode &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>hostif_socket_recv</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = hostif_socket_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_recv_data
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>hostif_default_socket_setup</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = hostif_default_socket_setup &rArr; tls_hostif_create_default_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[5d8]"></a>hostif_default_socket_stop_tmr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hostif_default_socket_stop_tmr &rArr; tls_hostif_close_default_socket &rArr; tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[e8]"></a>hostif_socket_state_changed_ATCMD</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hostif_socket_state_changed_ATCMD &rArr; tls_hostif_send_event_tcp_dis &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>hostif_socket_state_changed_RICMD</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hostif_socket_state_changed_RICMD &rArr; tls_hostif_send_event_tcp_dis &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[5da]"></a>tls_hostif_wjoin_success</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tls_hostif_wjoin_success &rArr; tls_hostif_send_event_wjoin_success &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[5db]"></a>tls_hostif_wjoin_failed</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tls_hostif_wjoin_failed &rArr; tls_hostif_send_event_wjoin_failed &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[ea]"></a>tls_hostif_net_status_changed</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tls_hostif_net_status_changed &rArr; hostif_default_socket_stop_tmr &rArr; tls_hostif_close_default_socket &rArr; tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_failed
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_wjoin_success
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkup
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_net_up
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_net_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[5f3]"></a>atcmd_lpinit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_disconnect &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_litepoint_start
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
</UL>

<P><STRONG><a name="[5fb]"></a>ping_parse_param</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ping_parse_param
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[6d]"></a>ping_proc</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ping_proc &rArr; ping_test_create_task &rArr; tls_os_task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_parse_param
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5ff]"></a>hspi_socket_recv</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = hspi_socket_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
</UL>

<P><STRONG><a name="[ef]"></a>hspi_tx</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = hspi_tx &rArr; hspi_socket_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[600]"></a>hspi_fwup_rsp</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hspi_fwup_rsp &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_hostif
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
</UL>

<P><STRONG><a name="[601]"></a>hspi_fwup_send</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hspi_fwup_send &rArr; tls_fwup_request_sync &rArr; tls_fwup_request_async &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
</UL>

<P><STRONG><a name="[602]"></a>hspi_net_send</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = hspi_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
</UL>

<P><STRONG><a name="[ee]"></a>hspi_rx_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = hspi_rx_data &rArr; hspi_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_net_send
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>hspi_rx_cmd</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = hspi_rx_cmd &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_reg_write32
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_hdr_check
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[607]"></a>tls_hspi_ram_info_dump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[f0]"></a>tls_hspi_rx_cmd_cb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_hspi_rx_cmd_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>tls_hspi_rx_data_cb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_hspi_rx_data_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>tls_hspi_tx_data_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>hspi_send_tx_msg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = hspi_send_tx_msg &rArr; tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[608]"></a>uart_tx_event_finish_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = uart_tx_event_finish_callback &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>

<P><STRONG><a name="[f4]"></a>uart_tx_socket_finish_callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = uart_tx_socket_finish_callback &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[609]"></a>cache_tcp_recv</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = cache_tcp_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>

<P><STRONG><a name="[f9]"></a>uart_send_tx_msg</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uart_send_tx_msg &rArr; tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>uart_get_uart1_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>uart_set_uart1_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uart_set_uart1_mode &rArr; tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>uart_set_uart0_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uart_set_uart0_mode &rArr; tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>uart_set_uart1_sock_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[612]"></a>data_loop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
</UL>

<P><STRONG><a name="[60f]"></a>cmd_loop</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = cmd_loop &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
</UL>

<P><STRONG><a name="[611]"></a>ricmd_handle_sync</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
</UL>

<P><STRONG><a name="[613]"></a>uart_fwup_rsp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = uart_fwup_rsp &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_event_msg &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[619]"></a>modify_atcmd_tail</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modify_atcmd_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
</UL>

<P><STRONG><a name="[616]"></a>find_atcmd_eol</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_atcmd_eol
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
</UL>

<P><STRONG><a name="[618]"></a>parse_atcmd_eol</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_atcmd_eol &rArr; find_atcmd_eol
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_atcmd_eol
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_atcmd_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>

<P><STRONG><a name="[f7]"></a>tls_uart0_task_rx_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tls_uart0_task_rx_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[61a]"></a>parse_atcmd_line</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = parse_atcmd_line &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[536]"></a>swap_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be16
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_net_send
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_send
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
</UL>

<P><STRONG><a name="[5b3]"></a>swap_32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be32
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[5b2]"></a>get_unaligned_le16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be16
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[5b0]"></a>get_unaligned_le32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_be32
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[5b6]"></a>get_unaligned_be16</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_unaligned_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le16
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
</UL>

<P><STRONG><a name="[5b5]"></a>get_unaligned_be32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_unaligned_be32
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le32
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
</UL>

<P><STRONG><a name="[5ef]"></a>tls_reg_write32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regw_proc
</UL>

<P><STRONG><a name="[651]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[64c]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
</UL>

<P><STRONG><a name="[662]"></a>osSwtmrDelete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[65a]"></a>osQueueBufferOperate</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osQueueBufferOperate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[65e]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osQueueWriteParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[661]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrAdjust
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[672]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osQueueReadParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[6c9]"></a>osRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[66f]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventInit
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
</UL>

<P><STRONG><a name="[650]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[64e]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventDestory
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>

<P><STRONG><a name="[6cc]"></a>do_memp_free_pool</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[6cf]"></a>free_socket</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[104]"></a>err_tcp</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[6da]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[ff]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[6dd]"></a>do_memp_malloc_pool</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[6df]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6e1]"></a>pbuf_free_ooseq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[fe]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[6e4]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[6e7]"></a>icmp_send_response</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[6eb]"></a>pbuf_header_impl</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[6ed]"></a>igmp_start_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[6ee]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[6f6]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[6fe]"></a>tcp_input_delayed_close</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6ff]"></a>tcp_create_segment</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[703]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[705]"></a>tcp_remove_listener</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[704]"></a>tcp_listen_closed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_listen_closed
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[707]"></a>tcp_output_alloc_header</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[100]"></a>tcpip_tcp_timer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[70f]"></a>tcp_close_shutdown</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[719]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[71c]"></a>tcp_receive</STRONG> (Thumb, 2482 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[71f]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[71e]"></a>tcp_parseopt</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[720]"></a>tcp_process</STRONG> (Thumb, 1532 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[721]"></a>tcp_kill_prio</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[722]"></a>tcp_kill_state</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[723]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[725]"></a>tcp_listen_input</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[727]"></a>tcp_timewait_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[72a]"></a>udp_input_local_match</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[72c]"></a>raw_input_match</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[72d]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[72e]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[730]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[731]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[732]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[738]"></a>tcp_output_segment</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[739]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[73b]"></a>tcp_write_checks</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[73c]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[103]"></a>poll_tcp</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>sent_tcp</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[73d]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[749]"></a>netconn_drain</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[74f]"></a>netconn_apimsg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[753]"></a>alloc_socket</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = alloc_socket &rArr; sys_arch_protect &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[756]"></a>get_socket</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[75b]"></a>tcp_new_port</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_isr_count
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[762]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[769]"></a>netconn_close_shutdown</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>

<P><STRONG><a name="[76d]"></a>igmp_ip_output_if</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[76e]"></a>igmp_send</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[770]"></a>igmp_remove_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[772]"></a>igmp_lookup_group</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[777]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 688 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[105]"></a>recv_tcp</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[779]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[106]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[784]"></a>lwip_getaddrname</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>

<P><STRONG><a name="[789]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_socket_unregister_membership &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[78a]"></a>lwip_socket_register_membership</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_socket_register_membership &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[78c]"></a>tryget_socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[78b]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 992 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_impl &rArr; igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[107]"></a>lwip_setsockopt_callback</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_callback &rArr; lwip_setsockopt_impl &rArr; igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[78f]"></a>lwip_getsockopt_impl</STRONG> (Thumb, 1022 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_getsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
</UL>

<P><STRONG><a name="[108]"></a>lwip_getsockopt_callback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = lwip_getsockopt_callback &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>accept_function</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; tls_os_queue_create &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_delayed
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>tcp_accept_null</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>event_callback</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[79c]"></a>netconn_recv_data</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[10c]"></a>recv_udp</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>recv_raw</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7b8]"></a>pcb_new</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[7bd]"></a>lwip_selscan</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = lwip_selscan &rArr; sys_arch_protect &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[10f]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7c5]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[7c8]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[7c9]"></a>dns_send</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[7ca]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[7cb]"></a>dns_check_entry</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[7cc]"></a>dns_correct_response</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[7ce]"></a>dns_skip_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[7cf]"></a>dns_compare_name</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[10e]"></a>dns_recv</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7d0]"></a>dns_alloc_random_port</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[7d1]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[7d2]"></a>dns_enqueue</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[7d4]"></a>dns_lookup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[844]"></a>compare_ether_addr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[7e5]"></a>dl_list_add_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
</UL>

<P><STRONG><a name="[7de]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
</UL>

<P><STRONG><a name="[7dc]"></a>net_free_socket</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
</UL>

<P><STRONG><a name="[7df]"></a>net_alloc_socket</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
</UL>

<P><STRONG><a name="[7e1]"></a>net_send_event_to_hostif</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_send_event_to_hostif
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
</UL>

<P><STRONG><a name="[111]"></a>net_tcp_err_cb</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = net_tcp_err_cb &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>net_tcp_poll_cb</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = net_tcp_poll_cb &rArr; net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7e2]"></a>net_tcp_close_connect</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
</UL>

<P><STRONG><a name="[7e3]"></a>raw_sk_alloc_pbuf_custom</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = raw_sk_alloc_pbuf_custom &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
</UL>

<P><STRONG><a name="[7e4]"></a>raw_sk_free_pbuf_custom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = raw_sk_free_pbuf_custom &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
</UL>

<P><STRONG><a name="[112]"></a>raw_sk_free_pbuf_custom_fn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = raw_sk_free_pbuf_custom_fn &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>net_tcp_recv_cb</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = net_tcp_recv_cb &rArr; net_tcp_err_cb &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_set_sourceip
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_alloc_pbuf_custom
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>net_tcp_connect_cb</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = net_tcp_connect_cb &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>net_tcp_accept_cb</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = net_tcp_accept_cb &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>net_udp_recv_cb</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = net_udp_recv_cb &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_set_sourceip
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7e8]"></a>net_tcp_start</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = net_tcp_start &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
</UL>

<P><STRONG><a name="[7e9]"></a>net_udp_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_udp_start &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
</UL>

<P><STRONG><a name="[7ea]"></a>net_skt_tcp_send</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = net_skt_tcp_send &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
</UL>

<P><STRONG><a name="[119]"></a>net_do_send</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = net_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>net_do_write</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = net_do_write &rArr; net_skt_tcp_send &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_skt_tcp_send
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>do_create_connect</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = do_create_connect &rArr; net_tcp_start &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_start
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>do_close_connect</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = do_close_connect &rArr; net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7ec]"></a>netconn_msg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = netconn_msg &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
</UL>

<P><STRONG><a name="[7f0]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[11b]"></a>cyclic_timer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = cyclic_timer &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[7f5]"></a>etharp_raw</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[7f6]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[7f8]"></a>netif_issue_reports</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[7f9]"></a>dhcp_delete_msg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7fa]"></a>dhcp_option_trailer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7fd]"></a>dhcp_option_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7fc]"></a>dhcp_option</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[800]"></a>dhcp_option_short</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7fb]"></a>dhcp_create_msg</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_isr_count
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7ff]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[7fe]"></a>dhcp_discover</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[802]"></a>dhcp_option_long</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[801]"></a>dhcp_reboot</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[806]"></a>etharp_free_entry</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_remove_static_entry
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[807]"></a>etharp_find_entry</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_remove_static_entry
</UL>

<P><STRONG><a name="[11d]"></a>netif_loop_output_ipv4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = netif_loop_output_ipv4 &rArr; netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>netif_loopif_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[80b]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[82e]"></a>inet_cksum_pseudo_partial_base</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[831]"></a>sys_check_timeouts</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
</UL>

<P><STRONG><a name="[833]"></a>sys_timeouts_sleeptime_p</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_timeouts_sleeptime_p &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
</UL>

<P><STRONG><a name="[835]"></a>alg_napt_try_lock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
</UL>

<P><STRONG><a name="[89f]"></a>alg_napt_port_alloc</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = alg_napt_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4udp
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4tcp
</UL>

<P><STRONG><a name="[89e]"></a>alg_napt_icmp_id_alloc</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alg_napt_icmp_id_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
</UL>

<P><STRONG><a name="[836]"></a>alg_napt_table_check_4tcp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_check_4tcp &rArr; alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_try_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_try
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check
</UL>

<P><STRONG><a name="[838]"></a>alg_napt_table_check_4udp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_check_4udp &rArr; alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_try_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_try
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check
</UL>

<P><STRONG><a name="[839]"></a>alg_napt_table_check_4ic</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_check_4ic &rArr; alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_try_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_try
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check
</UL>

<P><STRONG><a name="[83a]"></a>alg_napt_table_check_4gre</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check
</UL>

<P><STRONG><a name="[11f]"></a>alg_napt_table_check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_check &rArr; alg_napt_table_check_4ic &rArr; alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4gre
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[83b]"></a>alg_napt_table_check_try</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_check_try &rArr; alg_napt_table_check_4ic &rArr; alg_napt_try_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[83d]"></a>alg_hdr_16bitsum</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alg_hdr_16bitsum
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
</UL>

<P><STRONG><a name="[83c]"></a>alg_iphdr_chksum</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alg_iphdr_chksum &rArr; alg_hdr_16bitsum
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_hdr_16bitsum
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[83e]"></a>alg_tcpudphdr_chksum</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alg_tcpudphdr_chksum &rArr; alg_hdr_16bitsum
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_hdr_16bitsum
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
</UL>

<P><STRONG><a name="[83f]"></a>alg_output</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = alg_output &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[842]"></a>alg_output2</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = alg_output2 &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[843]"></a>low_level_input</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[847]"></a>alg_icmp_proc</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = alg_icmp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_lock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_bssid
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getmac
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[84b]"></a>alg_tcp_proc</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = alg_tcp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4tcp
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_lock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_bssid
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getmac
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[84d]"></a>alg_udp_proc</STRONG> (Thumb, 656 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = alg_udp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_update_4udp
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4udp
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_lock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_bssid
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getmac
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[850]"></a>alg_gre_proc</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = alg_gre_proc &rArr; alg_output &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output2
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_bssid
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getmac
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[857]"></a>dhcp_option_hostname</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_hostname &rArr; dhcp_option
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[858]"></a>dhcp_select</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[859]"></a>dhcp_handle_offer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[85a]"></a>dhcp_handle_nak</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[85b]"></a>dhcp_bind</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[85c]"></a>dhcp_handle_ack</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[85e]"></a>dhcp_parse_reply</STRONG> (Thumb, 1138 bytes, Stack size 80 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[120]"></a>dhcp_recv</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[85f]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_connect &rArr; udp_bind &rArr; alg_napt_port_is_used &rArr; alg_napt_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[860]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[862]"></a>dhcp_t1_timeout</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[863]"></a>dhcp_rebind</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[864]"></a>dhcp_t2_timeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[867]"></a>dhcp_timeout</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[870]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[873]"></a>igmp_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[875]"></a>low_level_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[121]"></a>low_level_output</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; tls_wifi_buffer_release &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>ethernetif_igmp_mac_filter</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ethernetif_igmp_mac_filter &rArr; tls_hw_set_multicast_key &rArr; hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>netif_status_changed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_status_changed
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_get_ip_timeout_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>netif_status_changed2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_status_changed2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>wifi_status_changed</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_status_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>netifapi_do_netif_common</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>netifapi_do_netif_add</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>tcpip_thread</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>netifapi_do_netif_set_addr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>pbuf_free_int</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[760]"></a>alg_napt_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = alg_napt_unlock &rArr; tls_os_sem_release &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osPriqueueEnqueue &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
</UL>

<P><STRONG><a name="[75f]"></a>alg_napt_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = alg_napt_lock &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
</UL>

<P><STRONG><a name="[7e0]"></a>dl_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[7db]"></a>dl_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
</UL>

<P><STRONG><a name="[837]"></a>alg_napt_mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = alg_napt_mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4udp
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4tcp
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
</UL>

<P><STRONG><a name="[849]"></a>alg_napt_table_insert_4ic</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_insert_4ic &rArr; alg_napt_mem_alloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_alloc
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_icmp_id_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[84c]"></a>alg_napt_table_insert_4tcp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_insert_4tcp &rArr; alg_napt_mem_alloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_alloc
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
</UL>

<P><STRONG><a name="[84e]"></a>alg_napt_table_insert_4udp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = alg_napt_table_insert_4udp &rArr; alg_napt_mem_alloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_alloc
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_mem_free
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
</UL>

<P><STRONG><a name="[84f]"></a>alg_napt_table_update_4udp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
</UL>

<P><STRONG><a name="[848]"></a>alg_deliver2lwip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[89d]"></a>alg_napt_mem_alloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = alg_napt_mem_alloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4udp
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4tcp
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
</UL>

<P><STRONG><a name="[80]"></a>csNullInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>csArc4Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = csArc4Init &rArr; Arc4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>csNullEncrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csNullEncrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>csNullDecrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csNullDecrypt &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>csNullGenerateMac</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = csNullGenerateMac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>csNullVerifyMac</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = csNullVerifyMac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>csShaGenerateMac</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = csShaGenerateMac &rArr; tlsHMACSha2 &rArr; psHmacSha2Init &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha2
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>csShaVerifyMac</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = csShaVerifyMac &rArr; tlsHMACSha2 &rArr; psHmacSha2Init &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha2
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>csMd5GenerateMac</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = csMd5GenerateMac &rArr; tlsHMACMd5 &rArr; psHmacMd5Init &rArr; tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>csMd5VerifyMac</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, wm_matrixssl_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = csMd5VerifyMac &rArr; tlsHMACMd5 &rArr; psHmacMd5Init &rArr; tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_matrixssl_compile.o(.data)
</UL>
<P><STRONG><a name="[8b4]"></a>pSha1</STRONG> (Thumb, 218 bytes, Stack size 296 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
</UL>

<P><STRONG><a name="[8b5]"></a>pMd5</STRONG> (Thumb, 214 bytes, Stack size 280 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
</UL>

<P><STRONG><a name="[8b7]"></a>pSha2</STRONG> (Thumb, 240 bytes, Stack size 384 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
</UL>

<P><STRONG><a name="[8b9]"></a>tlsGenerateFinishedHash</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf2
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
</UL>

<P><STRONG><a name="[8bc]"></a>initSessionEntryChronList</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpenWithConfig
</UL>

<P><STRONG><a name="[8c2]"></a>verifyReadKeys</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[8c3]"></a>matrixSslLoadKeyMaterialMem</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadRsaKeysMem
</UL>

<P><STRONG><a name="[8d9]"></a>getTicketKeys</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
</UL>

<P><STRONG><a name="[8de]"></a>wildcardMatch</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
</UL>

<P><STRONG><a name="[8e2]"></a>encryptRecord</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslWritePad
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptFlight
</UL>

<P><STRONG><a name="[8e3]"></a>writeRecordHeader</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psWriteRecordInfo
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psWriteHandshakeHeader
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewSessionTicket
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
</UL>

<P><STRONG><a name="[8f8]"></a>revertToDefaultBufsize</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[8f9]"></a>encryptFlight</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlightList
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[8fa]"></a>nowDoSkePka</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privRsaEncryptSignedElement
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPkaAfter
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPriv
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[8fb]"></a>postponeEncryptRecord</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewSessionTicket
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
</UL>

<P><STRONG><a name="[8fd]"></a>postponeSnapshotHSHash</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
</UL>

<P><STRONG><a name="[8fc]"></a>writeFinished</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeSnapshotHSHash
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[8fe]"></a>writeChangeCipherSpec</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[8ff]"></a>createKeyBlock</STRONG> (Thumb, 384 bytes, Stack size 320 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
</UL>

<P><STRONG><a name="[903]"></a>writeClientKeyExchange</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[904]"></a>writeMultiRecordCertificate</STRONG> (Thumb, 1002 bytes, Stack size 104 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
</UL>

<P><STRONG><a name="[905]"></a>writeCertificate</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMultiRecordCertificate
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[906]"></a>writeAlert</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeClosureAlert
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[90b]"></a>secureWriteAdditions</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCertFragOverhead
</UL>

<P><STRONG><a name="[907]"></a>writeServerHello</STRONG> (Thumb, 956 bytes, Stack size 72 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[908]"></a>writeNewSessionTicket</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCreateSessionTicket
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSessionTicketLen
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[909]"></a>writeServerHelloDone</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postponeEncryptRecord
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[90a]"></a>addCertFragOverhead</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secureWriteAdditions
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[90d]"></a>parseSSLHandshake</STRONG> (Thumb, 5850 bytes, Stack size 192 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUserCertValidator
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUnlockSessionTicket
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixServerSetKeysSNI
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetKexFlags
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csCheckCertAgainstCipherSuite
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceInt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[913]"></a>addCompressCount</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, wm_matrixssl_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[928]"></a>HTTPIntrnSessionGetUpTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HTTPIntrnSessionGetUpTime &rArr; HTTPWrapperGetUpTime
</UL>
<BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>

<P><STRONG><a name="[929]"></a>HTTPIntrnSessionReset</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnSessionReset &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReset
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[92d]"></a>HTTPIntrnHeadersAdd</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTTPIntrnHeadersAdd &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[930]"></a>HTTPIntrnSessionEvalTimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTTPIntrnSessionEvalTimeout &rArr; HTTPIntrnSessionGetUpTime &rArr; HTTPWrapperGetUpTime
</UL>
<BR>[Calls]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionGetUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[931]"></a>HTTPIntrnSend</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[935]"></a>HTTPIntrnHeadersFind</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
</UL>

<P><STRONG><a name="[936]"></a>HTTPIntrnHeadersRemove</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnHeadersRemove &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[937]"></a>HTTPIntrnHeadersSend</STRONG> (Thumb, 510 bytes, Stack size 88 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnHeadersSend &rArr; HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperItoa
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[93b]"></a>HTTPIntrnConnectionOpen</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnConnectionOpen &rArr; HTTPWrapperGetHostByName &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrExtract
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[93e]"></a>HTTPIntrnSetURL</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnSetURL &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrSearch
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[941]"></a>HTTPIntrnHeadersParse</STRONG> (Thumb, 696 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnHeadersParse &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrGetToken
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[942]"></a>HTTPIntrnRecv</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
</UL>

<P><STRONG><a name="[943]"></a>HTTPIntrnGetRemoteHeaders</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[944]"></a>HTTPIntrnHeadersReceive</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnHeadersReceive &rArr; HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientRecvResponse
</UL>

<P><STRONG><a name="[94a]"></a>HTTPIntrnGetRemoteChunkLength</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
</UL>

<P><STRONG><a name="[94f]"></a>HTTPIntrnResizeBuffer</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[95b]"></a>http_snd_req_local</STRONG> (Thumb, 344 bytes, Stack size 112 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = http_snd_req_local &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindCloseHeader
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientRecvResponse
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
</UL>

<P><STRONG><a name="[132]"></a>http_client_rx</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = http_client_rx &rArr; http_snd_req_local &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req_local
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_http_compile.o(.text)
</UL>
<P><STRONG><a name="[95e]"></a>ping_test_chksum</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ping_test_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
</UL>

<P><STRONG><a name="[95d]"></a>ping_test_pack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ping_test_pack &rArr; ping_test_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_chksum
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
</UL>

<P><STRONG><a name="[95f]"></a>ping_test_unpack</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ping_test_unpack &rArr; ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
</UL>

<P><STRONG><a name="[960]"></a>ping_test_init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ping_test_init &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[961]"></a>ping_test_stat</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ping_test_stat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[963]"></a>ping_test_recv</STRONG> (Thumb, 274 bytes, Stack size 128 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[964]"></a>ping_test_send</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ping_test_send &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[965]"></a>ping_test_run</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ping_test_run &rArr; ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_task
</UL>

<P><STRONG><a name="[133]"></a>ping_test_task</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ping_test_task &rArr; ping_test_run &rArr; ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>ping_test_stop_timeout</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ping_test_stop_timeout &rArr; ping_test_stop &rArr; tls_os_timer_start &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>ping_test_abort_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[96a]"></a>free_current_pack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = free_current_pack &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
</UL>

<P><STRONG><a name="[96c]"></a>fs_malloc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[96d]"></a>fs_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[139]"></a>conn_err</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = conn_err &rArr; mem_free &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[972]"></a>close_conn</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_send_web_connect_msg
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[973]"></a>extract_uri_parameters</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extract_uri_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
</UL>

<P><STRONG><a name="[136]"></a>http_sent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = http_sent &rArr; send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[974]"></a>send_data</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_line
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_jump_html
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
</UL>

<P><STRONG><a name="[13a]"></a>http_poll</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = http_poll &rArr; send_jump_html &rArr; send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_to_sys
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_jump_html
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_html
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>restart_tmr_handler</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = restart_tmr_handler &rArr; tls_sys_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[978]"></a>resethandler</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = resethandler &rArr; tls_os_timer_change &rArr; LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
</UL>

<P><STRONG><a name="[138]"></a>http_recv</STRONG> (Thumb, 756 bytes, Stack size 56 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = http_recv &rArr; extract_html_recive &rArr; send_jump_html &rArr; send_data &rArr; close_conn &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_html_recive
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_to_sys
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>http_accept</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = http_accept &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(.text)
</UL>
<P><STRONG><a name="[97e]"></a>HtmlConvertURLStr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HtmlConvertURLStr &rArr; strtohexarray
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohexarray
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_webindex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cgi_config
</UL>

<P><STRONG><a name="[981]"></a>strnlen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_get_need_len
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_parse
</UL>

<P><STRONG><a name="[980]"></a>flash_manager_parse</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = flash_manager_parse &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_destroy_flash_info
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
</UL>

<P><STRONG><a name="[986]"></a>flash_manager_get_need_len</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = flash_manager_get_need_len &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
</UL>

<P><STRONG><a name="[987]"></a>flash_manager_write_buffer</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, flash_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = flash_manager_write_buffer &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
</UL>

<P><STRONG><a name="[99b]"></a>strnlen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_user
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_id
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_check_device_info
</UL>

<P><STRONG><a name="[994]"></a>mqtt_strdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mqtt_strdup &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
</UL>

<P><STRONG><a name="[13e]"></a>mqtt_cmd_ioctl</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_cmd_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(.text)
</UL>
<P><STRONG><a name="[995]"></a>mqtt_free_params</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = mqtt_free_params &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_param
</UL>

<P><STRONG><a name="[996]"></a>mqtt_check_param</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mqtt_check_param &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
</UL>

<P><STRONG><a name="[997]"></a>mqtt_dup_param</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mqtt_dup_param &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_params
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_strdup
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_init
</UL>

<P><STRONG><a name="[998]"></a>mqtt_free_dynamic_info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = mqtt_free_dynamic_info &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[999]"></a>mqtt_free_device_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = mqtt_free_device_info &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_dup_device_info
</UL>

<P><STRONG><a name="[99a]"></a>mqtt_check_device_info</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mqtt_check_device_info &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[99c]"></a>mqtt_dup_device_info</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mqtt_dup_device_info &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_free_device_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9a1]"></a>mqtt_is_connectting_with_deviceid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_isconnected
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[99d]"></a>generate_client_id</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = generate_client_id &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[99e]"></a>generate_client_passwd</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = generate_client_passwd &rArr; hmac_generate_passwd &rArr; mbedtls_hmac_calc &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_generate_passwd
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[99f]"></a>generate_client_user</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = generate_client_user &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_server
</UL>

<P><STRONG><a name="[9a0]"></a>connect_server</STRONG> (Thumb, 654 bytes, Stack size 144 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = connect_server &rArr; mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_connect
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_user
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_passwd
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_client_id
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_is_connectting_with_deviceid
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9a3]"></a>mqtt_get_topic</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_secret_topic
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_device_topic
</UL>

<P><STRONG><a name="[9a4]"></a>mqtt_get_device_topic</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
</UL>

<P><STRONG><a name="[9a5]"></a>mqtt_get_secret_topic</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mqtt_get_secret_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_topic
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_topic
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
</UL>

<P><STRONG><a name="[9a6]"></a>mqtt_parse_secret_topic</STRONG> (Thumb, 938 bytes, Stack size 56 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mqtt_parse_secret_topic &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
</UL>

<P><STRONG><a name="[9aa]"></a>mqtt_send_secret_ack</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mqtt_send_secret_ack &rArr; mqtt_get_secret_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_publish
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_secret_topic
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_recv_secret_topic
</UL>

<P><STRONG><a name="[13d]"></a>mqtt_recv_secret_topic</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = mqtt_recv_secret_topic &rArr; mqtt_parse_secret_topic &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_write
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_send_secret_ack
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_parse_secret_topic
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>mqtt_recv_cmd_topic</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mqtt_recv_cmd_topic &rArr; mqtt_cmd_ioctl &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_cmd_ioctl
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(.text)
</UL>
<P><STRONG><a name="[9ac]"></a>mqtt_subscribe_topic</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mqtt_subscribe_topic &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_al_subscribe
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_secret_topic
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_get_device_topic
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_is_connectting_with_deviceid
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9ae]"></a>mqtt_read_flash_info</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mqtt_read_flash_info &rArr; flash_manager_read &rArr; flash_manager_parse &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_read
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_destroy_flash_info
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9b4]"></a>mqtt_inc_fail_cnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_bind
</UL>

<P><STRONG><a name="[9ca]"></a>NewMessageData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttclient.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[9e1]"></a>getNextPacketId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mqttclient.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[9bc]"></a>sendPacket</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sendPacket &rArr; TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[9c6]"></a>decodePacket</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decodePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[9c5]"></a>readPacket</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = readPacket &rArr; TimerCountdown &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9c8]"></a>MQTTTopicMatched</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTTopicMatched
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[9e4]"></a>MQTTSetMessageHandlerArgs</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mqttclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSetMessageHandlerArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
</UL>

<P><STRONG><a name="[9ff]"></a>MQTTPacket_decodenb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mqttpacket.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_readnb
</UL>

<P><STRONG><a name="[a0a]"></a>los_mqtt_raw_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = los_mqtt_raw_read &rArr; atiny_net_recv_timeout &rArr; atiny_net_recv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
</UL>

<P><STRONG><a name="[a0c]"></a>los_mqtt_tls_read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064 + Unknown Stack Size
<LI>Call Chain = los_mqtt_tls_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_read
</UL>

<P><STRONG><a name="[13f]"></a>los_read</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104 + Unknown Stack Size
<LI>Call Chain = los_read &rArr; los_mqtt_tls_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_tls_read
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_mqtt_raw_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>los_write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4088 + Unknown Stack Size
<LI>Call Chain = los_write &rArr; dtls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_write
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.text)
</UL>
<P><STRONG><a name="[a11]"></a>los_net_raw_connect</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = los_net_raw_connect &rArr; atiny_net_connect &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
</UL>

<P><STRONG><a name="[a13]"></a>los_net_tls_connect</STRONG> (Thumb, 240 bytes, Stack size 112 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600 + Unknown Stack Size
<LI>Call Chain = los_net_tls_connect &rArr; dtls_shakehand &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_new
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
</UL>

<P><STRONG><a name="[a17]"></a>los_net_connect</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640 + Unknown Stack Size
<LI>Call Chain = los_net_connect &rArr; los_net_tls_connect &rArr; dtls_shakehand &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_connect
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
</UL>

<P><STRONG><a name="[a18]"></a>los_net_raw_disconnect</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = los_net_raw_disconnect &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
</UL>

<P><STRONG><a name="[a1a]"></a>los_net_tls_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = los_net_tls_disconnect &rArr; dtls_ssl_destroy &rArr; mbedtls_net_free &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_ssl_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
</UL>

<P><STRONG><a name="[a1b]"></a>los_net_disconnect</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = los_net_disconnect &rArr; los_net_tls_disconnect &rArr; dtls_ssl_destroy &rArr; mbedtls_net_free &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_tls_disconnect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_raw_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disconnect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
</UL>

<P><STRONG><a name="[a1c]"></a>task_create</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__connect
</UL>

<P><STRONG><a name="[a1d]"></a>task_delete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = task_delete &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disconnect
</UL>

<P><STRONG><a name="[141]"></a>mqtt_loop_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mqtt_loop_entry &rArr; MQTTYield &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>__init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __init &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>__deinit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __deinit &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>__connect</STRONG> (Thumb, 678 bytes, Stack size 136 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776 + Unknown Stack Size
<LI>Call Chain = __connect &rArr; los_net_connect &rArr; los_net_tls_connect &rArr; dtls_shakehand &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_connect
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>__disconnect</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = __disconnect &rArr; los_net_disconnect &rArr; los_net_tls_disconnect &rArr; dtls_ssl_destroy &rArr; mbedtls_net_free &rArr; atiny_net_close &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_net_disconnect
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>general_dealer</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = general_dealer
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>__subscribe</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __subscribe &rArr; MQTTSubscribeWithResultsArgs &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResultsArgs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>__unsubscribe</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __unsubscribe &rArr; MQTTUnsubscribe &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>__publish</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __publish &rArr; MQTTPublish &rArr; MutexUnlock &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>__check_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __check_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_port.o(.constdata)
</UL>
<P><STRONG><a name="[a22]"></a>atiny_net_write_sock</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, atiny_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = atiny_net_write_sock &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send_timeout
</UL>

<P><STRONG><a name="[a23]"></a>my_debug</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dtls_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>

<P><STRONG><a name="[144]"></a>atiny_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = atiny_calloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls_interface.o(.text)
</UL>
<P><STRONG><a name="[a3d]"></a>dtls_gettime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dtls_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = dtls_gettime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtls_shakehand
</UL>

<P><STRONG><a name="[a4a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[a4c]"></a>aes_gen_tables</STRONG> (Thumb, 574 bytes, Stack size 2068 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2068<LI>Call Chain = aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>

<P><STRONG><a name="[a5a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_free
</UL>

<P><STRONG><a name="[a68]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[a81]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[a8a]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[a98]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[a8f]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a95]"></a>mpi_mul_hlp</STRONG> (Thumb, 1596 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a9d]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[aa0]"></a>mpi_write_hlp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[aa7]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[aa4]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[aa5]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[aac]"></a>mpi_check_small_factors</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[aad]"></a>mpi_miller_rabin</STRONG> (Thumb, 608 bytes, Stack size 112 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[ab6]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_free
</UL>

<P><STRONG><a name="[ab2]"></a>F</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = F
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_dec
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blowfish_enc
</UL>

<P><STRONG><a name="[ab1]"></a>blowfish_enc</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = blowfish_enc &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_setkey
</UL>

<P><STRONG><a name="[ab3]"></a>blowfish_dec</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, blowfish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
</UL>

<P><STRONG><a name="[abe]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_free
</UL>

<P><STRONG><a name="[ac0]"></a>camellia_feistel</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camellia_feistel
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_enc
</UL>

<P><STRONG><a name="[ace]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>

<P><STRONG><a name="[acf]"></a>ccm_auth_crypt</STRONG> (Thumb, 860 bytes, Stack size 120 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[ad6]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>

<P><STRONG><a name="[156]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>get_zeros_padding</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>add_zeros_padding</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>get_pkcs_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[adb]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[1ab]"></a>gcm_ctx_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>gcm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>ccm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccm_ctx_alloc &rArr; mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>ccm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>aes_crypt_cfb128_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_cfb128_wrap &rArr; mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>aes_crypt_ctr_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_ctr_wrap &rArr; mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2428<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>aes_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>aes_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>camellia_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = camellia_crypt_ecb_wrap &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>camellia_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = camellia_crypt_cbc_wrap &rArr; mbedtls_camellia_crypt_cbc &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>camellia_crypt_cfb128_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = camellia_crypt_cfb128_wrap &rArr; mbedtls_camellia_crypt_cfb128 &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_cfb128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>camellia_crypt_ctr_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = camellia_crypt_ctr_wrap &rArr; mbedtls_camellia_crypt_ctr &rArr; mbedtls_camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>camellia_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = camellia_setkey_dec_wrap &rArr; mbedtls_camellia_setkey_dec &rArr; mbedtls_camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>camellia_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = camellia_setkey_enc_wrap &rArr; mbedtls_camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>camellia_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = camellia_ctx_alloc &rArr; mbedtls_camellia_init
</UL>
<BR>[Calls]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>camellia_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = camellia_ctx_free &rArr; mbedtls_camellia_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_camellia_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>gcm_camellia_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_camellia_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>ccm_camellia_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ccm_camellia_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>des_crypt_ecb_wrap</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des_crypt_ecb_wrap &rArr; mbedtls_des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>des3_crypt_ecb_wrap</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des3_crypt_ecb_wrap &rArr; mbedtls_des3_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>des_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = des_crypt_cbc_wrap &rArr; mbedtls_des_crypt_cbc &rArr; mbedtls_des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>des3_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = des3_crypt_cbc_wrap &rArr; mbedtls_des3_crypt_cbc &rArr; mbedtls_des3_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>des_setkey_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des_setkey_dec_wrap &rArr; mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>des_setkey_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = des_setkey_enc_wrap &rArr; mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>des3_set2key_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set2key_dec_wrap &rArr; mbedtls_des3_set2key_dec &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>des3_set2key_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set2key_enc_wrap &rArr; mbedtls_des3_set2key_enc &rArr; des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>des3_set3key_dec_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set3key_dec_wrap &rArr; mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>des3_set3key_enc_wrap</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = des3_set3key_enc_wrap &rArr; mbedtls_des3_set3key_enc &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>des_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = des_ctx_alloc &rArr; mbedtls_des_init
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>des_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = des_ctx_free &rArr; mbedtls_des_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>des3_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = des3_ctx_alloc &rArr; mbedtls_des3_init
</UL>
<BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>des3_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = des3_ctx_free &rArr; mbedtls_des3_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>blowfish_crypt_ecb_wrap</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = blowfish_crypt_ecb_wrap &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>blowfish_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = blowfish_crypt_cbc_wrap &rArr; mbedtls_blowfish_crypt_cbc &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>blowfish_crypt_cfb64_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = blowfish_crypt_cfb64_wrap &rArr; mbedtls_blowfish_crypt_cfb64 &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_cfb64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>blowfish_crypt_ctr_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = blowfish_crypt_ctr_wrap &rArr; mbedtls_blowfish_crypt_ctr &rArr; mbedtls_blowfish_crypt_ecb &rArr; blowfish_dec &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>blowfish_setkey_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = blowfish_setkey_wrap &rArr; mbedtls_blowfish_setkey &rArr; blowfish_enc &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>blowfish_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blowfish_ctx_alloc &rArr; mbedtls_blowfish_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>blowfish_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blowfish_ctx_free &rArr; mbedtls_blowfish_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_blowfish_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>arc4_crypt_stream_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arc4_crypt_stream_wrap &rArr; mbedtls_arc4_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_crypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>arc4_setkey_wrap</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arc4_setkey_wrap &rArr; mbedtls_arc4_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>arc4_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arc4_ctx_alloc &rArr; mbedtls_arc4_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>arc4_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arc4_ctx_free &rArr; mbedtls_arc4_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_arc4_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[afc]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>

<P><STRONG><a name="[af8]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2164<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[af9]"></a>block_cipher_df</STRONG> (Thumb, 292 bytes, Stack size 840 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2932<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[157]"></a>ctr_drbg_self_test_entropy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ctr_drbg_self_test_entropy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctr_drbg.o(.text)
</UL>
<P><STRONG><a name="[b01]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
</UL>

<P><STRONG><a name="[b04]"></a>des3_set2key</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3_set2key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
</UL>

<P><STRONG><a name="[b05]"></a>des3_set3key</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
</UL>

<P><STRONG><a name="[b11]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_free
</UL>

<P><STRONG><a name="[b07]"></a>dhm_read_bignum</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dhm_read_bignum &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_read_params
</UL>

<P><STRONG><a name="[b08]"></a>dhm_check_range</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dhm_check_range &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_params
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_read_params
</UL>

<P><STRONG><a name="[b0e]"></a>dhm_update_blinding</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, dhm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = dhm_update_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
</UL>

<P><STRONG><a name="[b2e]"></a>derive_mpi</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[b36]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 140 bytes, Stack size 176 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[b47]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>

<P><STRONG><a name="[b60]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[b4e]"></a>ecp_modp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>

<P><STRONG><a name="[b4f]"></a>ecp_normalize_jac</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[b50]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 780 bytes, Stack size 64 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[b51]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
</UL>

<P><STRONG><a name="[b52]"></a>ecp_double_jac</STRONG> (Thumb, 1534 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[b53]"></a>ecp_add_mixed</STRONG> (Thumb, 1378 bytes, Stack size 112 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[b54]"></a>ecp_randomize_jac</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[b55]"></a>ecp_comb_fixed</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[b56]"></a>ecp_precompute_comb</STRONG> (Thumb, 294 bytes, Stack size 176 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[b57]"></a>ecp_select_comb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[b58]"></a>ecp_mul_comb_core</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[b59]"></a>ecp_mul_comb</STRONG> (Thumb, 486 bytes, Stack size 368 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[b5a]"></a>ecp_normalize_mxz</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecp_normalize_mxz &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[b5b]"></a>ecp_randomize_mxz</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[b5c]"></a>ecp_double_add_mxz</STRONG> (Thumb, 1240 bytes, Stack size 144 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ecp_double_add_mxz &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[b5d]"></a>ecp_mul_mxz</STRONG> (Thumb, 388 bytes, Stack size 96 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ecp_mul_mxz &rArr; ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[b5e]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[b5f]"></a>ecp_check_pubkey_mx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecp_check_pubkey_mx &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[b62]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[b67]"></a>ecp_group_load</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[b69]"></a>ecp_use_curve25519</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[161]"></a>ecp_mod_p255</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p255 &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[b6a]"></a>ecp_mod_koblitz</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192k1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224k1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
</UL>

<P><STRONG><a name="[160]"></a>ecp_mod_p256k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>ecp_mod_p224k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p224k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>ecp_mod_p192k1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_mod_p192k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>ecp_mod_p521</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_mod_p521 &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[b6b]"></a>fix_negative</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[b6d]"></a>sub32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[b6c]"></a>add32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p224
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[15c]"></a>ecp_mod_p384</STRONG> (Thumb, 1524 bytes, Stack size 96 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>ecp_mod_p256</STRONG> (Thumb, 1184 bytes, Stack size 80 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>ecp_mod_p224</STRONG> (Thumb, 674 bytes, Stack size 80 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p224 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[b6e]"></a>add64</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add64
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
</UL>

<P><STRONG><a name="[b6f]"></a>carry64</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = carry64
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p192
</UL>

<P><STRONG><a name="[159]"></a>ecp_mod_p192</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecp_mod_p192 &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry64
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[b68]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[b72]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
</UL>

<P><STRONG><a name="[b73]"></a>entropy_update</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[b77]"></a>entropy_gather_internal</STRONG> (Thumb, 168 bytes, Stack size 160 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
</UL>

<P><STRONG><a name="[163]"></a>entropy_dummy_source</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = entropy_dummy_source
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[b7a]"></a>mbedtls_entropy_source_self_test_gather</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[b7c]"></a>mbedtls_entropy_source_self_test_check_bits</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[b80]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[b7e]"></a>gcm_gen_table</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[b7f]"></a>gcm_mult</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[b88]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>

<P><STRONG><a name="[164]"></a>hmac_drbg_self_test_entropy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hmac_drbg_self_test_entropy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmac_drbg.o(.text)
</UL>
<P><STRONG><a name="[b8c]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[1d3]"></a>md5_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>md5_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>md5_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>md5_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = md5_ctx_alloc &rArr; mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>md5_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = md5_ctx_free &rArr; mbedtls_md5_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>md5_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>md5_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>ripemd160_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>ripemd160_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ripemd160_update_wrap &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>ripemd160_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ripemd160_finish_wrap &rArr; mbedtls_ripemd160_finish &rArr; mbedtls_ripemd160_update &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>ripemd160_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ripemd160_ctx_alloc &rArr; mbedtls_ripemd160_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>ripemd160_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ripemd160_ctx_free &rArr; mbedtls_ripemd160_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>ripemd160_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ripemd160_clone_wrap &rArr; mbedtls_ripemd160_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>ripemd160_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ripemd160_process_wrap &rArr; mbedtls_ripemd160_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>sha1_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>sha1_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>sha384_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>sha384_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>sha384_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>sha384_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>sha384_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_ctx_alloc &rArr; mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>sha384_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha384_ctx_free &rArr; mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>sha384_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>sha384_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>sha512_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha512_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>sha512_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bb0]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>

<P><STRONG><a name="[bb2]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[bb4]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[bb6]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[bb8]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
</UL>

<P><STRONG><a name="[bbb]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[bbd]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[bbf]"></a>oid_cipher_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
</UL>

<P><STRONG><a name="[bc1]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[bc3]"></a>oid_pkcs12_pbe_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
</UL>

<P><STRONG><a name="[bc7]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
</UL>

<P><STRONG><a name="[bc5]"></a>pem_get_iv</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pem_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[bc6]"></a>pem_pbkdf1</STRONG> (Thumb, 186 bytes, Stack size 136 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des_decrypt
</UL>

<P><STRONG><a name="[bc8]"></a>pem_des_decrypt</STRONG> (Thumb, 84 bytes, Stack size 168 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = pem_des_decrypt &rArr; pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[bc9]"></a>pem_des3_decrypt</STRONG> (Thumb, 84 bytes, Stack size 440 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = pem_des3_decrypt &rArr; mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[bca]"></a>pem_aes_decrypt</STRONG> (Thumb, 90 bytes, Stack size 352 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2764<LI>Call Chain = pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[bcd]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[bce]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
</UL>

<P><STRONG><a name="[bd2]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_get_len &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[bdd]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
</UL>

<P><STRONG><a name="[200]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>rsa_get_bitlen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>rsa_verify_wrap</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>rsa_sign_wrap</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>rsa_alloc_wrap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>rsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>eckey_can_do</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>eckey_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 216 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>eckey_sign_wrap</STRONG> (Thumb, 72 bytes, Stack size 232 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>eckey_check_pair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>eckey_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>eckey_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>eckey_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>eckeydh_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>ecdsa_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>ecdsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>rsa_alt_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>rsa_alt_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>rsa_alt_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_alt_sign_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>rsa_alt_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsa_alt_decrypt_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>rsa_alt_check_pair</STRONG> (Thumb, 164 bytes, Stack size 1096 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = rsa_alt_check_pair &rArr; rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_sign_wrap
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_get_bitlen
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>rsa_alt_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_alt_alloc_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>rsa_alt_free_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_free_wrap &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bde]"></a>pkcs5_parse_pbkdf2_params</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, pkcs5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</UL>

<P><STRONG><a name="[bea]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[be3]"></a>pkcs12_parse_pbe_params</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_pbe_derive_key_iv
</UL>

<P><STRONG><a name="[be4]"></a>pkcs12_fill_buffer</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
</UL>

<P><STRONG><a name="[beb]"></a>pkcs12_pbe_derive_key_iv</STRONG> (Thumb, 206 bytes, Stack size 336 bytes, pkcs12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_parse_pbe_params
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
</UL>

<P><STRONG><a name="[bee]"></a>pk_get_ecparams</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[bef]"></a>pk_group_from_specified</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pk_group_from_specified &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
</UL>

<P><STRONG><a name="[bf0]"></a>pk_group_id_from_group</STRONG> (Thumb, 200 bytes, Stack size 152 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
</UL>

<P><STRONG><a name="[bf1]"></a>pk_group_id_from_specified</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>
<BR>[Called By]<UL><LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[bf2]"></a>pk_use_ecparams</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_specified
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[bf3]"></a>pk_get_ecpubkey</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[bf4]"></a>pk_get_rsapubkey</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[bf6]"></a>pk_get_pk_alg</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[bfa]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[bfc]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[bfd]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</UL>

<P><STRONG><a name="[bfe]"></a>pk_parse_key_pkcs8_encrypted_der</STRONG> (Thumb, 404 bytes, Stack size 2144 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[c01]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ripemd160_free
</UL>

<P><STRONG><a name="[c0a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[c07]"></a>rsa_prepare_blinding</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[c09]"></a>mgf_mask</STRONG> (Thumb, 138 bytes, Stack size 120 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mgf_mask &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[165]"></a>myrand</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = myrand
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(.text)
</UL>
<P><STRONG><a name="[c16]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[c18]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[c1a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>

<P><STRONG><a name="[c52]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_cli.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[c30]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[c55]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
</UL>

<P><STRONG><a name="[c20]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssl_write_renegotiation_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c21]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_signature_algorithms_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c23]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c29]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_write_supported_point_formats_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c2a]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_write_max_fragment_length_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c2b]"></a>ssl_write_truncated_hmac_ext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_write_truncated_hmac_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c2c]"></a>ssl_write_encrypt_then_mac_ext</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_write_encrypt_then_mac_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c2d]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_write_extended_ms_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c24]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_session_ticket_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c25]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_alpn_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c28]"></a>ssl_generate_random</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_generate_random
</UL>
<BR>[Called By]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[c26]"></a>ssl_write_client_hello</STRONG> (Thumb, 742 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c2f]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c32]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_max_fragment_length_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c33]"></a>ssl_parse_truncated_hmac_ext</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_truncated_hmac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c34]"></a>ssl_parse_encrypt_then_mac_ext</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_encrypt_then_mac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c35]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_extended_ms_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c36]"></a>ssl_parse_session_ticket_ext</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_session_ticket_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c37]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c38]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[c39]"></a>ssl_parse_server_hello</STRONG> (Thumb, 1342 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c3e]"></a>ssl_parse_server_dh_params</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ssl_parse_server_dh_params &rArr; mbedtls_dhm_read_params &rArr; dhm_check_range &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_read_params
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[c3f]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_ecdh_params_from_cert
<LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[c41]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[c4a]"></a>ssl_parse_server_psk_hint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_parse_server_psk_hint
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[c42]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_pk_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[c44]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_parse_signature_algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[c48]"></a>ssl_get_ecdh_params_from_cert</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ssl_get_ecdh_params_from_cert &rArr; mbedtls_ecdh_get_params &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[c49]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 968 bytes, Stack size 296 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_ecdh_params_from_cert
<LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_psk_hint
<LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_dh_params
<LI><a href="#[c4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c4c]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c4d]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c4e]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 738 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ssl_psk_derive_premaster &rArr; mbedtls_dhm_calc_secret &rArr; dhm_update_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_calc_secret
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_make_public
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_psk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c51]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 438 bytes, Stack size 104 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c54]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[c67]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[c60]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[c80]"></a>ssl_set_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[c6a]"></a>ssl_check_timer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[c61]"></a>ssl_session_copy</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_session
<LI><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[166]"></a>tls1_prf</STRONG> (Thumb, 464 bytes, Stack size 232 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tls1_prf &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[c63]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 264 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[16c]"></a>tls_prf_sha256</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>tls_prf_sha384</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 142 bytes, Stack size 184 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 56 bytes, Stack size 120 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 118 bytes, Stack size 312 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 56 bytes, Stack size 232 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>ssl_calc_finished_tls</STRONG> (Thumb, 154 bytes, Stack size 256 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ssl_calc_finished_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>ssl_calc_verify_tls</STRONG> (Thumb, 90 bytes, Stack size 192 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ssl_calc_verify_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[c64]"></a>ssl_encrypt_buf</STRONG> (Thumb, 960 bytes, Stack size 88 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[c66]"></a>ssl_decrypt_buf</STRONG> (Thumb, 1376 bytes, Stack size 120 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[c6b]"></a>ssl_parse_record_header</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[c6c]"></a>ssl_prepare_record_content</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[171]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>ssl_update_checksum_md5sha1</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ssl_update_checksum_md5sha1 &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>ssl_update_checksum_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[c79]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[c7a]"></a>ssl_handshake_params_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_dhm_init
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[c7c]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[c7e]"></a>ssl_handshake_init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[c7f]"></a>ssl_session_reset_int</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>

<P><STRONG><a name="[c84]"></a>ssl_append_key_cert</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[c8c]"></a>ssl_start_renegotiation</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3960<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>

<P><STRONG><a name="[c8e]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4000<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[c8f]"></a>ssl_write_real</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_split
</UL>

<P><STRONG><a name="[c91]"></a>ssl_write_split</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ssl_write_split &rArr; ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[c96]"></a>ssl_key_cert_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[c65]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_split
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[c9a]"></a>x509_get_hash_alg</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_hash_alg &rArr; mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[c9c]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[c9f]"></a>x509_parse_int</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[ca0]"></a>x509_date_is_valid</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[c9e]"></a>x509_parse_time</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
<LI><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[cb4]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[cc1]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[cc2]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[caa]"></a>x509_profile_check_key</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[cab]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[cac]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[cad]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[cae]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[caf]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[cb0]"></a>x509_get_key_usage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[cb1]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[cb2]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[cb3]"></a>x509_get_crt_ext</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[cb5]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 828 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_use_ecparams &rArr; pk_group_id_from_specified &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[cbb]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cbc]"></a>x509_info_cert_type</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cbd]"></a>x509_info_key_usage</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cb6]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[cc0]"></a>x509_crt_verifycrl</STRONG> (Thumb, 268 bytes, Stack size 112 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[cc5]"></a>x509_memcasecmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[cc4]"></a>x509_check_wildcard</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[cc6]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[cc7]"></a>x509_name_cmp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[cc8]"></a>x509_crt_check_parent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[cc9]"></a>x509_crt_verify_top</STRONG> (Thumb, 510 bytes, Stack size 152 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[cca]"></a>x509_crt_verify_child</STRONG> (Thumb, 548 bytes, Stack size 152 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3752 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[ccd]"></a>osKernelGetTickCount</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atiny_osdep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>

<P><STRONG><a name="[cd5]"></a>atiny_task_mutex_is_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atiny_osdep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_unlock
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_lock
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_mutex_delete
</UL>

<P><STRONG><a name="[cdb]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[cdc]"></a>cJSON_strdup</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[d17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[cdd]"></a>cJSON_New_Item</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArrayReference
<LI><a href="#[d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObjectReference
<LI><a href="#[d2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringReference
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[d0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNull
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[cdf]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[cde]"></a>parse_number</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[ce4]"></a>ensure</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[ce5]"></a>update_offset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[ce6]"></a>print_number</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[cdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[cea]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[ce9]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[cea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[ceb]"></a>parse_string</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[ce9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[cec]"></a>print_string_ptr</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_string_ptr &rArr; ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[ced]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
</UL>

<P><STRONG><a name="[ced]"></a>print_string</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[cf0]"></a>buffer_skip_whitespace</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[cee]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[cef]"></a>parse_object</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[cf2]"></a>parse_array</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[cf1]"></a>parse_value</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[cf4]"></a>print_object</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[ce5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[cf6]"></a>print_array</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[ce5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[cf5]"></a>print_value</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[ced]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintPreallocated
<LI><a href="#[cfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintBuffered
<LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[cf7]"></a>print</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[ce5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>

<P><STRONG><a name="[cfd]"></a>get_array_item</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[d24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InsertItemInArray
<LI><a href="#[d1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
<LI><a href="#[cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
</UL>

<P><STRONG><a name="[cfe]"></a>get_object_item</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Compare
<LI><a href="#[cff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItemCaseSensitive
<LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_item_in_object
</UL>

<P><STRONG><a name="[d03]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>

<P><STRONG><a name="[d01]"></a>create_reference</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[d09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
</UL>

<P><STRONG><a name="[d02]"></a>add_item_to_array</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[d24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InsertItemInArray
<LI><a href="#[d09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
<LI><a href="#[d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d06]"></a>cast_away_const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArrayReference
<LI><a href="#[d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObjectReference
<LI><a href="#[d2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringReference
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[d05]"></a>add_item_to_object</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
<LI><a href="#[d1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddObjectToObject
<LI><a href="#[d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddRawToObject
<LI><a href="#[d16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[d12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddFalseToObject
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddTrueToObject
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNullToObject
<LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObjectCS
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[d27]"></a>replace_item_in_object</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_free
<LI><a href="#[d25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemViaPointer
<LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[d2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObjectCaseSensitive
<LI><a href="#[d29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
</UL>

<P><STRONG><a name="[d37]"></a>create_profile_data</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = create_profile_data &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
</UL>

<P><STRONG><a name="[d38]"></a>create_service_data</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = create_service_data &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_json_data
</UL>

<P><STRONG><a name="[d39]"></a>create_json_data</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = create_json_data &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_service_data
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
</UL>

<P><STRONG><a name="[d3b]"></a>strnlen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
</UL>

<P><STRONG><a name="[d3d]"></a>demo_get_time</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = demo_get_time &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
</UL>

<P><STRONG><a name="[d3e]"></a>proc_rcv_msg</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = proc_rcv_msg &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
</UL>

<P><STRONG><a name="[d3f]"></a>send_msg_resp</STRONG> (Thumb, 606 bytes, Stack size 72 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = send_msg_resp &rArr; atiny_mqtt_data_send &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mqtt_data_send
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
</UL>

<P><STRONG><a name="[d40]"></a>get_resp_body</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_resp_body &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
</UL>

<P><STRONG><a name="[d41]"></a>handle_rcv_msg</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = handle_rcv_msg &rArr; send_msg_resp &rArr; atiny_mqtt_data_send &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resp_body
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_resp
<LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rcv_msg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
</UL>

<P><STRONG><a name="[d42]"></a>demo_rcv_msg</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = demo_rcv_msg &rArr; handle_rcv_msg &rArr; send_msg_resp &rArr; atiny_mqtt_data_send &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rcv_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_cmd_ioctl
</UL>

<P><STRONG><a name="[173]"></a>demo_cmd_ioctl</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, agent_tiny_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = demo_cmd_ioctl &rArr; demo_rcv_msg &rArr; handle_rcv_msg &rArr; send_msg_resp &rArr; atiny_mqtt_data_send &rArr; mqtt_get_device_topic &rArr; mqtt_get_topic &rArr; atiny_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_rcv_msg
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agent_tiny_demo.o(.text)
</UL>
<P><STRONG><a name="[d43]"></a>__airkiss_recv_guide_field</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[d45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>

<P><STRONG><a name="[d45]"></a>__airkiss_recv</STRONG> (Thumb, 1488 bytes, Stack size 80 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __airkiss_recv &rArr; __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[d46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_complete
<LI><a href="#[d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_crc8
<LI><a href="#[d43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv_guide_field
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_recv
</UL>

<P><STRONG><a name="[d44]"></a>__airkiss_crc8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __airkiss_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[d45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
<LI><a href="#[d43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv_guide_field
</UL>

<P><STRONG><a name="[d46]"></a>__airkiss_complete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __airkiss_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[d45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>

<P><STRONG><a name="[d48]"></a>setup_mix</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aesMatrix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
</UL>

<P><STRONG><a name="[d49]"></a>setup_mix2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, aesMatrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setup_mix2
</UL>
<BR>[Called By]<UL><LI><a href="#[d47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
</UL>

<P><STRONG><a name="[d4c]"></a>hostapd_alloc_ps_pkt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hostapd_alloc_ps_pkt &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
</UL>

<P><STRONG><a name="[d53]"></a>hostapd_ap_destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = hostapd_ap_destroy &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[d55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
</UL>

<P><STRONG><a name="[d57]"></a>hostapd_config_defaults</STRONG> (Thumb, 316 bytes, Stack size 152 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = hostapd_config_defaults &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
</UL>

<P><STRONG><a name="[d50]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
</UL>

<P><STRONG><a name="[d63]"></a>hostapd_send_all_pkt2sta</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hostapd_send_all_pkt2sta &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d64]"></a>hostapd_send_pkt2sta</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hostapd_send_pkt2sta &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d5f]"></a>hostapd_check_ps_pkt</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = hostapd_check_ps_pkt &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d61]"></a>hostapd_proc_beacon_done</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hostapd_proc_beacon_done &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d60]"></a>hostapd_ps_rx</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = hostapd_ps_rx &rArr; hostapd_alloc_ps_pkt &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
<LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[d71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d68]"></a>hostapd_create_softap</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = hostapd_create_softap &rArr; hostapd_create_ap &rArr; hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[d71]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
</UL>

<P><STRONG><a name="[d6e]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
</UL>

<P><STRONG><a name="[d70]"></a>hostapd_clear_multicast_ps_bit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_clear_multicast_ps_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
</UL>

<P><STRONG><a name="[d72]"></a>hostapd_create_ap</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = hostapd_create_ap &rArr; hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
<LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[d51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
</UL>

<P><STRONG><a name="[d76]"></a>random_mix_pool</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
</UL>

<P><STRONG><a name="[d75]"></a>random_extract</STRONG> (Thumb, 100 bytes, Stack size 104 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_mix_pool
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>

<P><STRONG><a name="[d8a]"></a>supplicant_event_disassoc_callback</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = supplicant_event_disassoc_callback &rArr; wpa_del_multi_bss &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_multi_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[d8e]"></a>wpa_supplicant_clear_connection</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[d8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[96]"></a>supplicant_event_beacon_done</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = supplicant_event_beacon_done &rArr; tls_os_queue_send &rArr; LOS_QueueWrite &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>supplicant_event_sta_active</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_sta_active &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>supplicant_event_rx_pspoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = supplicant_event_rx_pspoll &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>supplicant_event_rx_ps</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = supplicant_event_rx_ps &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[dc8]"></a>tls_supplicant_sta_event_handle</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = tls_supplicant_sta_event_handle &rArr; wpa_supplicant_event_assoc &rArr; wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[d87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
</UL>

<P><STRONG><a name="[d86]"></a>dl_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>

<P><STRONG><a name="[dd0]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
</UL>

<P><STRONG><a name="[d84]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[d87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[d92]"></a>is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[d83]"></a>eloop_remove_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = eloop_remove_timeout &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[dc9]"></a>supplicant_connect_network</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = supplicant_connect_network &rArr; wpa_supplicant_reload_configs &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[dd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[dd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_own_addr
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[dd7]"></a>tls_wl_init_ifdata</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tls_wl_init_ifdata &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[e00]"></a>hed_get_key_table_idx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[e07]"></a>hed_sec_set_bd_key_tbl</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_bd_key_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[e06]"></a>hed_sec_set_key_info</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_sec_set_key_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[e08]"></a>hed_sec_set_ctrl_reg</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_ctrl_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[e05]"></a>hed_hw_set_wep_key</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_wep_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[e07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[dfe]"></a>tls_wl_hw_set_beacon</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tls_wl_hw_set_beacon &rArr; hw_set_tx_rate_and_power
</UL>
<BR>[Calls]<UL><LI><a href="#[e0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
</UL>

<P><STRONG><a name="[e09]"></a>hed_hw_set_tkip_key</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_tkip_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_uni_key_tbl
<LI><a href="#[e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[e07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[e0a]"></a>hed_hw_set_ccmp_key</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_ccmp_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_uni_key_tbl
<LI><a href="#[e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[e07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[e0c]"></a>hed_sec_set_uni_key_tbl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
</UL>

<P><STRONG><a name="[e16]"></a>set_sta_flags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = set_sta_flags &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
</UL>

<P><STRONG><a name="[e4c]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e4a]"></a>tls_wl_set_rates</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_wl_set_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[e47]"></a>hed_tx_start</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = hed_tx_start &rArr; ieee80211_tx_encrypt_add_iv &rArr; ieee80211_wep_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_encrypt_add_iv
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
<LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_plus
<LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_minus
<LI><a href="#[e4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e4b]"></a>ieee80211_tx</STRONG> (Thumb, 1656 bytes, Stack size 88 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_qos_hdr
<LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ap_rx_ps
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
<LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
<LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data_qos
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
</UL>

<P><STRONG><a name="[e45]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
</UL>

<P><STRONG><a name="[e4e]"></a>ieee80211_is_data_qos</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e3e]"></a>ieee80211_get_qos_ctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_get_qos_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_qos_hdr
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e48]"></a>conf_is_ht40_minus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[e49]"></a>conf_is_ht40_plus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[e43]"></a>conf_is_ht</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[e40]"></a>ieee80211_wep_get_iv</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_wep_get_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_encrypt_add_iv
</UL>

<P><STRONG><a name="[e4d]"></a>ieee80211_ap_rx_ps</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_ap_rx_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[e5d]"></a>__wpa_update_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
</UL>

<P><STRONG><a name="[e70]"></a>tls_wifi_clear_1shot_info</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tls_wifi_clear_1shot_info &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[e7b]"></a>s_mp_add</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = s_mp_add &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[e7c]"></a>s_mp_sub</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = s_mp_sub &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[e81]"></a>fast_s_mp_mul_digs</STRONG> (Thumb, 230 bytes, Stack size 2104 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[e82]"></a>s_mp_mul_digs</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>

<P><STRONG><a name="[e84]"></a>mp_mul</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[e90]"></a>s_mp_sqr</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[e9a]"></a>s_mp_exptmod</STRONG> (Thumb, 678 bytes, Stack size 480 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_mp_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[e97]"></a>s_mp_mul_high_digs</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = s_mp_mul_high_digs &rArr; mp_init_size &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[ea7]"></a>wpa_supplicant_event_associnfo</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_event_associnfo &rArr; wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[eab]"></a>wpa_config_validate_network_test</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[db5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[ead]"></a>wpa_supplicant_update_cfg</STRONG> (Thumb, 782 bytes, Stack size 160 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher2host
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[eb1]"></a>wpa_supplicant_ssid_bss_match</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wpa_supplicant_ssid_bss_match &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[eb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[eb3]"></a>wpa_scan_res_match</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = wpa_scan_res_match &rArr; wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[eb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[eb7]"></a>wpa_supplicant_select_bss</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_select_bss &rArr; wpa_multi_bss_updte_cfg &rArr; wpa_scan_res_match &rArr; wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_destroy_multi_bss
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_updte_cfg
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
<LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[eb6]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_destroy_multi_bss
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_multi_bss
</UL>

<P><STRONG><a name="[eb5]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_multi_bss_connect
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_del_multi_bss
</UL>

<P><STRONG><a name="[eb2]"></a>wpa_key_mgmt_wpa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
</UL>

<P><STRONG><a name="[eb0]"></a>wpa_supplicant_update_key_open</STRONG> (Thumb, 108 bytes, Stack size 152 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_update_key_open &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[eb8]"></a>wpa_scan_get_res</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wpa_scan_get_res &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[eb9]"></a>wpa_add_multi_bss</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_add_multi_bss &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[eba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_copy_res
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[eba]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_multi_bss
</UL>

<P><STRONG><a name="[ebc]"></a>hostapd_setup_bss</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
<LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[ebd]"></a>hostapd_flush_old_stations</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[ecd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_flush
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
<LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[eda]"></a>handle_auth</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = handle_auth &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[edb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_authenticate_indication
<LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_auth_reply
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[edd]"></a>check_assoc_ies</STRONG> (Thumb, 358 bytes, Stack size 232 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = check_assoc_ies &rArr; wpa_validate_wpa_ie &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_no_wpa
<LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[edf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm_valid
<LI><a href="#[ede]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_print_ssid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[ee1]"></a>send_assoc_resp</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = send_assoc_resp &rArr; hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[ee5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[ee2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[ee3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[ee7]"></a>handle_assoc</STRONG> (Thumb, 538 bytes, Stack size 72 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[edc]"></a>send_auth_reply</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = send_auth_reply &rArr; hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[ee8]"></a>handle_assoc_cb</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_reassociate_indication
<LI><a href="#[eed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_associate_indication
<LI><a href="#[ef1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_sta_flags
<LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[eeb]"></a>handle_disassoc</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = handle_disassoc &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[ef4]"></a>ieee802_11_parse_vendor_specific</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, ieee802_11_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee802_11_parse_vendor_specific
</UL>
<BR>[Called By]<UL><LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
</UL>

<P><STRONG><a name="[efd]"></a>pbkdf2_sha1_f</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, sha1-pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>

<P><STRONG><a name="[efe]"></a>ap_sta_clear_pspkt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = ap_sta_clear_pspkt &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[17e]"></a>ap_sta_disassoc_cb_timeout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ap_sta_disassoc_cb_timeout &rArr; mlme_disassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostapd_sta_info.o(.text)
</UL>
<P><STRONG><a name="[eff]"></a>ap_sta_remove</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ap_sta_remove &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
</UL>

<P><STRONG><a name="[17f]"></a>ieee80211_tkip_countermeasures_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tkip_countermeasures.o(.text)
</UL>
<P><STRONG><a name="[f08]"></a>ieee80211_tkip_countermeasures_start</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_countermeasures_start
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
</UL>
<BR>[Called By]<UL><LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[f13]"></a>wpa_supplicant_process_1_of_4</STRONG> (Thumb, 232 bytes, Stack size 152 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_1_of_4 &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[180]"></a>wpa_sm_rekey_ptk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = wpa_sm_rekey_ptk &rArr; wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa.o(.text)
</UL>
<P><STRONG><a name="[f21]"></a>wpa_supplicant_check_group_cipher</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_supplicant_check_group_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[f17]"></a>wpa_supplicant_install_gtk</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_install_gtk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f19]"></a>wpa_supplicant_validate_ie</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_validate_ie &rArr; wpa_report_ie_mismatch &rArr; wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[f1d]"></a>wpa_supplicant_process_3_of_4</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_install_gtk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[f20]"></a>wpa_supplicant_process_1_of_2_wpa</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f24]"></a>wpa_supplicant_process_1_of_2</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_state
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[f0c]"></a>is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[f2a]"></a>wpa_supplicant_verify_eapol_key_mic</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wpa_supplicant_verify_eapol_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[f29]"></a>wpa_supplicant_key_neg_complete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_key_neg_complete &rArr; wpa_supplicant_set_state &rArr; tls_wl_hw_sleep &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f1e]"></a>wpa_supplicant_install_ptk</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_install_ptk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[f23]"></a>wpa_supplicant_gtk_tx_bit_workaround</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[f1f]"></a>wpa_supplicant_pairwise_gtk</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_install_gtk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[f1b]"></a>wpa_report_ie_mismatch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wpa_report_ie_mismatch &rArr; wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
</UL>

<P><STRONG><a name="[f26]"></a>wpa_supplicant_process_1_of_2_rsn</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = wpa_supplicant_process_1_of_2_rsn &rArr; wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f27]"></a>wpa_supplicant_send_2_of_2</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_send_2_of_2 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[f2b]"></a>wpa_supplicant_decrypt_key_data</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_decrypt_key_data &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[f39]"></a>is_broadcast_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
</UL>

<P><STRONG><a name="[f37]"></a>cipher2drv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[f3c]"></a>wpa_gen_wpa_ie_wpa</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[f3d]"></a>wpa_gen_wpa_ie_rsn</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_gen_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[f3e]"></a>wpa_parse_generic</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
</UL>

<P><STRONG><a name="[f41]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpabuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[f42]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[181]"></a>bss_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = bss_release &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_bss.o(.text)
</UL>
<P><STRONG><a name="[f4f]"></a>is_bss</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_bss &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
</UL>

<P><STRONG><a name="[f53]"></a>__ieee80211_key_replace</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[f54]"></a>__ieee80211_key_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = __ieee80211_key_destroy &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[f56]"></a>__ieee80211_key_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = __ieee80211_key_free &rArr; __ieee80211_key_destroy &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
</UL>

<P><STRONG><a name="[f59]"></a>tls_wl_set_mac_txbd</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tls_wl_set_mac_txbd &rArr; hw_set_tx_rate_and_power
</UL>
<BR>[Calls]<UL><LI><a href="#[e0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_plus
<LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_minus
</UL>
<BR>[Called By]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[f5c]"></a>tls_wl_enable_tx_mgmt_frm</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tls_wl_enable_tx_mgmt_frm &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[f5a]"></a>conf_is_ht40_minus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
</UL>

<P><STRONG><a name="[f5b]"></a>conf_is_ht40_plus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
</UL>

<P><STRONG><a name="[f62]"></a>tls_wl_set_mac_txbd4power</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power2
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_plus
<LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht40_minus
</UL>
<BR>[Called By]<UL><LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
</UL>

<P><STRONG><a name="[f6f]"></a>ieee80211_sta_wmm_params</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_sta_wmm_params
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[f64]"></a>ieee80211_sta_send_apinfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_sta_send_apinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>

<P><STRONG><a name="[f67]"></a>ieee80211_handle_bss_capability</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_handle_bss_capability
</UL>
<BR>[Called By]<UL><LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[f66]"></a>ieee80211_set_associated</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ieee80211_set_associated &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_handle_bss_capability
<LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[f68]"></a>ieee80211_associated</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[f69]"></a>ieee80211_associate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_auth_completed
</UL>

<P><STRONG><a name="[f6b]"></a>ieee80211_rx_bss_info</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[f6e]"></a>ieee80211_rx_mgmt_beacon</STRONG> (Thumb, 230 bytes, Stack size 208 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_beacon &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon_proc_dtim
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_handle_bss_capability
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_wmm_params
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f78]"></a>ieee80211_send_addba_resp</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[e0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_addba_request
</UL>

<P><STRONG><a name="[f7c]"></a>ieee80211_rx_mgmt_assoc_resp</STRONG> (Thumb, 614 bytes, Stack size 224 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_assoc_resp &rArr; ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ht_cap_ie_to_sta_ht_cap
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_wmm_params
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f7e]"></a>ieee80211_sta_rx_queued_mgmt</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ieee80211_sta_rx_queued_mgmt &rArr; ieee80211_rx_mgmt_beacon &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[f85]"></a>set_bit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = set_bit &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_timer
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[f8b]"></a>test_and_clear_bit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = test_and_clear_bit &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[f8a]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[f7d]"></a>set_sta_flags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = set_sta_flags &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[f8c]"></a>ieee80211_authenticate</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ieee80211_authenticate &rArr; ieee80211_send_auth &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[f7f]"></a>ieee80211_rx_mgmt_probe_resp</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_probe_resp &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f81]"></a>ieee80211_rx_mgmt_deauth</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_deauth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f80]"></a>ieee80211_rx_mgmt_auth</STRONG> (Thumb, 184 bytes, Stack size 200 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_auth &rArr; ieee80211_auth_completed &rArr; ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_auth_completed
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f82]"></a>ieee80211_rx_mgmt_action</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_action &rArr; ieee80211_process_addba_request &rArr; ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_addba_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[f8d]"></a>ieee80211_auth_completed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ieee80211_auth_completed &rArr; ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_hw_wake_up &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>
<BR>[Called By]<UL><LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
</UL>

<P><STRONG><a name="[f90]"></a>rc_valid_phyrate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_setvalid_htrates
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[f8e]"></a>rc_wl_select_max_rate</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[f8f]"></a>rc_init</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_setvalid_htrates
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_wl_select_max_rate
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_valid_phyrate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
</UL>

<P><STRONG><a name="[f97]"></a>rc_get_highest_rix</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_get_highest_rix
</UL>
<BR>[Called By]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[f95]"></a>get_rate_mode_via_rate_code</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_change_next_idx
</UL>

<P><STRONG><a name="[f94]"></a>re_change_next_idx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = re_change_next_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_mode_via_rate_code
</UL>
<BR>[Called By]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[f98]"></a>rc_rate_set_series</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rc_rate_set_series
</UL>
<BR>[Called By]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[f99]"></a>rc_nrate_remap_grate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rc_nrate_remap_grate
</UL>
<BR>[Called By]<UL><LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[f96]"></a>rc_set_rate</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_send_low
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_nrate_remap_grate
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_rate_set_series
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_change_next_idx
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_highest_rix
</UL>
<BR>[Called By]<UL><LI><a href="#[e42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_rate
</UL>

<P><STRONG><a name="[f91]"></a>rc_setvalid_htrates</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rc_setvalid_htrates
</UL>
<BR>[Calls]<UL><LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_valid_phyrate
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[f9e]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
</UL>

<P><STRONG><a name="[f9d]"></a>ieee80211_frame_allowed</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ieee80211_frame_allowed &rArr; test_sta_flags &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[fa0]"></a>prepare_for_handlers</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = prepare_for_handlers &rArr; ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[fa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_pspoll
<LI><a href="#[fa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_mgmt
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[fa5]"></a>ieee80211_rx_michael_mic_verify</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ieee80211_rx_michael_mic_verify &rArr; ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_block
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[fa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[fa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[fa8]"></a>ieee80211_rx_h_amsdu</STRONG> (Thumb, 610 bytes, Stack size 136 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_h_amsdu &rArr; ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[fa9]"></a>ieee80211_rx_mgmt_handle</STRONG> (Thumb, 304 bytes, Stack size 208 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_mgmt_handle &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; tls_fls_write &rArr; tls_spifls_write &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[fab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_beacon
<LI><a href="#[faa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_probe_resp
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[fac]"></a>ieee80211_rx_data_handle</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ieee80211_rx_data_handle &rArr; ieee80211_rx_h_amsdu &rArr; ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_notify
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[fae]"></a>ieee80211_check_frame</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ieee80211_check_frame &rArr; tls_wifi_pbreq_recv &rArr; tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
<LI><a href="#[fa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[fa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[fb0]"></a>atomic_sub_return</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_sub_return &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[f9a]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_init
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
</UL>

<P><STRONG><a name="[faf]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[fb2]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[fa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
</UL>

<P><STRONG><a name="[fa1]"></a>ieee80211_is_mgmt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[fa2]"></a>ieee80211_is_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[faa]"></a>ieee80211_is_probe_resp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[fab]"></a>ieee80211_is_beacon</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[fa3]"></a>ieee80211_is_pspoll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[fa7]"></a>ieee80211_get_SA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_get_SA
</UL>
<BR>[Calls]<UL><LI><a href="#[fb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[fa6]"></a>ieee80211_get_DA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[f9f]"></a>test_sta_flags</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = test_sta_flags &rArr; tls_os_set_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
</UL>

<P><STRONG><a name="[f9c]"></a>ieee80211_reassemble_find</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, tls_wl_rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
</UL>

<P><STRONG><a name="[fad]"></a>ieee80211_data_to_8023</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ieee80211_data_to_8023 &rArr; ieee80211_hdrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[fa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[fa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[fb1]"></a>ieee80211_mgmt_filter</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_mgmt_filter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_listen_mode
<LI><a href="#[fab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_beacon
<LI><a href="#[faa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_probe_resp
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[182]"></a>sta_info_release</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = sta_info_release &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_sta_info.o(.text)
</UL>
<P><STRONG><a name="[fb6]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[fb7]"></a>ieee80211_is_ctl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[fb5]"></a>ieee80211_is_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[fcd]"></a>ieee802_11_erp_info</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[fca]"></a>hostapd_eid_wpa</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_eid_wpa &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_wpa_ie
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[fcc]"></a>hostapd_eid_ds_params</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[fd1]"></a>hex2num</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>

<P><STRONG><a name="[fd4]"></a>wpa_auth_set_eapol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_auth_set_eapol &rArr; ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[fef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
</UL>

<P><STRONG><a name="[fd5]"></a>wpa_auth_set_key</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[feb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>

<P><STRONG><a name="[183]"></a>wpa_rekey_gmk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = wpa_rekey_gmk &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[fd6]"></a>wpa_free_sta_sm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = wpa_free_sta_sm &rArr; mem_free_debug &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[184]"></a>wpa_send_eapol_timeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = wpa_send_eapol_timeout &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[fdc]"></a>wpa_send_eapol</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[fdd]"></a>sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[fdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[fde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_seqnum
<LI><a href="#[fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[fe0]"></a>sm_WPA_PTK_GROUP_Step</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_GROUP_Step &rArr; sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_IDLE_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[fe2]"></a>sm_WPA_PTK_PTKINITNEGOTIATING_Enter</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[fdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[fde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_seqnum
<LI><a href="#[fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[185]"></a>wpa_rekey_ptk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = wpa_rekey_ptk &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[fe4]"></a>sm_WPA_PTK_PTKINITDONE_Enter</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = sm_WPA_PTK_PTKINITDONE_Enter &rArr;  wpa_sta_disconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[fe5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[fd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[fe6]"></a>sm_WPA_PTK_PTKSTART_Enter</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_PTKSTART_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[fe7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[fe9]"></a>wpa_verify_key_mic</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wpa_verify_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[fea]"></a>sm_WPA_PTK_PTKCALCNEGOTIATING_Enter</STRONG> (Thumb, 204 bytes, Stack size 120 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_PTKCALCNEGOTIATING_Enter &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[fe7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[fe9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[feb]"></a>wpa_group_config_group_keys</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = wpa_group_config_group_keys &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[ff6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[fec]"></a>wpa_gtk_update</STRONG> (Thumb, 146 bytes, Stack size 112 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[fd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[ff4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[fed]"></a>wpa_group_init_gmk_and_counter</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[fd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[fee]"></a>sm_WPA_PTK_AUTHENTICATION2_Enter</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_AUTHENTICATION2_Enter &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[fed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[feb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[fef]"></a>sm_WPA_PTK_INITIALIZE_Enter</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_INITIALIZE_Enter &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[fc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[ff0]"></a>sm_WPA_PTK_Step</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ff2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECTED_Enter
<LI><a href="#[ff1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
<LI><a href="#[fef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[fee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[fe6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[fd7]"></a>wpa_sm_step</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
<LI><a href="#[fd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_update_sta
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol_timeout
</UL>

<P><STRONG><a name="[186]"></a>wpa_group_update_sta</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = wpa_group_update_sta &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[ff4]"></a>wpa_group_setkeys</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ff5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_for_each_sta
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[ff3]"></a>wpa_group_sm_step</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[ff6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[ff4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[ffb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[fd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[187]"></a>wpa_rekey_gtk</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = wpa_rekey_gtk &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[fe7]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[fe6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[fde]"></a>wpa_auth_get_seqnum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ffe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_seqnum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[fdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[fe5]"></a>wpa_sta_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; tls_crypto_write_32reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ff1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
<LI><a href="#[fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
</UL>

<P><STRONG><a name="[fe1]"></a>sm_WPA_PTK_GROUP_IDLE_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[ff1]"></a>sm_WPA_PTK_DISCONNECT_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[fe3]"></a>wpa_request_new_ptk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[ffd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
</UL>

<P><STRONG><a name="[ff2]"></a>sm_WPA_PTK_DISCONNECTED_Enter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[ff6]"></a>wpa_group_setkeysdone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = wpa_group_setkeysdone &rArr; wpa_group_config_group_keys &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_acquire &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[feb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[ff3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[ff9]"></a>wpa_group_set_key_len</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ffb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[ff7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[ffd]"></a>wpa_receive_error_report</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = wpa_receive_error_report &rArr; michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[fe3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[1000]"></a>wpa_write_wpa_ie</STRONG> (Thumb, 296 bytes, Stack size 36 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wpa_write_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[1001]"></a>wpa_parse_generic</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[ffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
</UL>

<P><STRONG><a name="[1003]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[1004]"></a>wpa_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[1005]"></a>cipher2drv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[100e]"></a>MD5Transform</STRONG> (Thumb, 1710 bytes, Stack size 88 bytes, md5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[100d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[1030]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[101f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1031]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1032]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1033]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[102e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[102d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[102b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[102f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[1032]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1031]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[18e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[102e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[1017]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[18a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1025]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1026]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1027]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
